
lab6_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800100  00001ede  00001f72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ede  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000147  0080021c  0080021c  0000208e  2**0
                  ALLOC
  3 .stab         0000522c  00000000  00000000  00002090  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c5e  00000000  00000000  000072bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00008f1a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00008f2c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      40:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__vector_16>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__vector_18>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__vector_33>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	1b 06       	cpc	r1, r27
      8e:	f2 05       	cpc	r31, r2
      90:	f2 05       	cpc	r31, r2
      92:	f2 05       	cpc	r31, r2
      94:	f2 05       	cpc	r31, r2
      96:	f2 05       	cpc	r31, r2
      98:	f2 05       	cpc	r31, r2
      9a:	f2 05       	cpc	r31, r2
      9c:	1b 06       	cpc	r1, r27
      9e:	f2 05       	cpc	r31, r2
      a0:	f2 05       	cpc	r31, r2
      a2:	f2 05       	cpc	r31, r2
      a4:	f2 05       	cpc	r31, r2
      a6:	f2 05       	cpc	r31, r2
      a8:	f2 05       	cpc	r31, r2
      aa:	f2 05       	cpc	r31, r2
      ac:	25 06       	cpc	r2, r21
      ae:	f2 05       	cpc	r31, r2
      b0:	f2 05       	cpc	r31, r2
      b2:	f2 05       	cpc	r31, r2
      b4:	f2 05       	cpc	r31, r2
      b6:	f2 05       	cpc	r31, r2
      b8:	f2 05       	cpc	r31, r2
      ba:	f2 05       	cpc	r31, r2
      bc:	f2 05       	cpc	r31, r2
      be:	f2 05       	cpc	r31, r2
      c0:	f2 05       	cpc	r31, r2
      c2:	f2 05       	cpc	r31, r2
      c4:	f2 05       	cpc	r31, r2
      c6:	f2 05       	cpc	r31, r2
      c8:	f2 05       	cpc	r31, r2
      ca:	f2 05       	cpc	r31, r2
      cc:	25 06       	cpc	r2, r21
      ce:	f2 05       	cpc	r31, r2
      d0:	f2 05       	cpc	r31, r2
      d2:	f2 05       	cpc	r31, r2
      d4:	f2 05       	cpc	r31, r2
      d6:	f2 05       	cpc	r31, r2
      d8:	f2 05       	cpc	r31, r2
      da:	f2 05       	cpc	r31, r2
      dc:	f2 05       	cpc	r31, r2
      de:	f2 05       	cpc	r31, r2
      e0:	f2 05       	cpc	r31, r2
      e2:	f2 05       	cpc	r31, r2
      e4:	f2 05       	cpc	r31, r2
      e6:	f2 05       	cpc	r31, r2
      e8:	f2 05       	cpc	r31, r2
      ea:	f2 05       	cpc	r31, r2
      ec:	3c 06       	cpc	r3, r28
      ee:	f2 05       	cpc	r31, r2
      f0:	f2 05       	cpc	r31, r2
      f2:	f2 05       	cpc	r31, r2
      f4:	f2 05       	cpc	r31, r2
      f6:	f2 05       	cpc	r31, r2
      f8:	f2 05       	cpc	r31, r2
      fa:	f2 05       	cpc	r31, r2
      fc:	40 06       	cpc	r4, r16
      fe:	f2 05       	cpc	r31, r2
     100:	f2 05       	cpc	r31, r2
     102:	f2 05       	cpc	r31, r2
     104:	f2 05       	cpc	r31, r2
     106:	f2 05       	cpc	r31, r2
     108:	f2 05       	cpc	r31, r2
     10a:	f2 05       	cpc	r31, r2
     10c:	f2 05       	cpc	r31, r2
     10e:	f2 05       	cpc	r31, r2
     110:	f2 05       	cpc	r31, r2
     112:	f2 05       	cpc	r31, r2
     114:	f2 05       	cpc	r31, r2
     116:	f2 05       	cpc	r31, r2
     118:	f2 05       	cpc	r31, r2
     11a:	f2 05       	cpc	r31, r2
     11c:	4e 06       	cpc	r4, r30
     11e:	f2 05       	cpc	r31, r2
     120:	f2 05       	cpc	r31, r2
     122:	f2 05       	cpc	r31, r2
     124:	f2 05       	cpc	r31, r2
     126:	f2 05       	cpc	r31, r2
     128:	f2 05       	cpc	r31, r2
     12a:	f2 05       	cpc	r31, r2
     12c:	0c 06       	cpc	r0, r28

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e1       	ldi	r29, 0x10	; 16
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	12 e0       	ldi	r17, 0x02	; 2
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	ee ed       	ldi	r30, 0xDE	; 222
     142:	fe e1       	ldi	r31, 0x1E	; 30
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	ac 31       	cpi	r26, 0x1C	; 28
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	23 e0       	ldi	r18, 0x03	; 3
     156:	ac e1       	ldi	r26, 0x1C	; 28
     158:	b2 e0       	ldi	r27, 0x02	; 2
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a3 36       	cpi	r26, 0x63	; 99
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 c5 0c 	call	0x198a	; 0x198a <main>
     168:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <adjust_time>:
extern uint8_t lm73_wr_buf[2];  
extern uint8_t lm73_rd_buf[2];
uint8_t k;

void adjust_time(){   // bounding cont for real time clock
if(sum == 60){
     170:	80 91 14 01 	lds	r24, 0x0114
     174:	90 91 15 01 	lds	r25, 0x0115
     178:	8c 33       	cpi	r24, 0x3C	; 60
     17a:	91 05       	cpc	r25, r1
     17c:	09 f4       	brne	.+2      	; 0x180 <adjust_time+0x10>
     17e:	85 c0       	rjmp	.+266    	; 0x28a <adjust_time+0x11a>
     sum = 100;}
   if(sum == 160){
     180:	80 3a       	cpi	r24, 0xA0	; 160
     182:	91 05       	cpc	r25, r1
     184:	09 f4       	brne	.+2      	; 0x188 <adjust_time+0x18>
     186:	43 c0       	rjmp	.+134    	; 0x20e <adjust_time+0x9e>
     sum = 200;}
if(sum == 260){
     188:	84 30       	cpi	r24, 0x04	; 4
     18a:	21 e0       	ldi	r18, 0x01	; 1
     18c:	92 07       	cpc	r25, r18
     18e:	09 f0       	breq	.+2      	; 0x192 <adjust_time+0x22>
     190:	ba c0       	rjmp	.+372    	; 0x306 <adjust_time+0x196>
     sum = 300;}
     192:	8c e2       	ldi	r24, 0x2C	; 44
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	90 93 15 01 	sts	0x0115, r25
     19a:	80 93 14 01 	sts	0x0114, r24
     sum = 400;}
if(sum == 460){
     sum = 500;}
   if(sum == 560){
     sum = 600;}
if(sum == 660){
     19e:	84 39       	cpi	r24, 0x94	; 148
     1a0:	22 e0       	ldi	r18, 0x02	; 2
     1a2:	92 07       	cpc	r25, r18
     1a4:	09 f0       	breq	.+2      	; 0x1a8 <adjust_time+0x38>
     1a6:	b9 c0       	rjmp	.+370    	; 0x31a <adjust_time+0x1aa>
     sum = 700;}
     1a8:	8c eb       	ldi	r24, 0xBC	; 188
     1aa:	92 e0       	ldi	r25, 0x02	; 2
     1ac:	90 93 15 01 	sts	0x0115, r25
     1b0:	80 93 14 01 	sts	0x0114, r24
     sum = 800;}
if(sum == 860){
     sum = 900;}
   if(sum == 960){
     sum = 1000;}
if(sum == 1060){
     1b4:	84 32       	cpi	r24, 0x24	; 36
     1b6:	24 e0       	ldi	r18, 0x04	; 4
     1b8:	92 07       	cpc	r25, r18
     1ba:	09 f0       	breq	.+2      	; 0x1be <adjust_time+0x4e>
     1bc:	b8 c0       	rjmp	.+368    	; 0x32e <adjust_time+0x1be>
     sum = 1100;}
     1be:	8c e4       	ldi	r24, 0x4C	; 76
     1c0:	94 e0       	ldi	r25, 0x04	; 4
     1c2:	90 93 15 01 	sts	0x0115, r25
     1c6:	80 93 14 01 	sts	0x0114, r24
     sum = 1200;}
if(sum == 1260){
     sum = 1300;}
   if(sum == 1360){
     sum = 1400;}
if(sum == 1460){
     1ca:	84 3b       	cpi	r24, 0xB4	; 180
     1cc:	25 e0       	ldi	r18, 0x05	; 5
     1ce:	92 07       	cpc	r25, r18
     1d0:	09 f0       	breq	.+2      	; 0x1d4 <adjust_time+0x64>
     1d2:	b7 c0       	rjmp	.+366    	; 0x342 <adjust_time+0x1d2>
     sum = 1500;}
     1d4:	8c ed       	ldi	r24, 0xDC	; 220
     1d6:	95 e0       	ldi	r25, 0x05	; 5
     1d8:	90 93 15 01 	sts	0x0115, r25
     1dc:	80 93 14 01 	sts	0x0114, r24
     sum = 1600;}
if(sum == 1660){
     sum = 1700;}
   if(sum == 1760){
     sum = 1800;}
if(sum == 1860){
     1e0:	84 34       	cpi	r24, 0x44	; 68
     1e2:	27 e0       	ldi	r18, 0x07	; 7
     1e4:	92 07       	cpc	r25, r18
     1e6:	09 f0       	breq	.+2      	; 0x1ea <adjust_time+0x7a>
     1e8:	b6 c0       	rjmp	.+364    	; 0x356 <adjust_time+0x1e6>
     sum = 1900;}
     1ea:	8c e6       	ldi	r24, 0x6C	; 108
     1ec:	97 e0       	ldi	r25, 0x07	; 7
     1ee:	90 93 15 01 	sts	0x0115, r25
     1f2:	80 93 14 01 	sts	0x0114, r24
     sum = 2000;}
if(sum == 2060){
     sum = 2100;}
   if(sum == 2160){
     sum = 2200;}
if(sum == 2260){
     1f6:	84 3d       	cpi	r24, 0xD4	; 212
     1f8:	28 e0       	ldi	r18, 0x08	; 8
     1fa:	92 07       	cpc	r25, r18
     1fc:	09 f0       	breq	.+2      	; 0x200 <adjust_time+0x90>
     1fe:	b5 c0       	rjmp	.+362    	; 0x36a <adjust_time+0x1fa>
     sum = 2300;}
     200:	8c ef       	ldi	r24, 0xFC	; 252
     202:	98 e0       	ldi	r25, 0x08	; 8
     204:	90 93 15 01 	sts	0x0115, r25
     208:	80 93 14 01 	sts	0x0114, r24
     20c:	08 95       	ret

void adjust_time(){   // bounding cont for real time clock
if(sum == 60){
     sum = 100;}
   if(sum == 160){
     sum = 200;}
     20e:	88 ec       	ldi	r24, 0xC8	; 200
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	90 93 15 01 	sts	0x0115, r25
     216:	80 93 14 01 	sts	0x0114, r24
     sum = 300;}
   if(sum == 360){
     sum = 400;}
if(sum == 460){
     sum = 500;}
   if(sum == 560){
     21a:	80 33       	cpi	r24, 0x30	; 48
     21c:	22 e0       	ldi	r18, 0x02	; 2
     21e:	92 07       	cpc	r25, r18
     220:	09 f0       	breq	.+2      	; 0x224 <adjust_time+0xb4>
     222:	bd cf       	rjmp	.-134    	; 0x19e <adjust_time+0x2e>
     sum = 600;}
     224:	88 e5       	ldi	r24, 0x58	; 88
     226:	92 e0       	ldi	r25, 0x02	; 2
     228:	90 93 15 01 	sts	0x0115, r25
     22c:	80 93 14 01 	sts	0x0114, r24
     sum = 700;}
   if(sum == 760){
     sum = 800;}
if(sum == 860){
     sum = 900;}
   if(sum == 960){
     230:	80 3c       	cpi	r24, 0xC0	; 192
     232:	23 e0       	ldi	r18, 0x03	; 3
     234:	92 07       	cpc	r25, r18
     236:	09 f0       	breq	.+2      	; 0x23a <adjust_time+0xca>
     238:	bd cf       	rjmp	.-134    	; 0x1b4 <adjust_time+0x44>
     sum = 1000;}
     23a:	88 ee       	ldi	r24, 0xE8	; 232
     23c:	93 e0       	ldi	r25, 0x03	; 3
     23e:	90 93 15 01 	sts	0x0115, r25
     242:	80 93 14 01 	sts	0x0114, r24
     sum = 1100;}
   if(sum == 1160){
     sum = 1200;}
if(sum == 1260){
     sum = 1300;}
   if(sum == 1360){
     246:	80 35       	cpi	r24, 0x50	; 80
     248:	25 e0       	ldi	r18, 0x05	; 5
     24a:	92 07       	cpc	r25, r18
     24c:	09 f0       	breq	.+2      	; 0x250 <adjust_time+0xe0>
     24e:	bd cf       	rjmp	.-134    	; 0x1ca <adjust_time+0x5a>
     sum = 1400;}
     250:	88 e7       	ldi	r24, 0x78	; 120
     252:	95 e0       	ldi	r25, 0x05	; 5
     254:	90 93 15 01 	sts	0x0115, r25
     258:	80 93 14 01 	sts	0x0114, r24
     sum = 1500;}
   if(sum == 1560){
     sum = 1600;}
if(sum == 1660){
     sum = 1700;}
   if(sum == 1760){
     25c:	80 3e       	cpi	r24, 0xE0	; 224
     25e:	26 e0       	ldi	r18, 0x06	; 6
     260:	92 07       	cpc	r25, r18
     262:	09 f0       	breq	.+2      	; 0x266 <adjust_time+0xf6>
     264:	bd cf       	rjmp	.-134    	; 0x1e0 <adjust_time+0x70>
     sum = 1800;}
     266:	88 e0       	ldi	r24, 0x08	; 8
     268:	97 e0       	ldi	r25, 0x07	; 7
     26a:	90 93 15 01 	sts	0x0115, r25
     26e:	80 93 14 01 	sts	0x0114, r24
     sum = 1900;}
   if(sum == 1960){
     sum = 2000;}
if(sum == 2060){
     sum = 2100;}
   if(sum == 2160){
     272:	80 37       	cpi	r24, 0x70	; 112
     274:	28 e0       	ldi	r18, 0x08	; 8
     276:	92 07       	cpc	r25, r18
     278:	09 f0       	breq	.+2      	; 0x27c <adjust_time+0x10c>
     27a:	bd cf       	rjmp	.-134    	; 0x1f6 <adjust_time+0x86>
     sum = 2200;}
     27c:	88 e9       	ldi	r24, 0x98	; 152
     27e:	98 e0       	ldi	r25, 0x08	; 8
     280:	90 93 15 01 	sts	0x0115, r25
     284:	80 93 14 01 	sts	0x0114, r24
     288:	08 95       	ret
extern uint8_t lm73_rd_buf[2];
uint8_t k;

void adjust_time(){   // bounding cont for real time clock
if(sum == 60){
     sum = 100;}
     28a:	84 e6       	ldi	r24, 0x64	; 100
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	90 93 15 01 	sts	0x0115, r25
     292:	80 93 14 01 	sts	0x0114, r24
     sum = 200;}
if(sum == 260){
     sum = 300;}
   if(sum == 360){
     sum = 400;}
if(sum == 460){
     296:	8c 3c       	cpi	r24, 0xCC	; 204
     298:	21 e0       	ldi	r18, 0x01	; 1
     29a:	92 07       	cpc	r25, r18
     29c:	09 f0       	breq	.+2      	; 0x2a0 <adjust_time+0x130>
     29e:	bd cf       	rjmp	.-134    	; 0x21a <adjust_time+0xaa>
     sum = 500;}
     2a0:	84 ef       	ldi	r24, 0xF4	; 244
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	90 93 15 01 	sts	0x0115, r25
     2a8:	80 93 14 01 	sts	0x0114, r24
     sum = 600;}
if(sum == 660){
     sum = 700;}
   if(sum == 760){
     sum = 800;}
if(sum == 860){
     2ac:	8c 35       	cpi	r24, 0x5C	; 92
     2ae:	23 e0       	ldi	r18, 0x03	; 3
     2b0:	92 07       	cpc	r25, r18
     2b2:	09 f0       	breq	.+2      	; 0x2b6 <adjust_time+0x146>
     2b4:	bd cf       	rjmp	.-134    	; 0x230 <adjust_time+0xc0>
     sum = 900;}
     2b6:	84 e8       	ldi	r24, 0x84	; 132
     2b8:	93 e0       	ldi	r25, 0x03	; 3
     2ba:	90 93 15 01 	sts	0x0115, r25
     2be:	80 93 14 01 	sts	0x0114, r24
     sum = 1000;}
if(sum == 1060){
     sum = 1100;}
   if(sum == 1160){
     sum = 1200;}
if(sum == 1260){
     2c2:	8c 3e       	cpi	r24, 0xEC	; 236
     2c4:	24 e0       	ldi	r18, 0x04	; 4
     2c6:	92 07       	cpc	r25, r18
     2c8:	09 f0       	breq	.+2      	; 0x2cc <adjust_time+0x15c>
     2ca:	bd cf       	rjmp	.-134    	; 0x246 <adjust_time+0xd6>
     sum = 1300;}
     2cc:	84 e1       	ldi	r24, 0x14	; 20
     2ce:	95 e0       	ldi	r25, 0x05	; 5
     2d0:	90 93 15 01 	sts	0x0115, r25
     2d4:	80 93 14 01 	sts	0x0114, r24
     sum = 1400;}
if(sum == 1460){
     sum = 1500;}
   if(sum == 1560){
     sum = 1600;}
if(sum == 1660){
     2d8:	8c 37       	cpi	r24, 0x7C	; 124
     2da:	26 e0       	ldi	r18, 0x06	; 6
     2dc:	92 07       	cpc	r25, r18
     2de:	09 f0       	breq	.+2      	; 0x2e2 <adjust_time+0x172>
     2e0:	bd cf       	rjmp	.-134    	; 0x25c <adjust_time+0xec>
     sum = 1700;}
     2e2:	84 ea       	ldi	r24, 0xA4	; 164
     2e4:	96 e0       	ldi	r25, 0x06	; 6
     2e6:	90 93 15 01 	sts	0x0115, r25
     2ea:	80 93 14 01 	sts	0x0114, r24
     sum = 1800;}
if(sum == 1860){
     sum = 1900;}
   if(sum == 1960){
     sum = 2000;}
if(sum == 2060){
     2ee:	8c 30       	cpi	r24, 0x0C	; 12
     2f0:	28 e0       	ldi	r18, 0x08	; 8
     2f2:	92 07       	cpc	r25, r18
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <adjust_time+0x188>
     2f6:	bd cf       	rjmp	.-134    	; 0x272 <adjust_time+0x102>
     sum = 2100;}
     2f8:	84 e3       	ldi	r24, 0x34	; 52
     2fa:	98 e0       	ldi	r25, 0x08	; 8
     2fc:	90 93 15 01 	sts	0x0115, r25
     300:	80 93 14 01 	sts	0x0114, r24
     304:	08 95       	ret
     sum = 100;}
   if(sum == 160){
     sum = 200;}
if(sum == 260){
     sum = 300;}
   if(sum == 360){
     306:	88 36       	cpi	r24, 0x68	; 104
     308:	21 e0       	ldi	r18, 0x01	; 1
     30a:	92 07       	cpc	r25, r18
     30c:	21 f6       	brne	.-120    	; 0x296 <adjust_time+0x126>
     sum = 400;}
     30e:	80 e9       	ldi	r24, 0x90	; 144
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	90 93 15 01 	sts	0x0115, r25
     316:	80 93 14 01 	sts	0x0114, r24
     sum = 500;}
   if(sum == 560){
     sum = 600;}
if(sum == 660){
     sum = 700;}
   if(sum == 760){
     31a:	88 3f       	cpi	r24, 0xF8	; 248
     31c:	22 e0       	ldi	r18, 0x02	; 2
     31e:	92 07       	cpc	r25, r18
     320:	29 f6       	brne	.-118    	; 0x2ac <adjust_time+0x13c>
     sum = 800;}
     322:	80 e2       	ldi	r24, 0x20	; 32
     324:	93 e0       	ldi	r25, 0x03	; 3
     326:	90 93 15 01 	sts	0x0115, r25
     32a:	80 93 14 01 	sts	0x0114, r24
     sum = 900;}
   if(sum == 960){
     sum = 1000;}
if(sum == 1060){
     sum = 1100;}
   if(sum == 1160){
     32e:	88 38       	cpi	r24, 0x88	; 136
     330:	24 e0       	ldi	r18, 0x04	; 4
     332:	92 07       	cpc	r25, r18
     334:	31 f6       	brne	.-116    	; 0x2c2 <adjust_time+0x152>
     sum = 1200;}
     336:	80 eb       	ldi	r24, 0xB0	; 176
     338:	94 e0       	ldi	r25, 0x04	; 4
     33a:	90 93 15 01 	sts	0x0115, r25
     33e:	80 93 14 01 	sts	0x0114, r24
     sum = 1300;}
   if(sum == 1360){
     sum = 1400;}
if(sum == 1460){
     sum = 1500;}
   if(sum == 1560){
     342:	88 31       	cpi	r24, 0x18	; 24
     344:	26 e0       	ldi	r18, 0x06	; 6
     346:	92 07       	cpc	r25, r18
     348:	39 f6       	brne	.-114    	; 0x2d8 <adjust_time+0x168>
     sum = 1600;}
     34a:	80 e4       	ldi	r24, 0x40	; 64
     34c:	96 e0       	ldi	r25, 0x06	; 6
     34e:	90 93 15 01 	sts	0x0115, r25
     352:	80 93 14 01 	sts	0x0114, r24
     sum = 1700;}
   if(sum == 1760){
     sum = 1800;}
if(sum == 1860){
     sum = 1900;}
   if(sum == 1960){
     356:	88 3a       	cpi	r24, 0xA8	; 168
     358:	27 e0       	ldi	r18, 0x07	; 7
     35a:	92 07       	cpc	r25, r18
     35c:	41 f6       	brne	.-112    	; 0x2ee <adjust_time+0x17e>
     sum = 2000;}
     35e:	80 ed       	ldi	r24, 0xD0	; 208
     360:	97 e0       	ldi	r25, 0x07	; 7
     362:	90 93 15 01 	sts	0x0115, r25
     366:	80 93 14 01 	sts	0x0114, r24
     sum = 2100;}
   if(sum == 2160){
     sum = 2200;}
if(sum == 2260){
     sum = 2300;}
   if(sum == 2360){
     36a:	88 33       	cpi	r24, 0x38	; 56
     36c:	99 40       	sbci	r25, 0x09	; 9
     36e:	21 f4       	brne	.+8      	; 0x378 <adjust_time+0x208>
     sum = 0;}
     370:	10 92 15 01 	sts	0x0115, r1
     374:	10 92 14 01 	sts	0x0114, r1
     378:	08 95       	ret

0000037a <chk_buttons>:
//push so a debounce and toggle function can be implemented at the same time.  
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
     37a:	48 2f       	mov	r20, r24

  static uint16_t state[8] ={0x00}; //holds present state
  state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
     37c:	e8 2f       	mov	r30, r24
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	99 b3       	in	r25, 0x19	; 25
     382:	ee 0f       	add	r30, r30
     384:	ff 1f       	adc	r31, r31
     386:	e4 5d       	subi	r30, 0xD4	; 212
     388:	fd 4f       	sbci	r31, 0xFD	; 253
     38a:	20 81       	ld	r18, Z
     38c:	31 81       	ldd	r19, Z+1	; 0x01
     38e:	22 0f       	add	r18, r18
     390:	33 1f       	adc	r19, r19
     392:	30 6e       	ori	r19, 0xE0	; 224
     394:	89 2f       	mov	r24, r25
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	02 c0       	rjmp	.+4      	; 0x39e <chk_buttons+0x24>
     39a:	95 95       	asr	r25
     39c:	87 95       	ror	r24
     39e:	4a 95       	dec	r20
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <chk_buttons+0x20>
     3a2:	81 70       	andi	r24, 0x01	; 1
     3a4:	99 27       	eor	r25, r25
     3a6:	28 2b       	or	r18, r24
     3a8:	39 2b       	or	r19, r25
     3aa:	31 83       	std	Z+1, r19	; 0x01
     3ac:	20 83       	st	Z, r18
  if (state[button] == 0xF000) return 1;
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	21 15       	cp	r18, r1
     3b2:	30 4f       	sbci	r19, 0xF0	; 240
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <chk_buttons+0x3e>
     3b6:	80 e0       	ldi	r24, 0x00	; 0
  return 0;

}
     3b8:	08 95       	ret

000003ba <button_process>:
//******************************************************************//

uint8_t button_process(void)
  {
     uint8_t i=1;
     PORTB |= 0x70;                           // ENABLE TRISTATE BUFFER
     3ba:	88 b3       	in	r24, 0x18	; 24
     3bc:	80 67       	ori	r24, 0x70	; 112
     3be:	88 bb       	out	0x18, r24	; 24
     3c0:	60 91 20 02 	lds	r22, 0x0220
     3c4:	ec e2       	ldi	r30, 0x2C	; 44
     3c6:	f2 e0       	ldi	r31, 0x02	; 2
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	50 e0       	ldi	r21, 0x00	; 0
 
          if((state & 0x07) == 1) {counter_value = 1;} //if first button is pressed

          if((state & 0x07) == 2) 
           {
             counter_value = 1;
     3cc:	a1 e0       	ldi	r26, 0x01	; 1
     3ce:	15 c0       	rjmp	.+42     	; 0x3fa <button_process+0x40>
          if(chk_buttons(i-1) == 1)              // if its pushed
           {
             state ^= i;                         //state holds value of push buttons
           }

          if((state & 0x03) == 0) {sei();}           //if no button pressed then enable global interrupt
     3d0:	86 2f       	mov	r24, r22
     3d2:	83 70       	andi	r24, 0x03	; 3
     3d4:	19 f4       	brne	.+6      	; 0x3dc <button_process+0x22>
     3d6:	78 94       	sei
     3d8:	60 91 20 02 	lds	r22, 0x0220
 
          if((state & 0x07) == 1) {counter_value = 1;} //if first button is pressed
     3dc:	86 2f       	mov	r24, r22
     3de:	87 70       	andi	r24, 0x07	; 7
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	d1 f1       	breq	.+116    	; 0x458 <button_process+0x9e>

          if((state & 0x07) == 2) 
     3e4:	82 30       	cpi	r24, 0x02	; 2
     3e6:	21 f4       	brne	.+8      	; 0x3f0 <button_process+0x36>
           {
             counter_value = 1;
     3e8:	a0 93 1f 02 	sts	0x021F, r26
             seconds = 0;    //if second button is pressed
     3ec:	10 92 23 02 	sts	0x0223, r1
     3f0:	4f 5f       	subi	r20, 0xFF	; 255
     3f2:	5f 4f       	sbci	r21, 0xFF	; 255
uint8_t button_process(void)
  {
     uint8_t i=1;
     PORTB |= 0x70;                           // ENABLE TRISTATE BUFFER

      for(i=1;i<7;i++)                       //counter for push buttons
     3f4:	46 30       	cpi	r20, 0x06	; 6
     3f6:	51 05       	cpc	r21, r1
     3f8:	b1 f1       	breq	.+108    	; 0x466 <button_process+0xac>
     3fa:	71 e0       	ldi	r23, 0x01	; 1
     3fc:	74 0f       	add	r23, r20
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {

  static uint16_t state[8] ={0x00}; //holds present state
  state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
     3fe:	99 b3       	in	r25, 0x19	; 25
     400:	20 81       	ld	r18, Z
     402:	31 81       	ldd	r19, Z+1	; 0x01
     404:	22 0f       	add	r18, r18
     406:	33 1f       	adc	r19, r19
     408:	30 6e       	ori	r19, 0xE0	; 224
     40a:	89 2f       	mov	r24, r25
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	04 2e       	mov	r0, r20
     410:	02 c0       	rjmp	.+4      	; 0x416 <button_process+0x5c>
     412:	95 95       	asr	r25
     414:	87 95       	ror	r24
     416:	0a 94       	dec	r0
     418:	e2 f7       	brpl	.-8      	; 0x412 <button_process+0x58>
     41a:	81 70       	andi	r24, 0x01	; 1
     41c:	99 27       	eor	r25, r25
     41e:	28 2b       	or	r18, r24
     420:	39 2b       	or	r19, r25
     422:	31 83       	std	Z+1, r19	; 0x01
     424:	20 83       	st	Z, r18
     426:	89 b3       	in	r24, 0x19	; 25
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	04 2e       	mov	r0, r20
     42c:	02 c0       	rjmp	.+4      	; 0x432 <button_process+0x78>
     42e:	95 95       	asr	r25
     430:	87 95       	ror	r24
     432:	0a 94       	dec	r0
     434:	e2 f7       	brpl	.-8      	; 0x42e <button_process+0x74>
     436:	81 70       	andi	r24, 0x01	; 1
     438:	99 27       	eor	r25, r25
     43a:	90 6e       	ori	r25, 0xE0	; 224
     43c:	22 0f       	add	r18, r18
     43e:	33 1f       	adc	r19, r19
     440:	82 2b       	or	r24, r18
     442:	93 2b       	or	r25, r19
     444:	81 93       	st	Z+, r24
     446:	91 93       	st	Z+, r25
  if (state[button] == 0xF000) return 1;
     448:	81 15       	cp	r24, r1
     44a:	90 4f       	sbci	r25, 0xF0	; 240
     44c:	09 f0       	breq	.+2      	; 0x450 <button_process+0x96>
     44e:	c0 cf       	rjmp	.-128    	; 0x3d0 <button_process+0x16>
       {                       
         chk_buttons(i-1);                       // call chk_cuttons

          if(chk_buttons(i-1) == 1)              // if its pushed
           {
             state ^= i;                         //state holds value of push buttons
     450:	67 27       	eor	r22, r23
     452:	60 93 20 02 	sts	0x0220, r22
     456:	bc cf       	rjmp	.-136    	; 0x3d0 <button_process+0x16>
           }

          if((state & 0x03) == 0) {sei();}           //if no button pressed then enable global interrupt
 
          if((state & 0x07) == 1) {counter_value = 1;} //if first button is pressed
     458:	80 93 1f 02 	sts	0x021F, r24
     45c:	4f 5f       	subi	r20, 0xFF	; 255
     45e:	5f 4f       	sbci	r21, 0xFF	; 255
uint8_t button_process(void)
  {
     uint8_t i=1;
     PORTB |= 0x70;                           // ENABLE TRISTATE BUFFER

      for(i=1;i<7;i++)                       //counter for push buttons
     460:	46 30       	cpi	r20, 0x06	; 6
     462:	51 05       	cpc	r21, r1
     464:	51 f6       	brne	.-108    	; 0x3fa <button_process+0x40>
           }

            
       } //for

  PORTB |= 0x00;                                //disable tristate buffer
     466:	88 b3       	in	r24, 0x18	; 24
     468:	88 bb       	out	0x18, r24	; 24
  SPDR = state;                                  // send data to bargraph
     46a:	80 91 20 02 	lds	r24, 0x0220
     46e:	8f b9       	out	0x0f, r24	; 15
  while(bit_is_clear(SPSR,SPIF)){}            // wait for 8 cycles
     470:	77 9b       	sbis	0x0e, 7	; 14
     472:	fe cf       	rjmp	.-4      	; 0x470 <button_process+0xb6>
  data = SPDR;                                 //receive  data form encoder
     474:	8f b1       	in	r24, 0x0f	; 15
     476:	80 93 1e 02 	sts	0x021E, r24
 }
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	08 95       	ret

0000047e <spi_init>:
//*********************************************************************
                                //SPI initialize
//*********************************************************************
void spi_init()
{
        DDRF  |= 0x08;  //port F bit 3 is enable for LCD
     47e:	e1 e6       	ldi	r30, 0x61	; 97
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	88 60       	ori	r24, 0x08	; 8
     486:	80 83       	st	Z, r24
        PORTF &= 0xF7;  //port F bit 3 is initially low
     488:	e2 e6       	ldi	r30, 0x62	; 98
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	80 81       	ld	r24, Z
     48e:	87 7f       	andi	r24, 0xF7	; 247
     490:	80 83       	st	Z, r24
	DDRB = 0xF7;    // set ss_n, sck, mosi
     492:	87 ef       	ldi	r24, 0xF7	; 247
     494:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE) | (1<<MSTR);// master mode
     496:	8d b1       	in	r24, 0x0d	; 13
     498:	80 65       	ori	r24, 0x50	; 80
     49a:	8d b9       	out	0x0d, r24	; 13
	SPSR |= (1<<SPI2X);// double speed operation
     49c:	70 9a       	sbi	0x0e, 0	; 14
     49e:	08 95       	ret

000004a0 <segsum>:
//***********************************************************************************
//                                   segment_sum                                    
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(sum) {
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	ec 01       	movw	r28, r24
uint8_t tens;  
uint8_t hundreds;  
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
tens = (sum/10)%10;
hundreds = (sum/100)%10;
     4aa:	64 e6       	ldi	r22, 0x64	; 100
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__divmodhi4>
     4b2:	cb 01       	movw	r24, r22
     4b4:	0a e0       	ldi	r16, 0x0A	; 10
     4b6:	10 e0       	ldi	r17, 0x00	; 0
     4b8:	b8 01       	movw	r22, r16
     4ba:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__divmodhi4>
     4be:	fc 01       	movw	r30, r24
thousands = (sum/1000)%10;
     4c0:	ce 01       	movw	r24, r28
     4c2:	68 ee       	ldi	r22, 0xE8	; 232
     4c4:	73 e0       	ldi	r23, 0x03	; 3
     4c6:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__divmodhi4>
     4ca:	cb 01       	movw	r24, r22
     4cc:	b8 01       	movw	r22, r16
     4ce:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__divmodhi4>
     4d2:	9c 01       	movw	r18, r24
void segsum(sum) {
uint8_t ones;  
uint8_t tens;  
uint8_t hundreds;  
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
     4d4:	ce 01       	movw	r24, r28
     4d6:	b8 01       	movw	r22, r16
     4d8:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__divmodhi4>
tens = (sum/10)%10;
hundreds = (sum/100)%10;
thousands = (sum/1000)%10;
segment_data[0] = dec_to_7seg[ones];
     4dc:	dc 01       	movw	r26, r24
     4de:	bb 27       	eor	r27, r27
     4e0:	a0 50       	subi	r26, 0x00	; 0
     4e2:	bf 4f       	sbci	r27, 0xFF	; 255
     4e4:	8c 91       	ld	r24, X
     4e6:	80 93 a4 02 	sts	0x02A4, r24
uint8_t ones;  
uint8_t tens;  
uint8_t hundreds;  
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
tens = (sum/10)%10;
     4ea:	cb 01       	movw	r24, r22
     4ec:	b8 01       	movw	r22, r16
     4ee:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__divmodhi4>
hundreds = (sum/100)%10;
thousands = (sum/1000)%10;
segment_data[0] = dec_to_7seg[ones];
segment_data[1] = dec_to_7seg[tens];
     4f2:	dc 01       	movw	r26, r24
     4f4:	bb 27       	eor	r27, r27
     4f6:	a0 50       	subi	r26, 0x00	; 0
     4f8:	bf 4f       	sbci	r27, 0xFF	; 255
     4fa:	8c 91       	ld	r24, X
     4fc:	80 93 a5 02 	sts	0x02A5, r24
if((seconds % 2) == 0){segment_data[2] = dec_to_7seg[10];}
     500:	80 91 23 02 	lds	r24, 0x0223
     504:	80 fd       	sbrc	r24, 0
     506:	22 c0       	rjmp	.+68     	; 0x54c <segsum+0xac>
     508:	80 91 0a 01 	lds	r24, 0x010A
     50c:	80 93 a6 02 	sts	0x02A6, r24
else segment_data[2] = dec_to_7seg[11];
segment_data[3] = dec_to_7seg[hundreds];
     510:	ff 27       	eor	r31, r31
     512:	e0 50       	subi	r30, 0x00	; 0
     514:	ff 4f       	sbci	r31, 0xFF	; 255
     516:	80 81       	ld	r24, Z
     518:	80 93 a7 02 	sts	0x02A7, r24
segment_data[4] = dec_to_7seg[thousands];
     51c:	33 27       	eor	r19, r19
     51e:	f9 01       	movw	r30, r18
     520:	e0 50       	subi	r30, 0x00	; 0
     522:	ff 4f       	sbci	r31, 0xFF	; 255
     524:	80 81       	ld	r24, Z
     526:	80 93 a8 02 	sts	0x02A8, r24
if(sum<10){           //blancking leading 0s
     52a:	ca 30       	cpi	r28, 0x0A	; 10
     52c:	d1 05       	cpc	r29, r1
     52e:	ec f0       	brlt	.+58     	; 0x56a <segsum+0xca>
  segment_data[1] = 0xFF;
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<100){
     530:	c4 36       	cpi	r28, 0x64	; 100
     532:	d1 05       	cpc	r29, r1
     534:	84 f0       	brlt	.+32     	; 0x556 <segsum+0xb6>
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<1000){
     536:	c8 3e       	cpi	r28, 0xE8	; 232
     538:	d3 40       	sbci	r29, 0x03	; 3
     53a:	1c f4       	brge	.+6      	; 0x542 <segsum+0xa2>
  segment_data[4] = 0xFF;}
     53c:	8f ef       	ldi	r24, 0xFF	; 255
     53e:	80 93 a8 02 	sts	0x02A8, r24

}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	08 95       	ret
hundreds = (sum/100)%10;
thousands = (sum/1000)%10;
segment_data[0] = dec_to_7seg[ones];
segment_data[1] = dec_to_7seg[tens];
if((seconds % 2) == 0){segment_data[2] = dec_to_7seg[10];}
else segment_data[2] = dec_to_7seg[11];
     54c:	80 91 0b 01 	lds	r24, 0x010B
     550:	80 93 a6 02 	sts	0x02A6, r24
     554:	dd cf       	rjmp	.-70     	; 0x510 <segsum+0x70>
if(sum<10){           //blancking leading 0s
  segment_data[1] = 0xFF;
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<100){
  segment_data[3] = 0xFF;
     556:	8f ef       	ldi	r24, 0xFF	; 255
     558:	80 93 a7 02 	sts	0x02A7, r24
  segment_data[4] = 0xFF;}
     55c:	80 93 a8 02 	sts	0x02A8, r24
else if(sum<1000){
  segment_data[4] = 0xFF;}

}
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	08 95       	ret
if((seconds % 2) == 0){segment_data[2] = dec_to_7seg[10];}
else segment_data[2] = dec_to_7seg[11];
segment_data[3] = dec_to_7seg[hundreds];
segment_data[4] = dec_to_7seg[thousands];
if(sum<10){           //blancking leading 0s
  segment_data[1] = 0xFF;
     56a:	8f ef       	ldi	r24, 0xFF	; 255
     56c:	80 93 a5 02 	sts	0x02A5, r24
  segment_data[3] = 0xFF;
     570:	80 93 a7 02 	sts	0x02A7, r24
  segment_data[4] = 0xFF;}
     574:	80 93 a8 02 	sts	0x02A8, r24
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<1000){
  segment_data[4] = 0xFF;}

}
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	08 95       	ret

00000582 <encoder>:
void encoder(){

 static uint8_t a_past = 0x00; // holds last value
 static uint8_t b_past = 0x00; // holds last value for 

 DDRE = 0xFF;                  //set port E to output
     582:	8f ef       	ldi	r24, 0xFF	; 255
     584:	82 b9       	out	0x02, r24	; 2
 PORTE |= 0x20 ;               // inhibitor high
     586:	1d 9a       	sbi	0x03, 5	; 3
 asm("nop");
     588:	00 00       	nop
 asm("nop");
     58a:	00 00       	nop
 PORTE &= ~(0x40);             //SH_LD/ low
     58c:	1e 98       	cbi	0x03, 6	; 3
 asm("nop");
     58e:	00 00       	nop
 asm("nop");
     590:	00 00       	nop
 PORTE |= 0x40;               //SH/LD_n high
     592:	1e 9a       	sbi	0x03, 6	; 3
 PORTE &= ~(0x20);            //inhibitor low
     594:	1d 98       	cbi	0x03, 5	; 3
 uint8_t dat = data&0x03;     // mask data
     596:	90 91 1e 02 	lds	r25, 0x021E
 uint8_t dat1 = data&0x0C;    // mask data1

if((state & 0x03) == 1){
     59a:	80 91 20 02 	lds	r24, 0x0220
     59e:	83 70       	andi	r24, 0x03	; 3
     5a0:	81 30       	cpi	r24, 0x01	; 1
     5a2:	b1 f0       	breq	.+44     	; 0x5d0 <encoder+0x4e>
                  	break;
		}
	
    }
 }
if((state & 0x03) == 2){
     5a4:	82 30       	cpi	r24, 0x02	; 2
     5a6:	09 f0       	breq	.+2      	; 0x5aa <encoder+0x28>
     5a8:	08 95       	ret
 asm("nop");
 asm("nop");
 PORTE |= 0x40;               //SH/LD_n high
 PORTE &= ~(0x20);            //inhibitor low
 uint8_t dat = data&0x03;     // mask data
 uint8_t dat1 = data&0x0C;    // mask data1
     5aa:	9c 70       	andi	r25, 0x0C	; 12
		}
	
    }
 }
if((state & 0x03) == 2){
switch(b_past)                 //inc and dec count according to direction of encoder for second encoder
     5ac:	80 91 2a 02 	lds	r24, 0x022A
     5b0:	84 30       	cpi	r24, 0x04	; 4
     5b2:	01 f1       	breq	.+64     	; 0x5f4 <encoder+0x72>
     5b4:	c8 f0       	brcs	.+50     	; 0x5e8 <encoder+0x66>
     5b6:	88 30       	cpi	r24, 0x08	; 8
     5b8:	11 f0       	breq	.+4      	; 0x5be <encoder+0x3c>
     5ba:	8c 30       	cpi	r24, 0x0C	; 12
     5bc:	11 f4       	brne	.+4      	; 0x5c2 <encoder+0x40>
                }
        case 0x08:
                {
                        if(dat1==0x00){}
                        else if(dat1==0x0C){}
                        b_past = dat1;
     5be:	90 93 2a 02 	sts	0x022A, r25
     5c2:	20 91 14 01 	lds	r18, 0x0114
     5c6:	30 91 15 01 	lds	r19, 0x0115
                        break;
                }

    }
  segsum(sum);               //display increment setting of real time clock
     5ca:	c9 01       	movw	r24, r18
     5cc:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <segsum>
 PORTE &= ~(0x40);             //SH_LD/ low
 asm("nop");
 asm("nop");
 PORTE |= 0x40;               //SH/LD_n high
 PORTE &= ~(0x20);            //inhibitor low
 uint8_t dat = data&0x03;     // mask data
     5d0:	29 2f       	mov	r18, r25
     5d2:	23 70       	andi	r18, 0x03	; 3
 uint8_t dat1 = data&0x0C;    // mask data1

if((state & 0x03) == 1){
	switch(a_past)        // inc & dec according to direction of encoder for encoder 1
     5d4:	80 91 2b 02 	lds	r24, 0x022B
     5d8:	81 30       	cpi	r24, 0x01	; 1
     5da:	b9 f0       	breq	.+46     	; 0x60a <encoder+0x88>
     5dc:	40 f0       	brcs	.+16     	; 0x5ee <encoder+0x6c>
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	31 f0       	breq	.+12     	; 0x5ee <encoder+0x6c>
     5e2:	83 30       	cpi	r24, 0x03	; 3
     5e4:	21 f0       	breq	.+8      	; 0x5ee <encoder+0x6c>
     5e6:	08 95       	ret
		}
	
    }
 }
if((state & 0x03) == 2){
switch(b_past)                 //inc and dec count according to direction of encoder for second encoder
     5e8:	88 23       	and	r24, r24
     5ea:	49 f3       	breq	.-46     	; 0x5be <encoder+0x3c>
     5ec:	ea cf       	rjmp	.-44     	; 0x5c2 <encoder+0x40>
		}
        case 0x02:
		{
			if(dat==0x00){}
                  	else if(dat==0x03){}
			a_past = dat;
     5ee:	20 93 2b 02 	sts	0x022B, r18
                  	break;
     5f2:	08 95       	ret
                        break;
                }

        case 0x04:
                {
                        if(dat1==0x0C){sum = sum + counter_value;}      // inc count
     5f4:	9c 30       	cpi	r25, 0x0C	; 12
     5f6:	99 f1       	breq	.+102    	; 0x65e <encoder+0xdc>
                        else if(dat1==0x00){sum = sum - counter_value;} // dec count
     5f8:	99 23       	and	r25, r25
     5fa:	71 f0       	breq	.+28     	; 0x618 <encoder+0x96>
     5fc:	20 91 14 01 	lds	r18, 0x0114
     600:	30 91 15 01 	lds	r19, 0x0115
                        b_past = dat1;
     604:	90 93 2a 02 	sts	0x022A, r25
                        break;
     608:	e0 cf       	rjmp	.-64     	; 0x5ca <encoder+0x48>
                  	break;
		}

        case 0x01:
		{
		  if(dat==0x03){total = total + counter_value;
     60a:	23 30       	cpi	r18, 0x03	; 3
     60c:	91 f0       	breq	.+36     	; 0x632 <encoder+0xb0>
                                        _delay_ms(2);}           // inc count
                  else if(dat==0x00){total = total - counter_value;
     60e:	22 23       	and	r18, r18
     610:	99 f1       	breq	.+102    	; 0x678 <encoder+0xf6>
                                           _delay_ms(2);}        // dec count
			a_past = dat;
     612:	20 93 2b 02 	sts	0x022B, r18
                  	break;
     616:	c6 cf       	rjmp	.-116    	; 0x5a4 <encoder+0x22>
                }

        case 0x04:
                {
                        if(dat1==0x0C){sum = sum + counter_value;}      // inc count
                        else if(dat1==0x00){sum = sum - counter_value;} // dec count
     618:	80 91 1f 02 	lds	r24, 0x021F
     61c:	20 91 14 01 	lds	r18, 0x0114
     620:	30 91 15 01 	lds	r19, 0x0115
     624:	28 1b       	sub	r18, r24
     626:	31 09       	sbc	r19, r1
     628:	30 93 15 01 	sts	0x0115, r19
     62c:	20 93 14 01 	sts	0x0114, r18
     630:	e9 cf       	rjmp	.-46     	; 0x604 <encoder+0x82>
                  	break;
		}

        case 0x01:
		{
		  if(dat==0x03){total = total + counter_value;
     632:	80 91 1f 02 	lds	r24, 0x021F
     636:	40 91 12 01 	lds	r20, 0x0112
     63a:	50 91 13 01 	lds	r21, 0x0113
     63e:	48 0f       	add	r20, r24
     640:	51 1d       	adc	r21, r1
                                        _delay_ms(2);}           // inc count
                  else if(dat==0x00){total = total - counter_value;
     642:	50 93 13 01 	sts	0x0113, r21
     646:	40 93 12 01 	sts	0x0112, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     64a:	ef e3       	ldi	r30, 0x3F	; 63
     64c:	ff e1       	ldi	r31, 0x1F	; 31
     64e:	31 97       	sbiw	r30, 0x01	; 1
     650:	f1 f7       	brne	.-4      	; 0x64e <encoder+0xcc>
     652:	00 c0       	rjmp	.+0      	; 0x654 <encoder+0xd2>
     654:	00 00       	nop
     656:	80 91 20 02 	lds	r24, 0x0220
     65a:	83 70       	andi	r24, 0x03	; 3
     65c:	da cf       	rjmp	.-76     	; 0x612 <encoder+0x90>
                        break;
                }

        case 0x04:
                {
                        if(dat1==0x0C){sum = sum + counter_value;}      // inc count
     65e:	80 91 1f 02 	lds	r24, 0x021F
     662:	20 91 14 01 	lds	r18, 0x0114
     666:	30 91 15 01 	lds	r19, 0x0115
     66a:	28 0f       	add	r18, r24
     66c:	31 1d       	adc	r19, r1
     66e:	30 93 15 01 	sts	0x0115, r19
     672:	20 93 14 01 	sts	0x0114, r18
     676:	c6 cf       	rjmp	.-116    	; 0x604 <encoder+0x82>

        case 0x01:
		{
		  if(dat==0x03){total = total + counter_value;
                                        _delay_ms(2);}           // inc count
                  else if(dat==0x00){total = total - counter_value;
     678:	80 91 1f 02 	lds	r24, 0x021F
     67c:	40 91 12 01 	lds	r20, 0x0112
     680:	50 91 13 01 	lds	r21, 0x0113
     684:	48 1b       	sub	r20, r24
     686:	51 09       	sbc	r21, r1
     688:	dc cf       	rjmp	.-72     	; 0x642 <encoder+0xc0>

0000068a <set_freq>:
void set_freq(){

 static uint8_t a_past = 0x00; // holds last value
 static uint8_t b_past = 0x00; // holds last value for 

 DDRE = 0xFF;                  //set port E to output
     68a:	8f ef       	ldi	r24, 0xFF	; 255
     68c:	82 b9       	out	0x02, r24	; 2
 PORTE |= 0x20 ;               // inhibitor high
     68e:	1d 9a       	sbi	0x03, 5	; 3
 asm("nop");
     690:	00 00       	nop
 asm("nop");
     692:	00 00       	nop
 PORTE &= ~(0x40);             //SH_LD/ low
     694:	1e 98       	cbi	0x03, 6	; 3
 asm("nop");
     696:	00 00       	nop
 asm("nop");
     698:	00 00       	nop
 PORTE |= 0x40;               //SH/LD_n high
     69a:	1e 9a       	sbi	0x03, 6	; 3
 PORTE &= ~(0x20);            //inhibitor low
     69c:	1d 98       	cbi	0x03, 5	; 3
 uint8_t dat = data&0x03;     // mask data
     69e:	90 91 1e 02 	lds	r25, 0x021E
     6a2:	29 2f       	mov	r18, r25
     6a4:	23 70       	andi	r18, 0x03	; 3
 uint8_t dat1 = data&0x0C;    // mask data1


	switch(a_past)        // inc & dec according to direction of encoder for encoder 1
     6a6:	80 91 29 02 	lds	r24, 0x0229
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	01 f1       	breq	.+64     	; 0x6ee <set_freq+0x64>
     6ae:	20 f0       	brcs	.+8      	; 0x6b8 <set_freq+0x2e>
     6b0:	82 30       	cpi	r24, 0x02	; 2
     6b2:	11 f0       	breq	.+4      	; 0x6b8 <set_freq+0x2e>
     6b4:	83 30       	cpi	r24, 0x03	; 3
     6b6:	11 f4       	brne	.+4      	; 0x6bc <set_freq+0x32>
		}
        case 0x02:
		{
			if(dat==0x00){}
                  	else if(dat==0x03){}
			a_past = dat;
     6b8:	20 93 29 02 	sts	0x0229, r18
                  	break;
		}
	
    }
if((state & 0x03) == 2){
     6bc:	80 91 20 02 	lds	r24, 0x0220
     6c0:	83 70       	andi	r24, 0x03	; 3
     6c2:	82 30       	cpi	r24, 0x02	; 2
     6c4:	09 f0       	breq	.+2      	; 0x6c8 <set_freq+0x3e>
     6c6:	08 95       	ret
 asm("nop");
 asm("nop");
 PORTE |= 0x40;               //SH/LD_n high
 PORTE &= ~(0x20);            //inhibitor low
 uint8_t dat = data&0x03;     // mask data
 uint8_t dat1 = data&0x0C;    // mask data1
     6c8:	9c 70       	andi	r25, 0x0C	; 12
                  	break;
		}
	
    }
if((state & 0x03) == 2){
switch(b_past)                 //inc and dec count according to direction of encoder for second encoder
     6ca:	80 91 28 02 	lds	r24, 0x0228
     6ce:	84 30       	cpi	r24, 0x04	; 4
     6d0:	31 f1       	breq	.+76     	; 0x71e <set_freq+0x94>
     6d2:	10 f1       	brcs	.+68     	; 0x718 <set_freq+0x8e>
     6d4:	88 30       	cpi	r24, 0x08	; 8
     6d6:	11 f0       	breq	.+4      	; 0x6dc <set_freq+0x52>
     6d8:	8c 30       	cpi	r24, 0x0C	; 12
     6da:	11 f4       	brne	.+4      	; 0x6e0 <set_freq+0x56>
                }
        case 0x08:
                {
                        if(dat1==0x00){}
                        else if(dat1==0x0C){}
                        b_past = dat1;
     6dc:	90 93 28 02 	sts	0x0228, r25
     6e0:	20 91 14 01 	lds	r18, 0x0114
     6e4:	30 91 15 01 	lds	r19, 0x0115
                        break;
                }

    }
  segsum(sum);               //display increment setting of real time clock
     6e8:	c9 01       	movw	r24, r18
     6ea:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <segsum>
                  	break;
		}

        case 0x01:
		{
		  if(dat==0x03){current_fm_freq = current_fm_freq + 20;
     6ee:	23 30       	cpi	r18, 0x03	; 3
     6f0:	09 f1       	breq	.+66     	; 0x734 <set_freq+0xaa>
                                        _delay_ms(2);}           // inc count
                  else if(dat==0x00){current_fm_freq = current_fm_freq - 20;
     6f2:	21 11       	cpse	r18, r1
     6f4:	e1 cf       	rjmp	.-62     	; 0x6b8 <set_freq+0x2e>
     6f6:	40 91 16 01 	lds	r20, 0x0116
     6fa:	50 91 17 01 	lds	r21, 0x0117
     6fe:	44 51       	subi	r20, 0x14	; 20
     700:	51 09       	sbc	r21, r1
     702:	50 93 17 01 	sts	0x0117, r21
     706:	40 93 16 01 	sts	0x0116, r20
     70a:	ef e3       	ldi	r30, 0x3F	; 63
     70c:	ff e1       	ldi	r31, 0x1F	; 31
     70e:	31 97       	sbiw	r30, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <set_freq+0x84>
     712:	00 c0       	rjmp	.+0      	; 0x714 <set_freq+0x8a>
     714:	00 00       	nop
     716:	d0 cf       	rjmp	.-96     	; 0x6b8 <set_freq+0x2e>
                  	break;
		}
	
    }
if((state & 0x03) == 2){
switch(b_past)                 //inc and dec count according to direction of encoder for second encoder
     718:	88 23       	and	r24, r24
     71a:	01 f3       	breq	.-64     	; 0x6dc <set_freq+0x52>
     71c:	e1 cf       	rjmp	.-62     	; 0x6e0 <set_freq+0x56>
                        break;
                }

        case 0x04:
                {
                        if(dat1==0x0C){sum = sum + counter_value;}      // inc count
     71e:	9c 30       	cpi	r25, 0x0C	; 12
     720:	39 f1       	breq	.+78     	; 0x770 <set_freq+0xe6>
                        else if(dat1==0x00){sum = sum - counter_value;} // dec count
     722:	99 23       	and	r25, r25
     724:	c1 f0       	breq	.+48     	; 0x756 <set_freq+0xcc>
     726:	20 91 14 01 	lds	r18, 0x0114
     72a:	30 91 15 01 	lds	r19, 0x0115
                        b_past = dat1;
     72e:	90 93 28 02 	sts	0x0228, r25
                        break;
     732:	da cf       	rjmp	.-76     	; 0x6e8 <set_freq+0x5e>
                  	break;
		}

        case 0x01:
		{
		  if(dat==0x03){current_fm_freq = current_fm_freq + 20;
     734:	40 91 16 01 	lds	r20, 0x0116
     738:	50 91 17 01 	lds	r21, 0x0117
     73c:	4c 5e       	subi	r20, 0xEC	; 236
     73e:	5f 4f       	sbci	r21, 0xFF	; 255
     740:	50 93 17 01 	sts	0x0117, r21
     744:	40 93 16 01 	sts	0x0116, r20
     748:	ef e3       	ldi	r30, 0x3F	; 63
     74a:	ff e1       	ldi	r31, 0x1F	; 31
     74c:	31 97       	sbiw	r30, 0x01	; 1
     74e:	f1 f7       	brne	.-4      	; 0x74c <set_freq+0xc2>
     750:	00 c0       	rjmp	.+0      	; 0x752 <set_freq+0xc8>
     752:	00 00       	nop
     754:	b1 cf       	rjmp	.-158    	; 0x6b8 <set_freq+0x2e>
                }

        case 0x04:
                {
                        if(dat1==0x0C){sum = sum + counter_value;}      // inc count
                        else if(dat1==0x00){sum = sum - counter_value;} // dec count
     756:	80 91 1f 02 	lds	r24, 0x021F
     75a:	20 91 14 01 	lds	r18, 0x0114
     75e:	30 91 15 01 	lds	r19, 0x0115
     762:	28 1b       	sub	r18, r24
     764:	31 09       	sbc	r19, r1
     766:	30 93 15 01 	sts	0x0115, r19
     76a:	20 93 14 01 	sts	0x0114, r18
     76e:	df cf       	rjmp	.-66     	; 0x72e <set_freq+0xa4>
                        break;
                }

        case 0x04:
                {
                        if(dat1==0x0C){sum = sum + counter_value;}      // inc count
     770:	80 91 1f 02 	lds	r24, 0x021F
     774:	20 91 14 01 	lds	r18, 0x0114
     778:	30 91 15 01 	lds	r19, 0x0115
     77c:	28 0f       	add	r18, r24
     77e:	31 1d       	adc	r19, r1
     780:	30 93 15 01 	sts	0x0115, r19
     784:	20 93 14 01 	sts	0x0114, r18
     788:	d2 cf       	rjmp	.-92     	; 0x72e <set_freq+0xa4>

0000078a <segsum1>:

}



void segsum1(sum1) {
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	ec 01       	movw	r28, r24
uint8_t tens1;
uint8_t hundreds1;
uint8_t thousands1;  //determine how many digits there are 
ones1 = sum1%10;
tens1 = (sum1/10)%10;
hundreds1 = (sum1/100)%10;
     794:	64 e6       	ldi	r22, 0x64	; 100
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__divmodhi4>
     79c:	cb 01       	movw	r24, r22
     79e:	0a e0       	ldi	r16, 0x0A	; 10
     7a0:	10 e0       	ldi	r17, 0x00	; 0
     7a2:	b8 01       	movw	r22, r16
     7a4:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__divmodhi4>
     7a8:	fc 01       	movw	r30, r24
thousands1 = (sum1/1000)%10;
     7aa:	ce 01       	movw	r24, r28
     7ac:	68 ee       	ldi	r22, 0xE8	; 232
     7ae:	73 e0       	ldi	r23, 0x03	; 3
     7b0:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__divmodhi4>
     7b4:	cb 01       	movw	r24, r22
     7b6:	b8 01       	movw	r22, r16
     7b8:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__divmodhi4>
     7bc:	9c 01       	movw	r18, r24
void segsum1(sum1) {
uint8_t ones1;
uint8_t tens1;
uint8_t hundreds1;
uint8_t thousands1;  //determine how many digits there are 
ones1 = sum1%10;
     7be:	ce 01       	movw	r24, r28
     7c0:	b8 01       	movw	r22, r16
     7c2:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__divmodhi4>
tens1 = (sum1/10)%10;
hundreds1 = (sum1/100)%10;
thousands1 = (sum1/1000)%10;
segment_data1[0] = dec_to_7seg[ones1];
     7c6:	dc 01       	movw	r26, r24
     7c8:	bb 27       	eor	r27, r27
     7ca:	a0 50       	subi	r26, 0x00	; 0
     7cc:	bf 4f       	sbci	r27, 0xFF	; 255
     7ce:	8c 91       	ld	r24, X
     7d0:	80 93 6a 02 	sts	0x026A, r24
uint8_t ones1;
uint8_t tens1;
uint8_t hundreds1;
uint8_t thousands1;  //determine how many digits there are 
ones1 = sum1%10;
tens1 = (sum1/10)%10;
     7d4:	cb 01       	movw	r24, r22
     7d6:	b8 01       	movw	r22, r16
     7d8:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__divmodhi4>
hundreds1 = (sum1/100)%10;
thousands1 = (sum1/1000)%10;
segment_data1[0] = dec_to_7seg[ones1];
segment_data1[1] = dec_to_7seg[tens1];
     7dc:	dc 01       	movw	r26, r24
     7de:	bb 27       	eor	r27, r27
     7e0:	a0 50       	subi	r26, 0x00	; 0
     7e2:	bf 4f       	sbci	r27, 0xFF	; 255
     7e4:	8c 91       	ld	r24, X
     7e6:	80 93 6b 02 	sts	0x026B, r24
if((seconds % 2) == 0){segment_data[2] = dec_to_7seg[12];}
     7ea:	80 91 23 02 	lds	r24, 0x0223
     7ee:	80 fd       	sbrc	r24, 0
     7f0:	25 c0       	rjmp	.+74     	; 0x83c <segsum1+0xb2>
     7f2:	80 91 0c 01 	lds	r24, 0x010C
     7f6:	80 93 a6 02 	sts	0x02A6, r24
else segment_data[2] = dec_to_7seg[11];
segment_data1[3] = dec_to_7seg[hundreds1];
     7fa:	ff 27       	eor	r31, r31
     7fc:	e0 50       	subi	r30, 0x00	; 0
     7fe:	ff 4f       	sbci	r31, 0xFF	; 255
     800:	80 81       	ld	r24, Z
     802:	80 93 6d 02 	sts	0x026D, r24
segment_data1[4] = dec_to_7seg[thousands1];
     806:	33 27       	eor	r19, r19
     808:	f9 01       	movw	r30, r18
     80a:	e0 50       	subi	r30, 0x00	; 0
     80c:	ff 4f       	sbci	r31, 0xFF	; 255
     80e:	80 81       	ld	r24, Z
     810:	80 93 6e 02 	sts	0x026E, r24
if(sum<10){           //blancking leading 0s
     814:	80 91 14 01 	lds	r24, 0x0114
     818:	90 91 15 01 	lds	r25, 0x0115
     81c:	0a 97       	sbiw	r24, 0x0a	; 10
     81e:	e8 f0       	brcs	.+58     	; 0x85a <segsum1+0xd0>
  segment_data1[1] = 0xFF;
  segment_data1[3] = 0xFF;
  segment_data1[4] = 0xFF;}
else if(sum1<100){
     820:	c4 36       	cpi	r28, 0x64	; 100
     822:	d1 05       	cpc	r29, r1
     824:	84 f0       	brlt	.+32     	; 0x846 <segsum1+0xbc>
  segment_data1[3] = 0xFF;
  segment_data1[4] = 0xFF;}
else if(sum1<1000){
     826:	c8 3e       	cpi	r28, 0xE8	; 232
     828:	d3 40       	sbci	r29, 0x03	; 3
     82a:	1c f4       	brge	.+6      	; 0x832 <segsum1+0xa8>
  segment_data1[4] = 0xFF;}
     82c:	8f ef       	ldi	r24, 0xFF	; 255
     82e:	80 93 6e 02 	sts	0x026E, r24

}
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
     838:	0f 91       	pop	r16
     83a:	08 95       	ret
hundreds1 = (sum1/100)%10;
thousands1 = (sum1/1000)%10;
segment_data1[0] = dec_to_7seg[ones1];
segment_data1[1] = dec_to_7seg[tens1];
if((seconds % 2) == 0){segment_data[2] = dec_to_7seg[12];}
else segment_data[2] = dec_to_7seg[11];
     83c:	80 91 0b 01 	lds	r24, 0x010B
     840:	80 93 a6 02 	sts	0x02A6, r24
     844:	da cf       	rjmp	.-76     	; 0x7fa <segsum1+0x70>
if(sum<10){           //blancking leading 0s
  segment_data1[1] = 0xFF;
  segment_data1[3] = 0xFF;
  segment_data1[4] = 0xFF;}
else if(sum1<100){
  segment_data1[3] = 0xFF;
     846:	8f ef       	ldi	r24, 0xFF	; 255
     848:	80 93 6d 02 	sts	0x026D, r24
  segment_data1[4] = 0xFF;}
     84c:	80 93 6e 02 	sts	0x026E, r24
else if(sum1<1000){
  segment_data1[4] = 0xFF;}

}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	08 95       	ret
if((seconds % 2) == 0){segment_data[2] = dec_to_7seg[12];}
else segment_data[2] = dec_to_7seg[11];
segment_data1[3] = dec_to_7seg[hundreds1];
segment_data1[4] = dec_to_7seg[thousands1];
if(sum<10){           //blancking leading 0s
  segment_data1[1] = 0xFF;
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	80 93 6b 02 	sts	0x026B, r24
  segment_data1[3] = 0xFF;
     860:	80 93 6d 02 	sts	0x026D, r24
  segment_data1[4] = 0xFF;}
     864:	80 93 6e 02 	sts	0x026E, r24
  segment_data1[3] = 0xFF;
  segment_data1[4] = 0xFF;}
else if(sum1<1000){
  segment_data1[4] = 0xFF;}

}
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	08 95       	ret

00000872 <segsum2>:

void segsum2(uint16_t sum) {
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	ec 01       	movw	r28, r24
uint8_t ones;  
uint8_t tens;  
uint8_t hundreds;  
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
     878:	9c 01       	movw	r18, r24
     87a:	ad ec       	ldi	r26, 0xCD	; 205
     87c:	bc ec       	ldi	r27, 0xCC	; 204
     87e:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__umulhisi3>
     882:	ac 01       	movw	r20, r24
     884:	56 95       	lsr	r21
     886:	47 95       	ror	r20
     888:	56 95       	lsr	r21
     88a:	47 95       	ror	r20
     88c:	56 95       	lsr	r21
     88e:	47 95       	ror	r20
     890:	9a 01       	movw	r18, r20
     892:	22 0f       	add	r18, r18
     894:	33 1f       	adc	r19, r19
     896:	ca 01       	movw	r24, r20
     898:	88 0f       	add	r24, r24
     89a:	99 1f       	adc	r25, r25
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	88 0f       	add	r24, r24
     8a2:	99 1f       	adc	r25, r25
     8a4:	82 0f       	add	r24, r18
     8a6:	93 1f       	adc	r25, r19
     8a8:	fe 01       	movw	r30, r28
     8aa:	e8 1b       	sub	r30, r24
     8ac:	f9 0b       	sbc	r31, r25
tens = (sum/10)%10;
hundreds = (sum/100)%10;
thousands = (sum/1000)%10;
segment_data[0] = dec_to_7seg[ones];
     8ae:	e0 50       	subi	r30, 0x00	; 0
     8b0:	ff 4f       	sbci	r31, 0xFF	; 255
     8b2:	80 81       	ld	r24, Z
     8b4:	80 93 a4 02 	sts	0x02A4, r24
uint8_t ones;  
uint8_t tens;  
uint8_t hundreds;  
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
tens = (sum/10)%10;
     8b8:	9a 01       	movw	r18, r20
     8ba:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__umulhisi3>
     8be:	96 95       	lsr	r25
     8c0:	87 95       	ror	r24
     8c2:	96 95       	lsr	r25
     8c4:	87 95       	ror	r24
     8c6:	96 95       	lsr	r25
     8c8:	87 95       	ror	r24
     8ca:	9c 01       	movw	r18, r24
     8cc:	22 0f       	add	r18, r18
     8ce:	33 1f       	adc	r19, r19
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	88 0f       	add	r24, r24
     8d6:	99 1f       	adc	r25, r25
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	82 0f       	add	r24, r18
     8de:	93 1f       	adc	r25, r19
     8e0:	48 1b       	sub	r20, r24
     8e2:	59 0b       	sbc	r21, r25
hundreds = (sum/100)%10;
thousands = (sum/1000)%10;
segment_data[0] = dec_to_7seg[ones];
segment_data[1] = dec_to_7seg[tens];
     8e4:	fa 01       	movw	r30, r20
     8e6:	e0 50       	subi	r30, 0x00	; 0
     8e8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ea:	80 81       	ld	r24, Z
     8ec:	80 93 a5 02 	sts	0x02A5, r24
segment_data[2] = dec_to_7seg[10];
     8f0:	80 91 0a 01 	lds	r24, 0x010A
     8f4:	80 93 a6 02 	sts	0x02A6, r24
uint8_t tens;  
uint8_t hundreds;  
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
tens = (sum/10)%10;
hundreds = (sum/100)%10;
     8f8:	9e 01       	movw	r18, r28
     8fa:	36 95       	lsr	r19
     8fc:	27 95       	ror	r18
     8fe:	36 95       	lsr	r19
     900:	27 95       	ror	r18
     902:	ab e7       	ldi	r26, 0x7B	; 123
     904:	b4 e1       	ldi	r27, 0x14	; 20
     906:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__umulhisi3>
     90a:	ac 01       	movw	r20, r24
     90c:	56 95       	lsr	r21
     90e:	47 95       	ror	r20
     910:	9a 01       	movw	r18, r20
     912:	ad ec       	ldi	r26, 0xCD	; 205
     914:	bc ec       	ldi	r27, 0xCC	; 204
     916:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__umulhisi3>
     91a:	96 95       	lsr	r25
     91c:	87 95       	ror	r24
     91e:	96 95       	lsr	r25
     920:	87 95       	ror	r24
     922:	96 95       	lsr	r25
     924:	87 95       	ror	r24
     926:	9c 01       	movw	r18, r24
     928:	22 0f       	add	r18, r18
     92a:	33 1f       	adc	r19, r19
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	88 0f       	add	r24, r24
     932:	99 1f       	adc	r25, r25
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	82 0f       	add	r24, r18
     93a:	93 1f       	adc	r25, r19
     93c:	48 1b       	sub	r20, r24
     93e:	59 0b       	sbc	r21, r25
thousands = (sum/1000)%10;
segment_data[0] = dec_to_7seg[ones];
segment_data[1] = dec_to_7seg[tens];
segment_data[2] = dec_to_7seg[10];
segment_data[3] = dec_to_7seg[hundreds];
     940:	fa 01       	movw	r30, r20
     942:	e0 50       	subi	r30, 0x00	; 0
     944:	ff 4f       	sbci	r31, 0xFF	; 255
     946:	80 81       	ld	r24, Z
     948:	80 93 a7 02 	sts	0x02A7, r24
uint8_t hundreds;  
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
tens = (sum/10)%10;
hundreds = (sum/100)%10;
thousands = (sum/1000)%10;
     94c:	9e 01       	movw	r18, r28
     94e:	36 95       	lsr	r19
     950:	27 95       	ror	r18
     952:	36 95       	lsr	r19
     954:	27 95       	ror	r18
     956:	36 95       	lsr	r19
     958:	27 95       	ror	r18
     95a:	a5 ec       	ldi	r26, 0xC5	; 197
     95c:	b0 e2       	ldi	r27, 0x20	; 32
     95e:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__umulhisi3>
     962:	ac 01       	movw	r20, r24
     964:	52 95       	swap	r21
     966:	42 95       	swap	r20
     968:	4f 70       	andi	r20, 0x0F	; 15
     96a:	45 27       	eor	r20, r21
     96c:	5f 70       	andi	r21, 0x0F	; 15
     96e:	45 27       	eor	r20, r21
     970:	9a 01       	movw	r18, r20
     972:	ad ec       	ldi	r26, 0xCD	; 205
     974:	bc ec       	ldi	r27, 0xCC	; 204
     976:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__umulhisi3>
     97a:	96 95       	lsr	r25
     97c:	87 95       	ror	r24
     97e:	96 95       	lsr	r25
     980:	87 95       	ror	r24
     982:	96 95       	lsr	r25
     984:	87 95       	ror	r24
     986:	9c 01       	movw	r18, r24
     988:	22 0f       	add	r18, r18
     98a:	33 1f       	adc	r19, r19
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	88 0f       	add	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	82 0f       	add	r24, r18
     99a:	93 1f       	adc	r25, r19
     99c:	48 1b       	sub	r20, r24
     99e:	59 0b       	sbc	r21, r25
segment_data[0] = dec_to_7seg[ones];
segment_data[1] = dec_to_7seg[tens];
segment_data[2] = dec_to_7seg[10];
segment_data[3] = dec_to_7seg[hundreds];
segment_data[4] = dec_to_7seg[thousands];
     9a0:	fa 01       	movw	r30, r20
     9a2:	e0 50       	subi	r30, 0x00	; 0
     9a4:	ff 4f       	sbci	r31, 0xFF	; 255
     9a6:	80 81       	ld	r24, Z
     9a8:	80 93 a8 02 	sts	0x02A8, r24
if(sum<10){           //blancking leading 0s
     9ac:	ca 30       	cpi	r28, 0x0A	; 10
     9ae:	d1 05       	cpc	r29, r1
     9b0:	a0 f0       	brcs	.+40     	; 0x9da <segsum2+0x168>
  segment_data[1] = 0xFF;
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<100){
     9b2:	c4 36       	cpi	r28, 0x64	; 100
     9b4:	d1 05       	cpc	r29, r1
     9b6:	48 f0       	brcs	.+18     	; 0x9ca <segsum2+0x158>
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<1000){
     9b8:	c8 3e       	cpi	r28, 0xE8	; 232
     9ba:	d3 40       	sbci	r29, 0x03	; 3
     9bc:	18 f4       	brcc	.+6      	; 0x9c4 <segsum2+0x152>
  segment_data[4] = 0xFF;}
     9be:	8f ef       	ldi	r24, 0xFF	; 255
     9c0:	80 93 a8 02 	sts	0x02A8, r24

}
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	08 95       	ret
if(sum<10){           //blancking leading 0s
  segment_data[1] = 0xFF;
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<100){
  segment_data[3] = 0xFF;
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	80 93 a7 02 	sts	0x02A7, r24
  segment_data[4] = 0xFF;}
     9d0:	80 93 a8 02 	sts	0x02A8, r24
else if(sum<1000){
  segment_data[4] = 0xFF;}

}
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret
segment_data[1] = dec_to_7seg[tens];
segment_data[2] = dec_to_7seg[10];
segment_data[3] = dec_to_7seg[hundreds];
segment_data[4] = dec_to_7seg[thousands];
if(sum<10){           //blancking leading 0s
  segment_data[1] = 0xFF;
     9da:	8f ef       	ldi	r24, 0xFF	; 255
     9dc:	80 93 a5 02 	sts	0x02A5, r24
  segment_data[3] = 0xFF;
     9e0:	80 93 a7 02 	sts	0x02A7, r24
  segment_data[4] = 0xFF;}
     9e4:	80 93 a8 02 	sts	0x02A8, r24
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<1000){
  segment_data[4] = 0xFF;}

}
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	08 95       	ret

000009ee <tcnt0_init>:

void tcnt0_init(void)   //initializing timer/counter0 for real time clock
 {
   ASSR |= (1<<AS0);
     9ee:	80 b7       	in	r24, 0x30	; 48
     9f0:	88 60       	ori	r24, 0x08	; 8
     9f2:	80 bf       	out	0x30, r24	; 48

  //Enable coutner in normal mode with no prescaler
  TCCR0 = (0<<CS02) | (0<<CS01) | (1<<CS00);
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	83 bf       	out	0x33, r24	; 51

  //Wait for all ascynch warning bits to clear
  while(bit_is_set(ASSR, TCN0UB));
     9f8:	00 b6       	in	r0, 0x30	; 48
     9fa:	02 fc       	sbrc	r0, 2
     9fc:	fd cf       	rjmp	.-6      	; 0x9f8 <tcnt0_init+0xa>
  while(bit_is_set(ASSR, OCR0UB));
     9fe:	00 b6       	in	r0, 0x30	; 48
     a00:	01 fc       	sbrc	r0, 1
     a02:	fd cf       	rjmp	.-6      	; 0x9fe <tcnt0_init+0x10>
  while(bit_is_set(ASSR, TCR0UB));
     a04:	00 b6       	in	r0, 0x30	; 48
     a06:	00 fc       	sbrc	r0, 0
     a08:	fd cf       	rjmp	.-6      	; 0xa04 <tcnt0_init+0x16>

  //Enable overflow interrupts for T/C 0
  TIMSK |= (1<<TOIE0);
     a0a:	87 b7       	in	r24, 0x37	; 55
     a0c:	81 60       	ori	r24, 0x01	; 1
     a0e:	87 bf       	out	0x37, r24	; 55
     a10:	08 95       	ret

00000a12 <__vector_18>:
 }


ISR(USART0_RX_vect)
 {
     a12:	1f 92       	push	r1
     a14:	0f 92       	push	r0
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	0f 92       	push	r0
     a1a:	11 24       	eor	r1, r1
     a1c:	0b b6       	in	r0, 0x3b	; 59
     a1e:	0f 92       	push	r0
     a20:	2f 93       	push	r18
     a22:	3f 93       	push	r19
     a24:	4f 93       	push	r20
     a26:	5f 93       	push	r21
     a28:	6f 93       	push	r22
     a2a:	7f 93       	push	r23
     a2c:	8f 93       	push	r24
     a2e:	9f 93       	push	r25
     a30:	af 93       	push	r26
     a32:	bf 93       	push	r27
     a34:	ef 93       	push	r30
     a36:	ff 93       	push	r31
  rx_char = UDR0;              //get remote temperature
     a38:	8c b1       	in	r24, 0x0c	; 12
     a3a:	80 93 a3 02 	sts	0x02A3, r24

   if(state == 5)
     a3e:	90 91 20 02 	lds	r25, 0x0220
     a42:	95 30       	cpi	r25, 0x05	; 5
     a44:	99 f0       	breq	.+38     	; 0xa6c <__vector_18+0x5a>
      {
        char2lcd(rx_char);
      }
 } 
     a46:	ff 91       	pop	r31
     a48:	ef 91       	pop	r30
     a4a:	bf 91       	pop	r27
     a4c:	af 91       	pop	r26
     a4e:	9f 91       	pop	r25
     a50:	8f 91       	pop	r24
     a52:	7f 91       	pop	r23
     a54:	6f 91       	pop	r22
     a56:	5f 91       	pop	r21
     a58:	4f 91       	pop	r20
     a5a:	3f 91       	pop	r19
     a5c:	2f 91       	pop	r18
     a5e:	0f 90       	pop	r0
     a60:	0b be       	out	0x3b, r0	; 59
     a62:	0f 90       	pop	r0
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	0f 90       	pop	r0
     a68:	1f 90       	pop	r1
     a6a:	18 95       	reti
 {
  rx_char = UDR0;              //get remote temperature

   if(state == 5)
      {
        char2lcd(rx_char);
     a6c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <char2lcd>
     a70:	ea cf       	rjmp	.-44     	; 0xa46 <__vector_18+0x34>

00000a72 <__vector_16>:
      }
 } 


ISR(TIMER0_OVF_vect)           //ISR for real time clock and snooze
 {
     a72:	1f 92       	push	r1
     a74:	0f 92       	push	r0
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	0f 92       	push	r0
     a7a:	11 24       	eor	r1, r1
     a7c:	8f 93       	push	r24
     a7e:	9f 93       	push	r25
   static uint8_t count = 0;         
   count ++;
     a80:	80 91 27 02 	lds	r24, 0x0227
     a84:	8f 5f       	subi	r24, 0xFF	; 255
     a86:	80 93 27 02 	sts	0x0227, r24

     if((count % 128) == 0)    //complete 1 sec
     a8a:	8f 77       	andi	r24, 0x7F	; 127
     a8c:	59 f4       	brne	.+22     	; 0xaa4 <__vector_16+0x32>
       {
         seconds = seconds + 1;//increment second
     a8e:	80 91 23 02 	lds	r24, 0x0223
     a92:	8f 5f       	subi	r24, 0xFF	; 255
     a94:	80 93 23 02 	sts	0x0223, r24

            if(seconds == 60)
     a98:	8c 33       	cpi	r24, 0x3C	; 60
     a9a:	b9 f0       	breq	.+46     	; 0xaca <__vector_16+0x58>
                sum = sum + 1; //increment sum after every min
                seconds = 0;
              }
       }

       if(state == 3)         //snooze mode
     a9c:	80 91 20 02 	lds	r24, 0x0220
     aa0:	83 30       	cpi	r24, 0x03	; 3
     aa2:	39 f0       	breq	.+14     	; 0xab2 <__vector_16+0x40>
           if((count % 128) == 0)
             { 
                seconds1 = seconds1 + 1;  //increment seconds1 every second 
             }
         }
 }
     aa4:	9f 91       	pop	r25
     aa6:	8f 91       	pop	r24
     aa8:	0f 90       	pop	r0
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	0f 90       	pop	r0
     aae:	1f 90       	pop	r1
     ab0:	18 95       	reti

       if(state == 3)         //snooze mode
         {
           if((count % 128) == 0)
             { 
                seconds1 = seconds1 + 1;  //increment seconds1 every second 
     ab2:	80 91 22 02 	lds	r24, 0x0222
     ab6:	8f 5f       	subi	r24, 0xFF	; 255
     ab8:	80 93 22 02 	sts	0x0222, r24
             }
         }
 }
     abc:	9f 91       	pop	r25
     abe:	8f 91       	pop	r24
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti
       {
         seconds = seconds + 1;//increment second

            if(seconds == 60)
              {           
                sum = sum + 1; //increment sum after every min
     aca:	80 91 14 01 	lds	r24, 0x0114
     ace:	90 91 15 01 	lds	r25, 0x0115
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	90 93 15 01 	sts	0x0115, r25
     ad8:	80 93 14 01 	sts	0x0114, r24
                seconds = 0;
     adc:	10 92 23 02 	sts	0x0223, r1
              }
       }

       if(state == 3)         //snooze mode
     ae0:	80 91 20 02 	lds	r24, 0x0220
     ae4:	83 30       	cpi	r24, 0x03	; 3
     ae6:	f1 f6       	brne	.-68     	; 0xaa4 <__vector_16+0x32>
     ae8:	e4 cf       	rjmp	.-56     	; 0xab2 <__vector_16+0x40>

00000aea <bargraph>:
         }
 }


void bargraph(){
  PORTB |= 0x01; //rising edge to rgclk
     aea:	c0 9a       	sbi	0x18, 0	; 24
  PORTB &= ~0x01;//falling edge to rgclk
     aec:	c0 98       	cbi	0x18, 0	; 24
     aee:	08 95       	ret

00000af0 <tcnt2_init>:
/**********************************************************************************
 initializing timer/counter2 in different configuration for controlling brightness
**********************************************************************************/

tcnt2_init(){                                //initializing timer/counter2 in different  
TCCR2 |= (1<<WGM20) | (1<<COM21) | (1<<CS20);//configurtion for controling
     af0:	85 b5       	in	r24, 0x25	; 37
     af2:	81 66       	ori	r24, 0x61	; 97
     af4:	85 bd       	out	0x25, r24	; 37
OCR2 = 0x00;                                 //brightness 
     af6:	13 bc       	out	0x23, r1	; 35
}
     af8:	08 95       	ret

00000afa <tcnt21_init>:

tcnt21_init(){
TCCR2 |= (1<<WGM20) | (1<<COM21) | (1<<CS20);
     afa:	85 b5       	in	r24, 0x25	; 37
     afc:	81 66       	ori	r24, 0x61	; 97
     afe:	85 bd       	out	0x25, r24	; 37
OCR2 = 0x2B;
     b00:	8b e2       	ldi	r24, 0x2B	; 43
     b02:	83 bd       	out	0x23, r24	; 35
}
     b04:	08 95       	ret

00000b06 <tcnt22_init>:

tcnt22_init(){
TCCR2 |= (1<<WGM20) | (1<<COM21) | (1<<CS20);
     b06:	85 b5       	in	r24, 0x25	; 37
     b08:	81 66       	ori	r24, 0x61	; 97
     b0a:	85 bd       	out	0x25, r24	; 37
OCR2 = 0x56;
     b0c:	86 e5       	ldi	r24, 0x56	; 86
     b0e:	83 bd       	out	0x23, r24	; 35
}
     b10:	08 95       	ret

00000b12 <tcnt23_init>:

tcnt23_init(){
TCCR2 |= (1<<WGM20) | (1<<COM21) | (1<<CS20);
     b12:	85 b5       	in	r24, 0x25	; 37
     b14:	81 66       	ori	r24, 0x61	; 97
     b16:	85 bd       	out	0x25, r24	; 37
OCR2 = 0x81;
     b18:	81 e8       	ldi	r24, 0x81	; 129
     b1a:	83 bd       	out	0x23, r24	; 35
}
     b1c:	08 95       	ret

00000b1e <tcnt24_init>:
tcnt24_init(){
TCCR2 |= (1<<WGM20) | (1<<COM21) | (1<<CS20);
     b1e:	85 b5       	in	r24, 0x25	; 37
     b20:	81 66       	ori	r24, 0x61	; 97
     b22:	85 bd       	out	0x25, r24	; 37
OCR2 = 0xAC;
     b24:	8c ea       	ldi	r24, 0xAC	; 172
     b26:	83 bd       	out	0x23, r24	; 35
}
     b28:	08 95       	ret

00000b2a <tcnt25_init>:

tcnt25_init(){
TCCR2 |= (1<<WGM20) | (1<<COM21) | (1<<CS20);
     b2a:	85 b5       	in	r24, 0x25	; 37
     b2c:	81 66       	ori	r24, 0x61	; 97
     b2e:	85 bd       	out	0x25, r24	; 37
OCR2 = 0xD7;
     b30:	87 ed       	ldi	r24, 0xD7	; 215
     b32:	83 bd       	out	0x23, r24	; 35
}
     b34:	08 95       	ret

00000b36 <tcnt26_init>:

tcnt26_init(){
TCCR2 |= (1<<WGM20) | (1<<COM21) | (1<<CS20);
     b36:	85 b5       	in	r24, 0x25	; 37
     b38:	81 66       	ori	r24, 0x61	; 97
     b3a:	85 bd       	out	0x25, r24	; 37
OCR2 = 0xE0;
     b3c:	80 ee       	ldi	r24, 0xE0	; 224
     b3e:	83 bd       	out	0x23, r24	; 35
}
     b40:	08 95       	ret

00000b42 <tcnt1_init>:
 // initializing timer/counter1 in pwm mode for annoying beep
/*************************************************************************************/

void tcnt1_init()              //initializing timer/counter1 in pwm mode
 {
   TCCR1A = 0x00;                  //for annoying beep
     b42:	1f bc       	out	0x2f, r1	; 47
   TCCR1B = (1<<WGM12) | (1<<CS11);
     b44:	8a e0       	ldi	r24, 0x0A	; 10
     b46:	8e bd       	out	0x2e, r24	; 46
   TCCR1C = 0x00;
     b48:	10 92 7a 00 	sts	0x007A, r1
   OCR1A = 0x0200;
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	92 e0       	ldi	r25, 0x02	; 2
     b50:	9b bd       	out	0x2b, r25	; 43
     b52:	8a bd       	out	0x2a, r24	; 42
   TIMSK |= (1<<OCIE1A);
     b54:	87 b7       	in	r24, 0x37	; 55
     b56:	80 61       	ori	r24, 0x10	; 16
     b58:	87 bf       	out	0x37, r24	; 55
     b5a:	08 95       	ret

00000b5c <__vector_12>:
 }
 

ISR(TIMER1_COMPA_vect)
 {
     b5c:	1f 92       	push	r1
     b5e:	0f 92       	push	r0
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	0f 92       	push	r0
     b64:	11 24       	eor	r1, r1
     b66:	2f 93       	push	r18
     b68:	3f 93       	push	r19
     b6a:	8f 93       	push	r24
     b6c:	9f 93       	push	r25
   if((sum == total) && (state & 0x03) ==0){    
     b6e:	20 91 12 01 	lds	r18, 0x0112
     b72:	30 91 13 01 	lds	r19, 0x0113
     b76:	80 91 14 01 	lds	r24, 0x0114
     b7a:	90 91 15 01 	lds	r25, 0x0115
     b7e:	28 17       	cp	r18, r24
     b80:	39 07       	cpc	r19, r25
     b82:	81 f0       	breq	.+32     	; 0xba4 <__vector_12+0x48>
   PORTD ^= 0x80;}                              // RING alarm
   if((sum == total) && (state & 0x03) == 3){}  //if its snooze mode then dont play alarm
                                                  
     if(seconds1 >= 10)                         //after 10secs snooze play alarm
     b84:	80 91 22 02 	lds	r24, 0x0222
     b88:	8a 30       	cpi	r24, 0x0A	; 10
     b8a:	18 f0       	brcs	.+6      	; 0xb92 <__vector_12+0x36>
       {
         PORTD ^= 0x80;
     b8c:	82 b3       	in	r24, 0x12	; 18
     b8e:	80 58       	subi	r24, 0x80	; 128
     b90:	82 bb       	out	0x12, r24	; 18
       }
if(sum != total){}                        

  }//ISR
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	3f 91       	pop	r19
     b98:	2f 91       	pop	r18
     b9a:	0f 90       	pop	r0
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	0f 90       	pop	r0
     ba0:	1f 90       	pop	r1
     ba2:	18 95       	reti
 }
 

ISR(TIMER1_COMPA_vect)
 {
   if((sum == total) && (state & 0x03) ==0){    
     ba4:	80 91 20 02 	lds	r24, 0x0220
     ba8:	83 70       	andi	r24, 0x03	; 3
     baa:	61 f7       	brne	.-40     	; 0xb84 <__vector_12+0x28>
   PORTD ^= 0x80;}                              // RING alarm
     bac:	82 b3       	in	r24, 0x12	; 18
     bae:	80 58       	subi	r24, 0x80	; 128
     bb0:	82 bb       	out	0x12, r24	; 18
     bb2:	e8 cf       	rjmp	.-48     	; 0xb84 <__vector_12+0x28>

00000bb4 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	0f 92       	push	r0
     bbc:	11 24       	eor	r1, r1
     bbe:	0b b6       	in	r0, 0x3b	; 59
     bc0:	0f 92       	push	r0
     bc2:	2f 93       	push	r18
     bc4:	3f 93       	push	r19
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	af 93       	push	r26
     bcc:	bf 93       	push	r27
     bce:	ef 93       	push	r30
     bd0:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
     bd2:	e0 91 71 00 	lds	r30, 0x0071
     bd6:	8e 2f       	mov	r24, r30
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	fc 01       	movw	r30, r24
     bdc:	38 97       	sbiw	r30, 0x08	; 8
     bde:	e1 35       	cpi	r30, 0x51	; 81
     be0:	f1 05       	cpc	r31, r1
     be2:	b0 f0       	brcs	.+44     	; 0xc10 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
     be4:	80 91 71 00 	lds	r24, 0x0071
     be8:	80 93 a9 02 	sts	0x02A9, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
     bec:	84 e0       	ldi	r24, 0x04	; 4
     bee:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
     bf2:	ff 91       	pop	r31
     bf4:	ef 91       	pop	r30
     bf6:	bf 91       	pop	r27
     bf8:	af 91       	pop	r26
     bfa:	9f 91       	pop	r25
     bfc:	8f 91       	pop	r24
     bfe:	3f 91       	pop	r19
     c00:	2f 91       	pop	r18
     c02:	0f 90       	pop	r0
     c04:	0b be       	out	0x3b, r0	; 59
     c06:	0f 90       	pop	r0
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	0f 90       	pop	r0
     c0c:	1f 90       	pop	r1
     c0e:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
     c10:	ea 5b       	subi	r30, 0xBA	; 186
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
     c18:	80 91 3c 02 	lds	r24, 0x023C
     c1c:	e0 91 aa 02 	lds	r30, 0x02AA
     c20:	f0 91 ab 02 	lds	r31, 0x02AB
     c24:	e8 0f       	add	r30, r24
     c26:	f1 1d       	adc	r31, r1
     c28:	80 91 73 00 	lds	r24, 0x0073
     c2c:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
     c2e:	84 e9       	ldi	r24, 0x94	; 148
     c30:	80 93 74 00 	sts	0x0074, r24
      break;      
     c34:	de cf       	rjmp	.-68     	; 0xbf2 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
     c36:	80 91 ac 02 	lds	r24, 0x02AC
     c3a:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
     c3e:	10 92 3c 02 	sts	0x023C, r1
      TWCR = TWCR_SEND;     //send SLA+RW
     c42:	85 e8       	ldi	r24, 0x85	; 133
     c44:	80 93 74 00 	sts	0x0074, r24
      break;
     c48:	d4 cf       	rjmp	.-88     	; 0xbf2 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
     c4a:	80 91 3c 02 	lds	r24, 0x023C
     c4e:	90 91 ad 02 	lds	r25, 0x02AD
     c52:	89 17       	cp	r24, r25
     c54:	60 f7       	brcc	.-40     	; 0xc2e <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
     c56:	e0 91 aa 02 	lds	r30, 0x02AA
     c5a:	f0 91 ab 02 	lds	r31, 0x02AB
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	98 0f       	add	r25, r24
     c62:	90 93 3c 02 	sts	0x023C, r25
     c66:	e8 0f       	add	r30, r24
     c68:	f1 1d       	adc	r31, r1
     c6a:	80 81       	ld	r24, Z
     c6c:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
     c70:	85 e8       	ldi	r24, 0x85	; 133
     c72:	80 93 74 00 	sts	0x0074, r24
     c76:	bd cf       	rjmp	.-134    	; 0xbf2 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
     c78:	85 ea       	ldi	r24, 0xA5	; 165
     c7a:	80 93 74 00 	sts	0x0074, r24
      break;
     c7e:	b9 cf       	rjmp	.-142    	; 0xbf2 <__vector_33+0x3e>
     c80:	20 91 3c 02 	lds	r18, 0x023C
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
     c84:	80 91 ad 02 	lds	r24, 0x02AD
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	28 17       	cp	r18, r24
     c90:	39 07       	cpc	r19, r25
     c92:	dc f4       	brge	.+54     	; 0xcca <__vector_33+0x116>
     c94:	85 ec       	ldi	r24, 0xC5	; 197
     c96:	80 93 74 00 	sts	0x0074, r24
     c9a:	ab cf       	rjmp	.-170    	; 0xbf2 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
     c9c:	e0 91 aa 02 	lds	r30, 0x02AA
     ca0:	f0 91 ab 02 	lds	r31, 0x02AB
     ca4:	80 91 3c 02 	lds	r24, 0x023C
     ca8:	21 e0       	ldi	r18, 0x01	; 1
     caa:	28 0f       	add	r18, r24
     cac:	20 93 3c 02 	sts	0x023C, r18
     cb0:	e8 0f       	add	r30, r24
     cb2:	f1 1d       	adc	r31, r1
     cb4:	80 91 73 00 	lds	r24, 0x0073
     cb8:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
     cba:	80 91 ad 02 	lds	r24, 0x02AD
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	28 17       	cp	r18, r24
     cc6:	39 07       	cpc	r19, r25
     cc8:	2c f3       	brlt	.-54     	; 0xc94 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
     cca:	85 e8       	ldi	r24, 0x85	; 133
     ccc:	80 93 74 00 	sts	0x0074, r24
     cd0:	90 cf       	rjmp	.-224    	; 0xbf2 <__vector_33+0x3e>

00000cd2 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     cd2:	80 91 74 00 	lds	r24, 0x0074
}
     cd6:	81 70       	andi	r24, 0x01	; 1
     cd8:	08 95       	ret

00000cda <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     cda:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
     cde:	90 fd       	sbrc	r25, 0
     ce0:	fc cf       	rjmp	.-8      	; 0xcda <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
     ce2:	8e 7f       	andi	r24, 0xFE	; 254
     ce4:	80 93 ac 02 	sts	0x02AC, r24
  twi_buf = twi_data;                   //load pointer to write buffer
     ce8:	70 93 ab 02 	sts	0x02AB, r23
     cec:	60 93 aa 02 	sts	0x02AA, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
     cf0:	40 93 ad 02 	sts	0x02AD, r20
  TWCR = TWCR_START;                    //initiate START
     cf4:	85 ea       	ldi	r24, 0xA5	; 165
     cf6:	80 93 74 00 	sts	0x0074, r24
     cfa:	08 95       	ret

00000cfc <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     cfc:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
     d00:	90 fd       	sbrc	r25, 0
     d02:	fc cf       	rjmp	.-8      	; 0xcfc <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
     d04:	81 60       	ori	r24, 0x01	; 1
     d06:	80 93 ac 02 	sts	0x02AC, r24
  twi_buf = twi_data;                  //load pointer to write buffer
     d0a:	70 93 ab 02 	sts	0x02AB, r23
     d0e:	60 93 aa 02 	sts	0x02AA, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
     d12:	40 93 ad 02 	sts	0x02AD, r20
  TWCR = TWCR_START;                   //initiate START
     d16:	85 ea       	ldi	r24, 0xA5	; 165
     d18:	80 93 74 00 	sts	0x0074, r24
     d1c:	08 95       	ret

00000d1e <init_twi>:
//10K pullups are present on the board
//For the alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
     d1e:	8f ef       	ldi	r24, 0xFF	; 255
     d20:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
     d24:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
     d28:	8c e0       	ldi	r24, 0x0C	; 12
     d2a:	80 93 70 00 	sts	0x0070, r24
     d2e:	08 95       	ret

00000d30 <get_int_status>:
//
//TODO: update for interrupts
// 
uint8_t get_int_status(){

    si4734_wr_buf[0] = GET_INT_STATUS;              
     d30:	84 e1       	ldi	r24, 0x14	; 20
     d32:	80 93 ae 02 	sts	0x02AE, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
     d36:	41 e0       	ldi	r20, 0x01	; 1
     d38:	6e ea       	ldi	r22, 0xAE	; 174
     d3a:	72 e0       	ldi	r23, 0x02	; 2
     d3c:	82 e2       	ldi	r24, 0x22	; 34
     d3e:	0e 94 6d 06 	call	0xcda	; 0xcda <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
     d42:	0e 94 69 06 	call	0xcd2	; 0xcd2 <twi_busy>
     d46:	81 11       	cpse	r24, r1
     d48:	fc cf       	rjmp	.-8      	; 0xd42 <get_int_status+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d4a:	8f ea       	ldi	r24, 0xAF	; 175
     d4c:	94 e0       	ldi	r25, 0x04	; 4
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <get_int_status+0x1e>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <get_int_status+0x24>
     d54:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status 
     d56:	41 e0       	ldi	r20, 0x01	; 1
     d58:	60 ed       	ldi	r22, 0xD0	; 208
     d5a:	72 e0       	ldi	r23, 0x02	; 2
     d5c:	82 e2       	ldi	r24, 0x22	; 34
     d5e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
     d62:	0e 94 69 06 	call	0xcd2	; 0xcd2 <twi_busy>
     d66:	81 11       	cpse	r24, r1
     d68:	fc cf       	rjmp	.-8      	; 0xd62 <get_int_status+0x32>
    return(si4734_rd_buf[0]);
}
     d6a:	80 91 d0 02 	lds	r24, 0x02D0
     d6e:	08 95       	ret

00000d70 <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  si4734_wr_buf[0] = 0x20;  //fm tune command
     d70:	ee ea       	ldi	r30, 0xAE	; 174
     d72:	f2 e0       	ldi	r31, 0x02	; 2
     d74:	80 e2       	ldi	r24, 0x20	; 32
     d76:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
     d78:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
     d7a:	80 91 16 01 	lds	r24, 0x0116
     d7e:	90 91 17 01 	lds	r25, 0x0117
     d82:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
     d84:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
     d86:	14 82       	std	Z+4, r1	; 0x04
  //send fm tune command
  STC_interrupt = FALSE;
     d88:	10 92 cf 02 	sts	0x02CF, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
     d8c:	45 e0       	ldi	r20, 0x05	; 5
     d8e:	bf 01       	movw	r22, r30
     d90:	82 e2       	ldi	r24, 0x22	; 34
     d92:	0c 94 6d 06 	jmp	0xcda	; 0xcda <twi_start_wr>

00000d96 <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq(){
  si4734_wr_buf[0] = AM_TUNE_FREQ; //am tune command
     d96:	80 e4       	ldi	r24, 0x40	; 64
     d98:	80 93 ae 02 	sts	0x02AE, r24
  si4734_wr_buf[1] = 0x00;         //no FAST tune
     d9c:	10 92 af 02 	sts	0x02AF, r1
  si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
     da0:	80 91 75 02 	lds	r24, 0x0275
     da4:	90 91 76 02 	lds	r25, 0x0276
     da8:	90 93 b0 02 	sts	0x02B0, r25
  si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
     dac:	80 93 b1 02 	sts	0x02B1, r24
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
     db0:	10 92 b2 02 	sts	0x02B2, r1
  si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
     db4:	10 92 b3 02 	sts	0x02B3, r1
  //send am tune command
  STC_interrupt = FALSE;
     db8:	10 92 cf 02 	sts	0x02CF, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
     dbc:	46 e0       	ldi	r20, 0x06	; 6
     dbe:	6e ea       	ldi	r22, 0xAE	; 174
     dc0:	72 e0       	ldi	r23, 0x02	; 2
     dc2:	82 e2       	ldi	r24, 0x22	; 34
     dc4:	0e 94 6d 06 	call	0xcda	; 0xcda <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
     dc8:	80 91 cf 02 	lds	r24, 0x02CF
     dcc:	88 23       	and	r24, r24
     dce:	e1 f3       	breq	.-8      	; 0xdc8 <am_tune_freq+0x32>
}
     dd0:	08 95       	ret

00000dd2 <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq(){
  si4734_wr_buf[0] = 0x40;  //am tune command
     dd2:	ee ea       	ldi	r30, 0xAE	; 174
     dd4:	f2 e0       	ldi	r31, 0x02	; 2
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FAST tune
     dda:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
     ddc:	80 91 9f 02 	lds	r24, 0x029F
     de0:	90 91 a0 02 	lds	r25, 0x02A0
     de4:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
     de6:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
     de8:	14 82       	std	Z+4, r1	; 0x04
  si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte 
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	85 83       	std	Z+5, r24	; 0x05
  //send am tune command
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
     dee:	46 e0       	ldi	r20, 0x06	; 6
     df0:	bf 01       	movw	r22, r30
     df2:	82 e2       	ldi	r24, 0x22	; 34
     df4:	0e 94 6d 06 	call	0xcda	; 0xcda <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     df8:	2f ef       	ldi	r18, 0xFF	; 255
     dfa:	87 ee       	ldi	r24, 0xE7	; 231
     dfc:	93 e0       	ldi	r25, 0x03	; 3
     dfe:	21 50       	subi	r18, 0x01	; 1
     e00:	80 40       	sbci	r24, 0x00	; 0
     e02:	90 40       	sbci	r25, 0x00	; 0
     e04:	e1 f7       	brne	.-8      	; 0xdfe <sw_tune_freq+0x2c>
     e06:	00 c0       	rjmp	.+0      	; 0xe08 <sw_tune_freq+0x36>
     e08:	00 00       	nop
     e0a:	08 95       	ret

00000e0c <radio_pwr_dwn>:
//

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
     e0c:	80 91 25 02 	lds	r24, 0x0225
     e10:	90 91 26 02 	lds	r25, 0x0226
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	91 05       	cpc	r25, r1
     e18:	51 f1       	breq	.+84     	; 0xe6e <radio_pwr_dwn+0x62>
     e1a:	00 f1       	brcs	.+64     	; 0xe5c <radio_pwr_dwn+0x50>
     e1c:	02 97       	sbiw	r24, 0x02	; 2
     e1e:	41 f4       	brne	.+16     	; 0xe30 <radio_pwr_dwn+0x24>
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
  case(SW) : eeprom_write_word(&eeprom_sw_freq, current_sw_freq); break;
     e20:	60 91 9f 02 	lds	r22, 0x029F
     e24:	70 91 a0 02 	lds	r23, 0x02A0
     e28:	81 ea       	ldi	r24, 0xA1	; 161
     e2a:	92 e0       	ldi	r25, 0x02	; 2
     e2c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <eeprom_write_word>
  default  : break;
}//switch      

  eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
     e30:	60 91 74 02 	lds	r22, 0x0274
     e34:	8e e3       	ldi	r24, 0x3E	; 62
     e36:	92 e0       	ldi	r25, 0x02	; 2
     e38:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <eeprom_write_byte>

//send fm power down command
    si4734_wr_buf[0] = 0x11;
     e3c:	81 e1       	ldi	r24, 0x11	; 17
     e3e:	80 93 ae 02 	sts	0x02AE, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
     e42:	41 e0       	ldi	r20, 0x01	; 1
     e44:	6e ea       	ldi	r22, 0xAE	; 174
     e46:	72 e0       	ldi	r23, 0x02	; 2
     e48:	82 e2       	ldi	r24, 0x22	; 34
     e4a:	0e 94 6d 06 	call	0xcda	; 0xcda <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e4e:	87 ed       	ldi	r24, 0xD7	; 215
     e50:	94 e0       	ldi	r25, 0x04	; 4
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	f1 f7       	brne	.-4      	; 0xe52 <radio_pwr_dwn+0x46>
     e56:	00 c0       	rjmp	.+0      	; 0xe58 <radio_pwr_dwn+0x4c>
     e58:	00 00       	nop
     e5a:	08 95       	ret

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
     e5c:	60 91 16 01 	lds	r22, 0x0116
     e60:	70 91 17 01 	lds	r23, 0x0117
     e64:	8f e3       	ldi	r24, 0x3F	; 63
     e66:	92 e0       	ldi	r25, 0x02	; 2
     e68:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <eeprom_write_word>
     e6c:	e1 cf       	rjmp	.-62     	; 0xe30 <radio_pwr_dwn+0x24>
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
     e6e:	60 91 75 02 	lds	r22, 0x0275
     e72:	70 91 76 02 	lds	r23, 0x0276
     e76:	82 e7       	ldi	r24, 0x72	; 114
     e78:	92 e0       	ldi	r25, 0x02	; 2
     e7a:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <eeprom_write_word>
     e7e:	d8 cf       	rjmp	.-80     	; 0xe30 <radio_pwr_dwn+0x24>

00000e80 <fm_rsq_status>:
//inside the chip. 
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
     e80:	83 e2       	ldi	r24, 0x23	; 35
     e82:	80 93 ae 02 	sts	0x02AE, r24
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	80 93 af 02 	sts	0x02AF, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     e8c:	42 e0       	ldi	r20, 0x02	; 2
     e8e:	6e ea       	ldi	r22, 0xAE	; 174
     e90:	72 e0       	ldi	r23, 0x02	; 2
     e92:	82 e2       	ldi	r24, 0x22	; 34
     e94:	0e 94 6d 06 	call	0xcda	; 0xcda <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     e98:	0e 94 69 06 	call	0xcd2	; 0xcd2 <twi_busy>
     e9c:	81 11       	cpse	r24, r1
     e9e:	fc cf       	rjmp	.-8      	; 0xe98 <fm_rsq_status+0x18>
     ea0:	8f ea       	ldi	r24, 0xAF	; 175
     ea2:	94 e0       	ldi	r25, 0x04	; 4
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <fm_rsq_status+0x24>
     ea8:	00 c0       	rjmp	.+0      	; 0xeaa <fm_rsq_status+0x2a>
     eaa:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you 
    //when the command is received and has been processed.
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     eac:	48 e0       	ldi	r20, 0x08	; 8
     eae:	67 eb       	ldi	r22, 0xB7	; 183
     eb0:	72 e0       	ldi	r23, 0x02	; 2
     eb2:	82 e2       	ldi	r24, 0x22	; 34
     eb4:	0e 94 7e 06 	call	0xcfc	; 0xcfc <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     eb8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <twi_busy>
     ebc:	81 11       	cpse	r24, r1
     ebe:	fc cf       	rjmp	.-8      	; 0xeb8 <fm_rsq_status+0x38>
}
     ec0:	08 95       	ret

00000ec2 <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
     ec2:	82 e2       	ldi	r24, 0x22	; 34
     ec4:	80 93 ae 02 	sts	0x02AE, r24
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	80 93 af 02 	sts	0x02AF, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     ece:	42 e0       	ldi	r20, 0x02	; 2
     ed0:	6e ea       	ldi	r22, 0xAE	; 174
     ed2:	72 e0       	ldi	r23, 0x02	; 2
     ed4:	82 e2       	ldi	r24, 0x22	; 34
     ed6:	0e 94 6d 06 	call	0xcda	; 0xcda <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     eda:	0e 94 69 06 	call	0xcd2	; 0xcd2 <twi_busy>
     ede:	81 11       	cpse	r24, r1
     ee0:	fc cf       	rjmp	.-8      	; 0xeda <fm_tune_status+0x18>
     ee2:	8f ea       	ldi	r24, 0xAF	; 175
     ee4:	94 e0       	ldi	r25, 0x04	; 4
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <fm_tune_status+0x24>
     eea:	00 c0       	rjmp	.+0      	; 0xeec <fm_tune_status+0x2a>
     eec:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     eee:	48 e0       	ldi	r20, 0x08	; 8
     ef0:	67 eb       	ldi	r22, 0xB7	; 183
     ef2:	72 e0       	ldi	r23, 0x02	; 2
     ef4:	82 e2       	ldi	r24, 0x22	; 34
     ef6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
     efa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <twi_busy>
     efe:	81 11       	cpse	r24, r1
     f00:	fc cf       	rjmp	.-8      	; 0xefa <fm_tune_status+0x38>
}
     f02:	08 95       	ret

00000f04 <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){

    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
     f04:	82 e4       	ldi	r24, 0x42	; 66
     f06:	80 93 ae 02 	sts	0x02AE, r24
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	80 93 af 02 	sts	0x02AF, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     f10:	42 e0       	ldi	r20, 0x02	; 2
     f12:	6e ea       	ldi	r22, 0xAE	; 174
     f14:	72 e0       	ldi	r23, 0x02	; 2
     f16:	82 e2       	ldi	r24, 0x22	; 34
     f18:	0e 94 6d 06 	call	0xcda	; 0xcda <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     f1c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <twi_busy>
     f20:	81 11       	cpse	r24, r1
     f22:	fc cf       	rjmp	.-8      	; 0xf1c <am_tune_status+0x18>
     f24:	8f ea       	ldi	r24, 0xAF	; 175
     f26:	94 e0       	ldi	r25, 0x04	; 4
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <am_tune_status+0x24>
     f2c:	00 c0       	rjmp	.+0      	; 0xf2e <am_tune_status+0x2a>
     f2e:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     f30:	48 e0       	ldi	r20, 0x08	; 8
     f32:	67 eb       	ldi	r22, 0xB7	; 183
     f34:	72 e0       	ldi	r23, 0x02	; 2
     f36:	82 e2       	ldi	r24, 0x22	; 34
     f38:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <twi_start_rd>

00000f3c <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){

    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
     f3c:	83 e4       	ldi	r24, 0x43	; 67
     f3e:	80 93 ae 02 	sts	0x02AE, r24
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	80 93 af 02 	sts	0x02AF, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     f48:	42 e0       	ldi	r20, 0x02	; 2
     f4a:	6e ea       	ldi	r22, 0xAE	; 174
     f4c:	72 e0       	ldi	r23, 0x02	; 2
     f4e:	82 e2       	ldi	r24, 0x22	; 34
     f50:	0e 94 6d 06 	call	0xcda	; 0xcda <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
     f54:	0e 94 69 06 	call	0xcd2	; 0xcd2 <twi_busy>
     f58:	81 11       	cpse	r24, r1
     f5a:	fc cf       	rjmp	.-8      	; 0xf54 <am_rsq_status+0x18>
     f5c:	8f ea       	ldi	r24, 0xAF	; 175
     f5e:	94 e0       	ldi	r25, 0x04	; 4
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <am_rsq_status+0x24>
     f64:	00 c0       	rjmp	.+0      	; 0xf66 <am_rsq_status+0x2a>
     f66:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     f68:	48 e0       	ldi	r20, 0x08	; 8
     f6a:	67 eb       	ldi	r22, 0xB7	; 183
     f6c:	72 e0       	ldi	r23, 0x02	; 2
     f6e:	82 e2       	ldi	r24, 0x22	; 34
     f70:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <twi_start_rd>

00000f74 <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms. 
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
     f74:	ee ea       	ldi	r30, 0xAE	; 174
     f76:	f2 e0       	ldi	r31, 0x02	; 2
     f78:	22 e1       	ldi	r18, 0x12	; 18
     f7a:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
     f7c:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
     f7e:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
     f80:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
     f82:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
     f84:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
     f86:	46 e0       	ldi	r20, 0x06	; 6
     f88:	bf 01       	movw	r22, r30
     f8a:	82 e2       	ldi	r24, 0x22	; 34
     f8c:	0e 94 6d 06 	call	0xcda	; 0xcda <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f90:	8f e3       	ldi	r24, 0x3F	; 63
     f92:	9c e9       	ldi	r25, 0x9C	; 156
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <set_property+0x20>
     f98:	00 c0       	rjmp	.+0      	; 0xf9a <set_property+0x26>
     f9a:	00 00       	nop
     f9c:	08 95       	ret

00000f9e <fm_pwr_up>:
//********************************************************************************
//                            fm_pwr_up()
//
void fm_pwr_up(){
//restore the previous fm frequency  
 current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work 
     f9e:	8f e3       	ldi	r24, 0x3F	; 63
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <eeprom_read_word>
     fa6:	90 93 17 01 	sts	0x0117, r25
     faa:	80 93 16 01 	sts	0x0116, r24
 current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
     fae:	8e e3       	ldi	r24, 0x3E	; 62
     fb0:	92 e0       	ldi	r25, 0x02	; 2
     fb2:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <eeprom_read_byte>
     fb6:	80 93 74 02 	sts	0x0274, r24

//send fm power up command
  si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
     fba:	ee ea       	ldi	r30, 0xAE	; 174
     fbc:	f2 e0       	ldi	r31, 0x02	; 2
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
     fc2:	80 e5       	ldi	r24, 0x50	; 80
     fc4:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
     fc6:	85 e0       	ldi	r24, 0x05	; 5
     fc8:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
     fca:	43 e0       	ldi	r20, 0x03	; 3
     fcc:	bf 01       	movw	r22, r30
     fce:	82 e2       	ldi	r24, 0x22	; 34
     fd0:	0e 94 6d 06 	call	0xcda	; 0xcda <twi_start_wr>
     fd4:	2f ef       	ldi	r18, 0xFF	; 255
     fd6:	8b ed       	ldi	r24, 0xDB	; 219
     fd8:	95 e0       	ldi	r25, 0x05	; 5
     fda:	21 50       	subi	r18, 0x01	; 1
     fdc:	80 40       	sbci	r24, 0x00	; 0
     fde:	90 40       	sbci	r25, 0x00	; 0
     fe0:	e1 f7       	brne	.-8      	; 0xfda <fm_pwr_up+0x3c>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <fm_pwr_up+0x46>
     fe4:	00 00       	nop
  _delay_ms(120);               //startup delay as specified 
  //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
  //low pulse will be output from GPIO2/INT when tune or seek is completed.
  set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <set_property>

00000ff2 <am_pwr_up>:
//********************************************************************************
//                            am_pwr_up()
//
void am_pwr_up(){
//restore the previous am frequency  
  current_am_freq = eeprom_read_word(&eeprom_am_freq);
     ff2:	82 e7       	ldi	r24, 0x72	; 114
     ff4:	92 e0       	ldi	r25, 0x02	; 2
     ff6:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <eeprom_read_word>
     ffa:	90 93 76 02 	sts	0x0276, r25
     ffe:	80 93 75 02 	sts	0x0275, r24
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    1002:	8e e3       	ldi	r24, 0x3E	; 62
    1004:	92 e0       	ldi	r25, 0x02	; 2
    1006:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <eeprom_read_byte>
    100a:	80 93 74 02 	sts	0x0274, r24

//send am power up command
  si4734_wr_buf[0] = AM_PWR_UP;
    100e:	ee ea       	ldi	r30, 0xAE	; 174
    1010:	f2 e0       	ldi	r31, 0x02	; 2
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
    1016:	81 e5       	ldi	r24, 0x51	; 81
    1018:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;
    101a:	85 e0       	ldi	r24, 0x05	; 5
    101c:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    101e:	43 e0       	ldi	r20, 0x03	; 3
    1020:	bf 01       	movw	r22, r30
    1022:	82 e2       	ldi	r24, 0x22	; 34
    1024:	0e 94 6d 06 	call	0xcda	; 0xcda <twi_start_wr>
    1028:	2f ef       	ldi	r18, 0xFF	; 255
    102a:	8b ed       	ldi	r24, 0xDB	; 219
    102c:	95 e0       	ldi	r25, 0x05	; 5
    102e:	21 50       	subi	r18, 0x01	; 1
    1030:	80 40       	sbci	r24, 0x00	; 0
    1032:	90 40       	sbci	r25, 0x00	; 0
    1034:	e1 f7       	brne	.-8      	; 0x102e <am_pwr_up+0x3c>
    1036:	00 c0       	rjmp	.+0      	; 0x1038 <am_pwr_up+0x46>
    1038:	00 00       	nop
  _delay_ms(120);   
  set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
    103a:	61 e0       	ldi	r22, 0x01	; 1
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <set_property>

00001046 <sw_pwr_up>:
//                            sw_pwr_up()
//

void sw_pwr_up(){
//restore the previous sw frequency  
  current_sw_freq = eeprom_read_word(&eeprom_sw_freq);
    1046:	81 ea       	ldi	r24, 0xA1	; 161
    1048:	92 e0       	ldi	r25, 0x02	; 2
    104a:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <eeprom_read_word>
    104e:	90 93 a0 02 	sts	0x02A0, r25
    1052:	80 93 9f 02 	sts	0x029F, r24
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    1056:	8e e3       	ldi	r24, 0x3E	; 62
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <eeprom_read_byte>
    105e:	80 93 74 02 	sts	0x0274, r24

//send sw power up command (same as am, only tuning rate is different)
    si4734_wr_buf[0] = AM_PWR_UP; //same cmd as for AM
    1062:	ee ea       	ldi	r30, 0xAE	; 174
    1064:	f2 e0       	ldi	r31, 0x02	; 2
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x51;
    106a:	81 e5       	ldi	r24, 0x51	; 81
    106c:	81 83       	std	Z+1, r24	; 0x01
    si4734_wr_buf[2] = 0x05;
    106e:	85 e0       	ldi	r24, 0x05	; 5
    1070:	82 83       	std	Z+2, r24	; 0x02
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1072:	43 e0       	ldi	r20, 0x03	; 3
    1074:	bf 01       	movw	r22, r30
    1076:	82 e2       	ldi	r24, 0x22	; 34
    1078:	0e 94 6d 06 	call	0xcda	; 0xcda <twi_start_wr>
    107c:	2f ef       	ldi	r18, 0xFF	; 255
    107e:	8b ed       	ldi	r24, 0xDB	; 219
    1080:	95 e0       	ldi	r25, 0x05	; 5
    1082:	21 50       	subi	r18, 0x01	; 1
    1084:	80 40       	sbci	r24, 0x00	; 0
    1086:	90 40       	sbci	r25, 0x00	; 0
    1088:	e1 f7       	brne	.-8      	; 0x1082 <sw_pwr_up+0x3c>
    108a:	00 c0       	rjmp	.+0      	; 0x108c <sw_pwr_up+0x46>
    108c:	00 00       	nop
    _delay_ms(120);   //start up delay

  //set property to disable soft muting for shortwave broadcasts
  set_property(AM_SOFT_MUTE_MAX_ATTENUATION, 0x0000); //cut off soft mute  
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	82 e0       	ldi	r24, 0x02	; 2
    1094:	93 e3       	ldi	r25, 0x33	; 51
    1096:	0e 94 ba 07 	call	0xf74	; 0xf74 <set_property>
  //select 4khz filter BW and engage power line filter
  set_property(AM_CHANNEL_FILTER, (AM_CHFILT_4KHZ | AM_PWR_LINE_NOISE_REJT_FILTER)); 
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	71 e0       	ldi	r23, 0x01	; 1
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	91 e3       	ldi	r25, 0x31	; 49
    10a2:	0e 94 ba 07 	call	0xf74	; 0xf74 <set_property>
  set_property(GPO_IEN, GPO_IEN_STCIEN); //Seek/Tune Complete interrupt
    10a6:	61 e0       	ldi	r22, 0x01	; 1
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <set_property>

000010b2 <get_rev>:
//TODO: UNTESTED!
//Report the chip revision info via uart1. UART1 be setup and connected to 
//a dumb terminal. e.g.: screen /dev/cu.usbserial-A800fh27 9600
//
void get_rev(){
    si4734_wr_buf[0] = GET_REV;                   //get rev command 
    10b2:	80 e1       	ldi	r24, 0x10	; 16
    10b4:	80 93 ae 02 	sts	0x02AE, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    10b8:	41 e0       	ldi	r20, 0x01	; 1
    10ba:	6e ea       	ldi	r22, 0xAE	; 174
    10bc:	72 e0       	ldi	r23, 0x02	; 2
    10be:	82 e2       	ldi	r24, 0x22	; 34
    10c0:	0e 94 6d 06 	call	0xcda	; 0xcda <twi_start_wr>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    10c4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <twi_busy>
    10c8:	81 11       	cpse	r24, r1
    10ca:	fc cf       	rjmp	.-8      	; 0x10c4 <get_rev+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10cc:	8f ea       	ldi	r24, 0xAF	; 175
    10ce:	94 e0       	ldi	r25, 0x04	; 4
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	f1 f7       	brne	.-4      	; 0x10d0 <get_rev+0x1e>
    10d4:	00 c0       	rjmp	.+0      	; 0x10d6 <get_rev+0x24>
    10d6:	00 00       	nop
    _delay_us(300);        //wait for processing delay
//get the revision info  
    twi_start_rd(SI4734_ADDRESS, si4734_revision_buf, 8);
    10d8:	48 e0       	ldi	r20, 0x08	; 8
    10da:	6f eb       	ldi	r22, 0xBF	; 191
    10dc:	72 e0       	ldi	r23, 0x02	; 2
    10de:	82 e2       	ldi	r24, 0x22	; 34
    10e0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    10e4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <twi_busy>
    10e8:	81 11       	cpse	r24, r1
    10ea:	fc cf       	rjmp	.-8      	; 0x10e4 <get_rev+0x32>
//use TABs instead?
    uart1_puts("Si4734 Rev:  last 2 digits of part no.   chip rev     \n\r");
    10ec:	8e e1       	ldi	r24, 0x1E	; 30
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
    uart1_puts("             -------------------------   --------     \n\r");
    10f4:	87 e5       	ldi	r24, 0x57	; 87
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
    uart1_puts("                          "); itoa((int)si4734_revision_buf[1], uart1_tx_buf, 10); uart1_puts(uart1_tx_buf); 
    10fc:	80 e9       	ldi	r24, 0x90	; 144
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
    1104:	80 91 c0 02 	lds	r24, 0x02C0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1108:	4a e0       	ldi	r20, 0x0A	; 10
    110a:	62 e4       	ldi	r22, 0x42	; 66
    110c:	72 e0       	ldi	r23, 0x02	; 2
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__itoa_ncheck>
    1114:	82 e4       	ldi	r24, 0x42	; 66
    1116:	92 e0       	ldi	r25, 0x02	; 2
    1118:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
    uart1_puts("             "); itoa((int)si4734_revision_buf[2], uart1_tx_buf, 10); uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    111c:	8d e9       	ldi	r24, 0x9D	; 157
    111e:	91 e0       	ldi	r25, 0x01	; 1
    1120:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
    1124:	80 91 c1 02 	lds	r24, 0x02C1
    1128:	4a e0       	ldi	r20, 0x0A	; 10
    112a:	62 e4       	ldi	r22, 0x42	; 66
    112c:	72 e0       	ldi	r23, 0x02	; 2
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__itoa_ncheck>
    1134:	82 e4       	ldi	r24, 0x42	; 66
    1136:	92 e0       	ldi	r25, 0x02	; 2
    1138:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
    113c:	8d e8       	ldi	r24, 0x8D	; 141
    113e:	91 e0       	ldi	r25, 0x01	; 1
    1140:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <uart1_puts>

00001144 <get_fm_rsq_status>:
// TODO: UNTESTED!
//Report the fm rsq status via uart1. Requires that UART1 be setup and connected to 
//a terminal. e.g.: screen /dev/cu.usbserial-A800fh27 9600
//Also requires that a fm_tune_status has been previously called.

void get_fm_rsq_status(){
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	a8 97       	sbiw	r28, 0x28	; 40
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
  uint8_t disp_freq;  //temp holding variable
  char    str[40];    //temp for building strings

  uart1_puts("FM_RSQ_STATUS: ");
    115e:	8b ea       	ldi	r24, 0xAB	; 171
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
  uart1_puts("status byte   :");   itoa((int)si4734_tune_status_buf[0], uart1_tx_buf, 16);   uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    1166:	8b eb       	ldi	r24, 0xBB	; 187
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
    116e:	07 eb       	ldi	r16, 0xB7	; 183
    1170:	12 e0       	ldi	r17, 0x02	; 2
    1172:	f8 01       	movw	r30, r16
    1174:	80 81       	ld	r24, Z
    1176:	40 e1       	ldi	r20, 0x10	; 16
    1178:	62 e4       	ldi	r22, 0x42	; 66
    117a:	72 e0       	ldi	r23, 0x02	; 2
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__itoa_ncheck>
    1182:	82 e4       	ldi	r24, 0x42	; 66
    1184:	92 e0       	ldi	r25, 0x02	; 2
    1186:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
    118a:	8d e8       	ldi	r24, 0x8D	; 141
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
  uart1_puts("resp1         :");   itoa((int)si4734_tune_status_buf[1], uart1_tx_buf, 10);   uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    1192:	8b ec       	ldi	r24, 0xCB	; 203
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
    119a:	f8 01       	movw	r30, r16
    119c:	81 81       	ldd	r24, Z+1	; 0x01
    119e:	4a e0       	ldi	r20, 0x0A	; 10
    11a0:	62 e4       	ldi	r22, 0x42	; 66
    11a2:	72 e0       	ldi	r23, 0x02	; 2
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__itoa_ncheck>
    11aa:	82 e4       	ldi	r24, 0x42	; 66
    11ac:	92 e0       	ldi	r25, 0x02	; 2
    11ae:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
    11b2:	8d e8       	ldi	r24, 0x8D	; 141
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
  disp_freq = si4734_tune_status_buf[2];      //load high frequency byte
  disp_freq = (disp_freq << 8); //shift upper byte to upper 8 bits
  disp_freq |= si4734_tune_status_buf[3];     //load low high frequency byte
    11ba:	f8 01       	movw	r30, r16
    11bc:	f3 80       	ldd	r15, Z+3	; 0x03
  uart1_puts("freq          :");   itoa(disp_freq, uart1_tx_buf, 10);   uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    11be:	8b ed       	ldi	r24, 0xDB	; 219
    11c0:	91 e0       	ldi	r25, 0x01	; 1
    11c2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
    11c6:	4a e0       	ldi	r20, 0x0A	; 10
    11c8:	62 e4       	ldi	r22, 0x42	; 66
    11ca:	72 e0       	ldi	r23, 0x02	; 2
    11cc:	8f 2d       	mov	r24, r15
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__itoa_ncheck>
    11d4:	82 e4       	ldi	r24, 0x42	; 66
    11d6:	92 e0       	ldi	r25, 0x02	; 2
    11d8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
    11dc:	8d e8       	ldi	r24, 0x8D	; 141
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
  uart1_puts("freq high     :");   itoa((int)si4734_tune_status_buf[2], str, 16);   uart1_puts(str); uart1_puts("\n\r");
    11e4:	8b ee       	ldi	r24, 0xEB	; 235
    11e6:	91 e0       	ldi	r25, 0x01	; 1
    11e8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
    11ec:	f8 01       	movw	r30, r16
    11ee:	82 81       	ldd	r24, Z+2	; 0x02
    11f0:	40 e1       	ldi	r20, 0x10	; 16
    11f2:	be 01       	movw	r22, r28
    11f4:	6f 5f       	subi	r22, 0xFF	; 255
    11f6:	7f 4f       	sbci	r23, 0xFF	; 255
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__itoa_ncheck>
    11fe:	ce 01       	movw	r24, r28
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
    1206:	8d e8       	ldi	r24, 0x8D	; 141
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
  uart1_puts("freq low      :");   itoa((int)si4734_tune_status_buf[3], str, 16);   uart1_puts(str); uart1_puts("\n\r");
    120e:	8b ef       	ldi	r24, 0xFB	; 251
    1210:	91 e0       	ldi	r25, 0x01	; 1
    1212:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
    1216:	f8 01       	movw	r30, r16
    1218:	83 81       	ldd	r24, Z+3	; 0x03
    121a:	40 e1       	ldi	r20, 0x10	; 16
    121c:	be 01       	movw	r22, r28
    121e:	6f 5f       	subi	r22, 0xFF	; 255
    1220:	7f 4f       	sbci	r23, 0xFF	; 255
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__itoa_ncheck>
    1228:	ce 01       	movw	r24, r28
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
    1230:	8d e8       	ldi	r24, 0x8D	; 141
    1232:	91 e0       	ldi	r25, 0x01	; 1
    1234:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
  uart1_puts("rssi          :");   itoa((int)si4734_tune_status_buf[4], uart1_tx_buf, 16);   uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    1238:	8b e0       	ldi	r24, 0x0B	; 11
    123a:	92 e0       	ldi	r25, 0x02	; 2
    123c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
    1240:	f8 01       	movw	r30, r16
    1242:	84 81       	ldd	r24, Z+4	; 0x04
    1244:	40 e1       	ldi	r20, 0x10	; 16
    1246:	62 e4       	ldi	r22, 0x42	; 66
    1248:	72 e0       	ldi	r23, 0x02	; 2
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__itoa_ncheck>
    1250:	82 e4       	ldi	r24, 0x42	; 66
    1252:	92 e0       	ldi	r25, 0x02	; 2
    1254:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
    1258:	8d e8       	ldi	r24, 0x8D	; 141
    125a:	91 e0       	ldi	r25, 0x01	; 1
    125c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uart1_puts>
}
    1260:	a8 96       	adiw	r28, 0x28	; 40
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	ff 90       	pop	r15
    1276:	08 95       	ret

00001278 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1278:	5d 9b       	sbis	0x0b, 5	; 11
    127a:	fe cf       	rjmp	.-4      	; 0x1278 <uart_putc>
    UDR0 = data;    // Send data byte
    127c:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    127e:	5d 9b       	sbis	0x0b, 5	; 11
    1280:	fe cf       	rjmp	.-4      	; 0x127e <uart_putc+0x6>
}
    1282:	08 95       	ret

00001284 <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    1284:	90 91 9b 00 	lds	r25, 0x009B
    1288:	95 ff       	sbrs	r25, 5
    128a:	fc cf       	rjmp	.-8      	; 0x1284 <uart1_putc>
    UDR1 = data;    // Send data byte
    128c:	80 93 9c 00 	sts	0x009C, r24
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    1290:	80 91 9b 00 	lds	r24, 0x009B
    1294:	85 ff       	sbrs	r24, 5
    1296:	fc cf       	rjmp	.-8      	; 0x1290 <uart1_putc+0xc>
}
    1298:	08 95       	ret

0000129a <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    129a:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    129c:	90 81       	ld	r25, Z
    129e:	99 23       	and	r25, r25
    12a0:	49 f0       	breq	.+18     	; 0x12b4 <uart_puts+0x1a>
    12a2:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    12a4:	5d 9b       	sbis	0x0b, 5	; 11
    12a6:	fe cf       	rjmp	.-4      	; 0x12a4 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    12a8:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    12aa:	5d 9b       	sbis	0x0b, 5	; 11
    12ac:	fe cf       	rjmp	.-4      	; 0x12aa <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    12ae:	91 91       	ld	r25, Z+
    12b0:	91 11       	cpse	r25, r1
    12b2:	f8 cf       	rjmp	.-16     	; 0x12a4 <uart_puts+0xa>
    12b4:	08 95       	ret

000012b6 <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    12b6:	fc 01       	movw	r30, r24
    12b8:	20 81       	ld	r18, Z
    12ba:	22 23       	and	r18, r18
    12bc:	71 f0       	breq	.+28     	; 0x12da <uart1_puts+0x24>
    12be:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    12c0:	90 91 9b 00 	lds	r25, 0x009B
    12c4:	95 ff       	sbrs	r25, 5
    12c6:	fc cf       	rjmp	.-8      	; 0x12c0 <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
    12c8:	20 93 9c 00 	sts	0x009C, r18
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    12cc:	90 91 9b 00 	lds	r25, 0x009B
    12d0:	95 ff       	sbrs	r25, 5
    12d2:	fc cf       	rjmp	.-8      	; 0x12cc <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    12d4:	21 91       	ld	r18, Z+
    12d6:	21 11       	cpse	r18, r1
    12d8:	f3 cf       	rjmp	.-26     	; 0x12c0 <uart1_puts+0xa>
    12da:	08 95       	ret

000012dc <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    12dc:	9c 01       	movw	r18, r24
    12de:	fc 01       	movw	r30, r24
    12e0:	44 91       	lpm	r20, Z
    12e2:	44 23       	and	r20, r20
    12e4:	69 f0       	breq	.+26     	; 0x1300 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    12e6:	01 96       	adiw	r24, 0x01	; 1
    12e8:	f9 01       	movw	r30, r18
    12ea:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    12ec:	5d 9b       	sbis	0x0b, 5	; 11
    12ee:	fe cf       	rjmp	.-4      	; 0x12ec <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    12f0:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    12f2:	5d 9b       	sbis	0x0b, 5	; 11
    12f4:	fe cf       	rjmp	.-4      	; 0x12f2 <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    12f6:	9c 01       	movw	r18, r24
    12f8:	fc 01       	movw	r30, r24
    12fa:	44 91       	lpm	r20, Z
    12fc:	41 11       	cpse	r20, r1
    12fe:	f3 cf       	rjmp	.-26     	; 0x12e6 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    1300:	08 95       	ret

00001302 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
    1302:	8a b1       	in	r24, 0x0a	; 10
    1304:	88 69       	ori	r24, 0x98	; 152
    1306:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    1308:	e5 e9       	ldi	r30, 0x95	; 149
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	86 60       	ori	r24, 0x06	; 6
    1310:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
    1312:	10 92 90 00 	sts	0x0090, r1
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    1316:	87 e6       	ldi	r24, 0x67	; 103
    1318:	89 b9       	out	0x09, r24	; 9
    131a:	08 95       	ret

0000131c <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
    131c:	ea e9       	ldi	r30, 0x9A	; 154
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	88 61       	ori	r24, 0x18	; 24
    1324:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
    1326:	ed e9       	ldi	r30, 0x9D	; 157
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	86 60       	ori	r24, 0x06	; 6
    132e:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >>8 ); //load upper byte of the baud rate into UBRR 
    1330:	10 92 98 00 	sts	0x0098, r1
  UBRR1L =  BAUDVALUE_1;       //load lower byte of the baud rate into UBRR 
    1334:	87 e6       	ldi	r24, 0x67	; 103
    1336:	80 93 99 00 	sts	0x0099, r24
    133a:	08 95       	ret

0000133c <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    133c:	80 e8       	ldi	r24, 0x80	; 128
    133e:	9e e3       	ldi	r25, 0x3E	; 62
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <uart_getc+0xa>
    1342:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    1344:	21 f0       	breq	.+8      	; 0x134e <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    1346:	5f 9b       	sbis	0x0b, 7	; 11
    1348:	fc cf       	rjmp	.-8      	; 0x1342 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
    134a:	8c b1       	in	r24, 0x0c	; 12
    134c:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
    134e:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
    1350:	08 95       	ret

00001352 <uart1_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
    1352:	80 e8       	ldi	r24, 0x80	; 128
    1354:	9e e3       	ldi	r25, 0x3E	; 62
    1356:	02 c0       	rjmp	.+4      	; 0x135c <uart1_getc+0xa>
    1358:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    135a:	39 f0       	breq	.+14     	; 0x136a <uart1_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
    135c:	20 91 9b 00 	lds	r18, 0x009B
    1360:	27 ff       	sbrs	r18, 7
    1362:	fa cf       	rjmp	.-12     	; 0x1358 <uart1_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
    1364:	80 91 9c 00 	lds	r24, 0x009C
    1368:	08 95       	ret
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
  timer++;
  if(timer >= 16000){ return(0);}
    136a:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
}
    136c:	08 95       	ret

0000136e <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    136e:	91 e0       	ldi	r25, 0x01	; 1
    1370:	81 11       	cpse	r24, r1
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <send_lcd+0x8>
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1378:	77 9b       	sbis	0x0e, 7	; 14
    137a:	fe cf       	rjmp	.-4      	; 0x1378 <send_lcd+0xa>
  SPDR = byte;                        //send payload
    137c:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    137e:	77 9b       	sbis	0x0e, 7	; 14
    1380:	fe cf       	rjmp	.-4      	; 0x137e <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1382:	80 91 62 00 	lds	r24, 0x0062
    1386:	88 60       	ori	r24, 0x08	; 8
    1388:	80 93 62 00 	sts	0x0062, r24
    138c:	80 91 62 00 	lds	r24, 0x0062
    1390:	87 7f       	andi	r24, 0xF7	; 247
    1392:	80 93 62 00 	sts	0x0062, r24
    1396:	08 95       	ret

00001398 <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
    1398:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
    139a:	c0 91 3d 02 	lds	r28, 0x023D
    139e:	8c 0f       	add	r24, r28
    13a0:	91 1d       	adc	r25, r1
    13a2:	fc 01       	movw	r30, r24
    13a4:	60 81       	ld	r22, Z
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
 i++;   //increment to next character
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	8c 0f       	add	r24, r28
    13b0:	80 93 3d 02 	sts	0x023D, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
    13b4:	80 31       	cpi	r24, 0x10	; 16
    13b6:	81 f0       	breq	.+32     	; 0x13d8 <refresh_lcd+0x40>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
    13b8:	80 32       	cpi	r24, 0x20	; 32
    13ba:	11 f0       	breq	.+4      	; 0x13c0 <refresh_lcd+0x28>
}//refresh_lcd
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret
    13c0:	85 ed       	ldi	r24, 0xD5	; 213
    13c2:	8a 95       	dec	r24
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <refresh_lcd+0x2a>
    13c6:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    13c8:	60 e8       	ldi	r22, 0x80	; 128
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
    13d0:	10 92 3d 02 	sts	0x023D, r1
}//refresh_lcd
    13d4:	cf 91       	pop	r28
    13d6:	08 95       	ret
    13d8:	f5 ed       	ldi	r31, 0xD5	; 213
    13da:	fa 95       	dec	r31
    13dc:	f1 f7       	brne	.-4      	; 0x13da <refresh_lcd+0x42>
    13de:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    13e0:	60 ec       	ldi	r22, 0xC0	; 192
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
    13e8:	80 91 3d 02 	lds	r24, 0x023D
    13ec:	e5 cf       	rjmp	.-54     	; 0x13b8 <refresh_lcd+0x20>

000013ee <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	1f 92       	push	r1
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    1402:	66 0f       	add	r22, r22
    1404:	66 0f       	add	r22, r22
    1406:	66 0f       	add	r22, r22
    1408:	60 5c       	subi	r22, 0xC0	; 192
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	99 83       	std	Y+1, r25	; 0x01
    140e:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
    1412:	85 ed       	ldi	r24, 0xD5	; 213
    1414:	8a 95       	dec	r24
    1416:	f1 f7       	brne	.-4      	; 0x1414 <set_custom_character+0x26>
    1418:	00 00       	nop
    141a:	e1 2e       	mov	r14, r17
    141c:	99 81       	ldd	r25, Y+1	; 0x01
    141e:	f9 2e       	mov	r15, r25
    1420:	87 01       	movw	r16, r14
    1422:	08 5f       	subi	r16, 0xF8	; 248
    1424:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    1426:	f7 01       	movw	r30, r14
    1428:	61 91       	ld	r22, Z+
    142a:	7f 01       	movw	r14, r30
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
    1432:	f5 ed       	ldi	r31, 0xD5	; 213
    1434:	fa 95       	dec	r31
    1436:	f1 f7       	brne	.-4      	; 0x1434 <set_custom_character+0x46>
    1438:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
    143a:	e0 16       	cp	r14, r16
    143c:	f1 06       	cpc	r15, r17
    143e:	99 f7       	brne	.-26     	; 0x1426 <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
    1440:	0f 90       	pop	r0
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	1f 91       	pop	r17
    1448:	0f 91       	pop	r16
    144a:	ff 90       	pop	r15
    144c:	ef 90       	pop	r14
    144e:	08 95       	ret

00001450 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
    1450:	90 e4       	ldi	r25, 0x40	; 64
    1452:	89 9f       	mul	r24, r25
    1454:	60 0d       	add	r22, r0
    1456:	11 24       	eor	r1, r1
    1458:	60 5c       	subi	r22, 0xC0	; 192
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	0c 94 b7 09 	jmp	0x136e	; 0x136e <send_lcd>

00001460 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    1460:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    1462:	88 23       	and	r24, r24
    1464:	b9 f1       	breq	.+110    	; 0x14d4 <uint2lcd+0x74>
    1466:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    1468:	84 36       	cpi	r24, 0x64	; 100
    146a:	98 f4       	brcc	.+38     	; 0x1492 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    146c:	8a 30       	cpi	r24, 0x0A	; 10
    146e:	d8 f4       	brcc	.+54     	; 0x14a6 <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    1470:	8d ec       	ldi	r24, 0xCD	; 205
    1472:	c8 9f       	mul	r28, r24
    1474:	81 2d       	mov	r24, r1
    1476:	11 24       	eor	r1, r1
    1478:	86 95       	lsr	r24
    147a:	86 95       	lsr	r24
    147c:	86 95       	lsr	r24
    147e:	6c 2f       	mov	r22, r28
    1480:	2a e0       	ldi	r18, 0x0A	; 10
    1482:	82 9f       	mul	r24, r18
    1484:	60 19       	sub	r22, r0
    1486:	11 24       	eor	r1, r1
    1488:	60 5d       	subi	r22, 0xD0	; 208
    148a:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    148c:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    148e:	0c 94 b7 09 	jmp	0x136e	; 0x136e <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    1492:	69 e2       	ldi	r22, 0x29	; 41
    1494:	86 9f       	mul	r24, r22
    1496:	61 2d       	mov	r22, r1
    1498:	11 24       	eor	r1, r1
    149a:	62 95       	swap	r22
    149c:	6f 70       	andi	r22, 0x0F	; 15
    149e:	60 5d       	subi	r22, 0xD0	; 208
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    14a6:	89 e2       	ldi	r24, 0x29	; 41
    14a8:	c8 9f       	mul	r28, r24
    14aa:	81 2d       	mov	r24, r1
    14ac:	11 24       	eor	r1, r1
    14ae:	82 95       	swap	r24
    14b0:	8f 70       	andi	r24, 0x0F	; 15
    14b2:	9c 2f       	mov	r25, r28
    14b4:	24 e6       	ldi	r18, 0x64	; 100
    14b6:	82 9f       	mul	r24, r18
    14b8:	90 19       	sub	r25, r0
    14ba:	11 24       	eor	r1, r1
    14bc:	6d ec       	ldi	r22, 0xCD	; 205
    14be:	96 9f       	mul	r25, r22
    14c0:	61 2d       	mov	r22, r1
    14c2:	11 24       	eor	r1, r1
    14c4:	66 95       	lsr	r22
    14c6:	66 95       	lsr	r22
    14c8:	66 95       	lsr	r22
    14ca:	60 5d       	subi	r22, 0xD0	; 208
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
    14d2:	ce cf       	rjmp	.-100    	; 0x1470 <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    14d4:	60 e3       	ldi	r22, 0x30	; 48
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
    14d8:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    14da:	0c 94 b7 09 	jmp	0x136e	; 0x136e <send_lcd>

000014de <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    14de:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    14e0:	87 fd       	sbrc	r24, 7
    14e2:	03 c0       	rjmp	.+6      	; 0x14ea <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
    14e4:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
    14e6:	0c 94 30 0a 	jmp	0x1460	; 0x1460 <uint2lcd>
    14ea:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    14ec:	6d e2       	ldi	r22, 0x2D	; 45
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
    14f4:	85 ed       	ldi	r24, 0xD5	; 213
    14f6:	8a 95       	dec	r24
    14f8:	f1 f7       	brne	.-4      	; 0x14f6 <int2lcd+0x18>
    14fa:	00 00       	nop
    14fc:	8c 2f       	mov	r24, r28
    14fe:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
    1500:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    1502:	0c 94 30 0a 	jmp	0x1460	; 0x1460 <uint2lcd>

00001506 <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
    1506:	6e e0       	ldi	r22, 0x0E	; 14
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	0c 94 b7 09 	jmp	0x136e	; 0x136e <send_lcd>

0000150e <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
    150e:	6c e0       	ldi	r22, 0x0C	; 12
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	0c 94 b7 09 	jmp	0x136e	; 0x136e <send_lcd>

00001516 <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
    1516:	6e e1       	ldi	r22, 0x1E	; 30
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	0c 94 b7 09 	jmp	0x136e	; 0x136e <send_lcd>

0000151e <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
    151e:	68 e1       	ldi	r22, 0x18	; 24
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	0c 94 b7 09 	jmp	0x136e	; 0x136e <send_lcd>

00001526 <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1526:	e2 e6       	ldi	r30, 0x62	; 98
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	88 60       	ori	r24, 0x08	; 8
    152e:	80 83       	st	Z, r24
    1530:	80 81       	ld	r24, Z
    1532:	87 7f       	andi	r24, 0xF7	; 247
    1534:	80 83       	st	Z, r24
    1536:	08 95       	ret

00001538 <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
    1538:	61 e0       	ldi	r22, 0x01	; 1
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
    1540:	8f e1       	ldi	r24, 0x1F	; 31
    1542:	9c e1       	ldi	r25, 0x1C	; 28
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <clear_display+0xc>
    1548:	00 c0       	rjmp	.+0      	; 0x154a <clear_display+0x12>
    154a:	00 00       	nop
    154c:	08 95       	ret

0000154e <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
    154e:	62 e0       	ldi	r22, 0x02	; 2
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
    1556:	8f e6       	ldi	r24, 0x6F	; 111
    1558:	97 e1       	ldi	r25, 0x17	; 23
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <cursor_home+0xc>
    155e:	00 c0       	rjmp	.+0      	; 0x1560 <cursor_home+0x12>
    1560:	00 00       	nop
    1562:	08 95       	ret

00001564 <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    1564:	60 ec       	ldi	r22, 0xC0	; 192
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	0c 94 b7 09 	jmp	0x136e	; 0x136e <send_lcd>

0000156c <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    156c:	60 e8       	ldi	r22, 0x80	; 128
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	0c 94 b7 09 	jmp	0x136e	; 0x136e <send_lcd>

00001574 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
    1574:	cf 93       	push	r28
    1576:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
    1578:	60 e2       	ldi	r22, 0x20	; 32
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
    1580:	85 ed       	ldi	r24, 0xD5	; 213
    1582:	8a 95       	dec	r24
    1584:	f1 f7       	brne	.-4      	; 0x1582 <fill_spaces+0xe>
    1586:	00 00       	nop
    1588:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    158a:	b1 f7       	brne	.-20     	; 0x1578 <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
    158c:	cf 91       	pop	r28
    158e:	08 95       	ret

00001590 <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
    1590:	68 2f       	mov	r22, r24
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	0c 94 b7 09 	jmp	0x136e	; 0x136e <send_lcd>

00001598 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
    1598:	0f 93       	push	r16
    159a:	1f 93       	push	r17
    159c:	cf 93       	push	r28
    159e:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    15a0:	40 e0       	ldi	r20, 0x00	; 0
    15a2:	50 e0       	ldi	r21, 0x00	; 0
    15a4:	c0 e0       	ldi	r28, 0x00	; 0
    15a6:	f8 01       	movw	r30, r16
    15a8:	e4 0f       	add	r30, r20
    15aa:	f5 1f       	adc	r31, r21
    15ac:	60 81       	ld	r22, Z
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
    15b4:	85 ed       	ldi	r24, 0xD5	; 213
    15b6:	8a 95       	dec	r24
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <string2lcd+0x1e>
    15ba:	00 00       	nop
    15bc:	cf 5f       	subi	r28, 0xFF	; 255
    15be:	4c 2f       	mov	r20, r28
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	f8 01       	movw	r30, r16
    15c4:	01 90       	ld	r0, Z+
    15c6:	00 20       	and	r0, r0
    15c8:	e9 f7       	brne	.-6      	; 0x15c4 <string2lcd+0x2c>
    15ca:	9f 01       	movw	r18, r30
    15cc:	20 1b       	sub	r18, r16
    15ce:	31 0b       	sbc	r19, r17
    15d0:	22 50       	subi	r18, 0x02	; 2
    15d2:	31 09       	sbc	r19, r1
    15d4:	24 17       	cp	r18, r20
    15d6:	35 07       	cpc	r19, r21
    15d8:	30 f7       	brcc	.-52     	; 0x15a6 <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	08 95       	ret

000015e2 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	99 ef       	ldi	r25, 0xF9	; 249
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	f1 f7       	brne	.-4      	; 0x15e6 <lcd_init+0x4>
    15ea:	00 c0       	rjmp	.+0      	; 0x15ec <lcd_init+0xa>
    15ec:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    15ee:	88 e0       	ldi	r24, 0x08	; 8
    15f0:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
    15f4:	60 e3       	ldi	r22, 0x30	; 48
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
    15fc:	8f e5       	ldi	r24, 0x5F	; 95
    15fe:	9d e6       	ldi	r25, 0x6D	; 109
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <lcd_init+0x1e>
    1604:	00 c0       	rjmp	.+0      	; 0x1606 <lcd_init+0x24>
    1606:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    1608:	60 e3       	ldi	r22, 0x30	; 48
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
    1610:	8f e5       	ldi	r24, 0x5F	; 95
    1612:	9d e6       	ldi	r25, 0x6D	; 109
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	f1 f7       	brne	.-4      	; 0x1614 <lcd_init+0x32>
    1618:	00 c0       	rjmp	.+0      	; 0x161a <lcd_init+0x38>
    161a:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    161c:	60 e3       	ldi	r22, 0x30	; 48
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
    1624:	8f e5       	ldi	r24, 0x5F	; 95
    1626:	9d e6       	ldi	r25, 0x6D	; 109
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <lcd_init+0x46>
    162c:	00 c0       	rjmp	.+0      	; 0x162e <lcd_init+0x4c>
    162e:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
    1630:	68 e3       	ldi	r22, 0x38	; 56
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
    1638:	8f e1       	ldi	r24, 0x1F	; 31
    163a:	9e e4       	ldi	r25, 0x4E	; 78
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	f1 f7       	brne	.-4      	; 0x163c <lcd_init+0x5a>
    1640:	00 c0       	rjmp	.+0      	; 0x1642 <lcd_init+0x60>
    1642:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
    1644:	68 e0       	ldi	r22, 0x08	; 8
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
    164c:	8f e1       	ldi	r24, 0x1F	; 31
    164e:	9e e4       	ldi	r25, 0x4E	; 78
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <lcd_init+0x6e>
    1654:	00 c0       	rjmp	.+0      	; 0x1656 <lcd_init+0x74>
    1656:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
    1658:	61 e0       	ldi	r22, 0x01	; 1
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
    1660:	8f e1       	ldi	r24, 0x1F	; 31
    1662:	9e e4       	ldi	r25, 0x4E	; 78
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <lcd_init+0x82>
    1668:	00 c0       	rjmp	.+0      	; 0x166a <lcd_init+0x88>
    166a:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
    166c:	66 e0       	ldi	r22, 0x06	; 6
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
    1674:	8f e1       	ldi	r24, 0x1F	; 31
    1676:	9e e4       	ldi	r25, 0x4E	; 78
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	f1 f7       	brne	.-4      	; 0x1678 <lcd_init+0x96>
    167c:	00 c0       	rjmp	.+0      	; 0x167e <lcd_init+0x9c>
    167e:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
    1680:	6c e0       	ldi	r22, 0x0C	; 12
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
    1688:	8f e1       	ldi	r24, 0x1F	; 31
    168a:	9e e4       	ldi	r25, 0x4E	; 78
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	f1 f7       	brne	.-4      	; 0x168c <lcd_init+0xaa>
    1690:	00 c0       	rjmp	.+0      	; 0x1692 <lcd_init+0xb0>
    1692:	00 00       	nop
    1694:	08 95       	ret

00001696 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    1696:	8f 92       	push	r8
    1698:	9f 92       	push	r9
    169a:	af 92       	push	r10
    169c:	bf 92       	push	r11
    169e:	cf 92       	push	r12
    16a0:	df 92       	push	r13
    16a2:	ef 92       	push	r14
    16a4:	ff 92       	push	r15
    16a6:	0f 93       	push	r16
    16a8:	1f 93       	push	r17
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	69 97       	sbiw	r28, 0x19	; 25
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	f4 2e       	mov	r15, r20
    16c0:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
    16c2:	00 23       	and	r16, r16
    16c4:	59 f0       	breq	.+22     	; 0x16dc <lcd_int32+0x46>
        bSigned = (qr.quot<0);
    16c6:	4b 01       	movw	r8, r22
    16c8:	5c 01       	movw	r10, r24
    16ca:	88 24       	eor	r8, r8
    16cc:	b7 fc       	sbrc	r11, 7
    16ce:	83 94       	inc	r8
    16d0:	99 24       	eor	r9, r9
    16d2:	aa 24       	eor	r10, r10
    16d4:	bb 24       	eor	r11, r11
    16d6:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
    16d8:	97 fd       	sbrc	r25, 7
    16da:	8f c0       	rjmp	.+286    	; 0x17fa <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    16dc:	11 23       	and	r17, r17
    16de:	09 f4       	brne	.+2      	; 0x16e2 <lcd_int32+0x4c>
    16e0:	84 c0       	rjmp	.+264    	; 0x17ea <lcd_int32+0x154>
    16e2:	9e 01       	movw	r18, r28
    16e4:	2f 5f       	subi	r18, 0xFF	; 255
    16e6:	3f 4f       	sbci	r19, 0xFF	; 255
    16e8:	69 01       	movw	r12, r18
    16ea:	59 01       	movw	r10, r18
    16ec:	88 24       	eor	r8, r8
    16ee:	8a 94       	dec	r8
    16f0:	81 0e       	add	r8, r17
    16f2:	91 2c       	mov	r9, r1
    16f4:	3f ef       	ldi	r19, 0xFF	; 255
    16f6:	83 1a       	sub	r8, r19
    16f8:	93 0a       	sbc	r9, r19
    16fa:	8c 0c       	add	r8, r12
    16fc:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    16fe:	2a e0       	ldi	r18, 0x0A	; 10
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__divmodsi4>
    170a:	e6 2f       	mov	r30, r22
    170c:	2a 8b       	std	Y+18, r18	; 0x12
    170e:	3b 8b       	std	Y+19, r19	; 0x13
    1710:	4c 8b       	std	Y+20, r20	; 0x14
    1712:	5d 8b       	std	Y+21, r21	; 0x15
    1714:	6a 89       	ldd	r22, Y+18	; 0x12
    1716:	7b 89       	ldd	r23, Y+19	; 0x13
    1718:	8c 89       	ldd	r24, Y+20	; 0x14
    171a:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    171c:	20 e3       	ldi	r18, 0x30	; 48
    171e:	2e 0f       	add	r18, r30
    1720:	f5 01       	movw	r30, r10
    1722:	21 93       	st	Z+, r18
    1724:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    1726:	e8 15       	cp	r30, r8
    1728:	f9 05       	cpc	r31, r9
    172a:	49 f7       	brne	.-46     	; 0x16fe <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    172c:	bb 24       	eor	r11, r11
    172e:	b3 94       	inc	r11
    1730:	b1 0e       	add	r11, r17
    1732:	f6 01       	movw	r30, r12
    1734:	e1 0f       	add	r30, r17
    1736:	f1 1d       	adc	r31, r1
    1738:	2e e2       	ldi	r18, 0x2E	; 46
    173a:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    173c:	2a e0       	ldi	r18, 0x0A	; 10
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	50 e0       	ldi	r21, 0x00	; 0
    1744:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__divmodsi4>
    1748:	e6 2f       	mov	r30, r22
    174a:	2a 8b       	std	Y+18, r18	; 0x12
    174c:	3b 8b       	std	Y+19, r19	; 0x13
    174e:	4c 8b       	std	Y+20, r20	; 0x14
    1750:	5d 8b       	std	Y+21, r21	; 0x15
    1752:	6e 8b       	std	Y+22, r22	; 0x16
    1754:	7f 8b       	std	Y+23, r23	; 0x17
    1756:	88 8f       	std	Y+24, r24	; 0x18
    1758:	99 8f       	std	Y+25, r25	; 0x19
    175a:	6a 89       	ldd	r22, Y+18	; 0x12
    175c:	7b 89       	ldd	r23, Y+19	; 0x13
    175e:	8c 89       	ldd	r24, Y+20	; 0x14
    1760:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1762:	11 e0       	ldi	r17, 0x01	; 1
    1764:	1b 0d       	add	r17, r11
    1766:	d6 01       	movw	r26, r12
    1768:	ab 0d       	add	r26, r11
    176a:	b1 1d       	adc	r27, r1
    176c:	e0 5d       	subi	r30, 0xD0	; 208
    176e:	ec 93       	st	X, r30
    1770:	b1 2e       	mov	r11, r17
        }while(qr.quot);
    1772:	61 15       	cp	r22, r1
    1774:	71 05       	cpc	r23, r1
    1776:	81 05       	cpc	r24, r1
    1778:	91 05       	cpc	r25, r1
    177a:	01 f7       	brne	.-64     	; 0x173c <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
    177c:	ff 20       	and	r15, r15
    177e:	61 f0       	breq	.+24     	; 0x1798 <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1780:	e1 10       	cpse	r14, r1
    1782:	39 c0       	rjmp	.+114    	; 0x17f6 <lcd_int32+0x160>
    1784:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    1786:	1f 15       	cp	r17, r15
    1788:	38 f4       	brcc	.+14     	; 0x1798 <lcd_int32+0x102>
    178a:	f6 01       	movw	r30, r12
    178c:	e1 0f       	add	r30, r17
    178e:	f1 1d       	adc	r31, r1
    1790:	80 83       	st	Z, r24
    1792:	1f 5f       	subi	r17, 0xFF	; 255
    1794:	1f 11       	cpse	r17, r15
    1796:	f9 cf       	rjmp	.-14     	; 0x178a <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    1798:	00 23       	and	r16, r16
    179a:	31 f0       	breq	.+12     	; 0x17a8 <lcd_int32+0x112>
    179c:	f6 01       	movw	r30, r12
    179e:	e1 0f       	add	r30, r17
    17a0:	f1 1d       	adc	r31, r1
    17a2:	8d e2       	ldi	r24, 0x2D	; 45
    17a4:	80 83       	st	Z, r24
    17a6:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    17a8:	11 50       	subi	r17, 0x01	; 1
    17aa:	f6 01       	movw	r30, r12
    17ac:	e1 0f       	add	r30, r17
    17ae:	f1 1d       	adc	r31, r1
    17b0:	60 81       	ld	r22, Z
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17b8:	35 ed       	ldi	r19, 0xD5	; 213
    17ba:	3a 95       	dec	r19
    17bc:	f1 f7       	brne	.-4      	; 0x17ba <lcd_int32+0x124>
    17be:	00 00       	nop
    17c0:	11 11       	cpse	r17, r1
    17c2:	f2 cf       	rjmp	.-28     	; 0x17a8 <lcd_int32+0x112>

}
    17c4:	69 96       	adiw	r28, 0x19	; 25
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	ff 90       	pop	r15
    17da:	ef 90       	pop	r14
    17dc:	df 90       	pop	r13
    17de:	cf 90       	pop	r12
    17e0:	bf 90       	pop	r11
    17e2:	af 90       	pop	r10
    17e4:	9f 90       	pop	r9
    17e6:	8f 90       	pop	r8
    17e8:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    17ea:	b1 2c       	mov	r11, r1
    17ec:	9e 01       	movw	r18, r28
    17ee:	2f 5f       	subi	r18, 0xFF	; 255
    17f0:	3f 4f       	sbci	r19, 0xFF	; 255
    17f2:	69 01       	movw	r12, r18
    17f4:	a3 cf       	rjmp	.-186    	; 0x173c <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    17f6:	80 e3       	ldi	r24, 0x30	; 48
    17f8:	c6 cf       	rjmp	.-116    	; 0x1786 <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    17fa:	90 95       	com	r25
    17fc:	80 95       	com	r24
    17fe:	70 95       	com	r23
    1800:	61 95       	neg	r22
    1802:	7f 4f       	sbci	r23, 0xFF	; 255
    1804:	8f 4f       	sbci	r24, 0xFF	; 255
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	69 cf       	rjmp	.-302    	; 0x16dc <lcd_int32+0x46>

0000180a <lcd_int16>:
    180a:	5f 92       	push	r5
    180c:	6f 92       	push	r6
    180e:	7f 92       	push	r7
    1810:	8f 92       	push	r8
    1812:	9f 92       	push	r9
    1814:	af 92       	push	r10
    1816:	bf 92       	push	r11
    1818:	cf 92       	push	r12
    181a:	df 92       	push	r13
    181c:	ef 92       	push	r14
    181e:	ff 92       	push	r15
    1820:	0f 93       	push	r16
    1822:	1f 93       	push	r17
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	61 97       	sbiw	r28, 0x11	; 17
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	a6 2e       	mov	r10, r22
    183a:	54 2e       	mov	r5, r20
    183c:	62 2e       	mov	r6, r18
    183e:	79 2e       	mov	r7, r25
    1840:	77 1c       	adc	r7, r7
    1842:	77 24       	eor	r7, r7
    1844:	77 1c       	adc	r7, r7
    1846:	b7 2c       	mov	r11, r7
    1848:	c7 2c       	mov	r12, r7
    184a:	d1 2c       	mov	r13, r1
    184c:	ee 27       	eor	r30, r30
    184e:	ff 27       	eor	r31, r31
    1850:	ec 19       	sub	r30, r12
    1852:	fd 09       	sbc	r31, r13
    1854:	8e 27       	eor	r24, r30
    1856:	9f 27       	eor	r25, r31
    1858:	fc 01       	movw	r30, r24
    185a:	ec 0d       	add	r30, r12
    185c:	fd 1d       	adc	r31, r13
    185e:	44 23       	and	r20, r20
    1860:	09 f4       	brne	.+2      	; 0x1864 <lcd_int16+0x5a>
    1862:	8e c0       	rjmp	.+284    	; 0x1980 <lcd_int16+0x176>
    1864:	ce 01       	movw	r24, r28
    1866:	01 96       	adiw	r24, 0x01	; 1
    1868:	7c 01       	movw	r14, r24
    186a:	8c 01       	movw	r16, r24
    186c:	88 24       	eor	r8, r8
    186e:	8a 94       	dec	r8
    1870:	84 0e       	add	r8, r20
    1872:	91 2c       	mov	r9, r1
    1874:	9f ef       	ldi	r25, 0xFF	; 255
    1876:	89 1a       	sub	r8, r25
    1878:	99 0a       	sbc	r9, r25
    187a:	8e 0c       	add	r8, r14
    187c:	9f 1c       	adc	r9, r15
    187e:	6a e0       	ldi	r22, 0x0A	; 10
    1880:	70 e0       	ldi	r23, 0x00	; 0
    1882:	cf 01       	movw	r24, r30
    1884:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__divmodhi4>
    1888:	26 2f       	mov	r18, r22
    188a:	e2 2f       	mov	r30, r18
    188c:	f7 2f       	mov	r31, r23
    188e:	80 5d       	subi	r24, 0xD0	; 208
    1890:	d8 01       	movw	r26, r16
    1892:	8d 93       	st	X+, r24
    1894:	8d 01       	movw	r16, r26
    1896:	a8 15       	cp	r26, r8
    1898:	b9 05       	cpc	r27, r9
    189a:	89 f7       	brne	.-30     	; 0x187e <lcd_int16+0x74>
    189c:	01 e0       	ldi	r16, 0x01	; 1
    189e:	05 0d       	add	r16, r5
    18a0:	d7 01       	movw	r26, r14
    18a2:	a5 0d       	add	r26, r5
    18a4:	b1 1d       	adc	r27, r1
    18a6:	8e e2       	ldi	r24, 0x2E	; 46
    18a8:	8c 93       	st	X, r24
    18aa:	6a e0       	ldi	r22, 0x0A	; 10
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	cf 01       	movw	r24, r30
    18b0:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__divmodhi4>
    18b4:	26 2f       	mov	r18, r22
    18b6:	e2 2f       	mov	r30, r18
    18b8:	f7 2f       	mov	r31, r23
    18ba:	11 e0       	ldi	r17, 0x01	; 1
    18bc:	10 0f       	add	r17, r16
    18be:	d7 01       	movw	r26, r14
    18c0:	a0 0f       	add	r26, r16
    18c2:	b1 1d       	adc	r27, r1
    18c4:	80 5d       	subi	r24, 0xD0	; 208
    18c6:	8c 93       	st	X, r24
    18c8:	01 2f       	mov	r16, r17
    18ca:	30 97       	sbiw	r30, 0x00	; 0
    18cc:	71 f7       	brne	.-36     	; 0x18aa <lcd_int16+0xa0>
    18ce:	61 10       	cpse	r6, r1
    18d0:	15 c0       	rjmp	.+42     	; 0x18fc <lcd_int16+0xf2>
    18d2:	77 20       	and	r7, r7
    18d4:	39 f0       	breq	.+14     	; 0x18e4 <lcd_int16+0xda>
    18d6:	11 e0       	ldi	r17, 0x01	; 1
    18d8:	10 0f       	add	r17, r16
    18da:	f7 01       	movw	r30, r14
    18dc:	e0 0f       	add	r30, r16
    18de:	f1 1d       	adc	r31, r1
    18e0:	8d e2       	ldi	r24, 0x2D	; 45
    18e2:	80 83       	st	Z, r24
    18e4:	aa 20       	and	r10, r10
    18e6:	41 f1       	breq	.+80     	; 0x1938 <lcd_int16+0x12e>
    18e8:	81 2f       	mov	r24, r17
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	2a 2d       	mov	r18, r10
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	82 17       	cp	r24, r18
    18f2:	93 07       	cpc	r25, r19
    18f4:	0c f5       	brge	.+66     	; 0x1938 <lcd_int16+0x12e>
    18f6:	b1 2c       	mov	r11, r1
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	0c c0       	rjmp	.+24     	; 0x1914 <lcd_int16+0x10a>
    18fc:	aa 20       	and	r10, r10
    18fe:	a1 f0       	breq	.+40     	; 0x1928 <lcd_int16+0x11e>
    1900:	81 2f       	mov	r24, r17
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	2a 2d       	mov	r18, r10
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	2c 19       	sub	r18, r12
    190a:	3d 09       	sbc	r19, r13
    190c:	82 17       	cp	r24, r18
    190e:	93 07       	cpc	r25, r19
    1910:	5c f4       	brge	.+22     	; 0x1928 <lcd_int16+0x11e>
    1912:	40 e3       	ldi	r20, 0x30	; 48
    1914:	1f 5f       	subi	r17, 0xFF	; 255
    1916:	f7 01       	movw	r30, r14
    1918:	e8 0f       	add	r30, r24
    191a:	f9 1f       	adc	r31, r25
    191c:	40 83       	st	Z, r20
    191e:	81 2f       	mov	r24, r17
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	82 17       	cp	r24, r18
    1924:	93 07       	cpc	r25, r19
    1926:	b4 f3       	brlt	.-20     	; 0x1914 <lcd_int16+0x10a>
    1928:	bb 20       	and	r11, r11
    192a:	31 f0       	breq	.+12     	; 0x1938 <lcd_int16+0x12e>
    192c:	f7 01       	movw	r30, r14
    192e:	e1 0f       	add	r30, r17
    1930:	f1 1d       	adc	r31, r1
    1932:	8d e2       	ldi	r24, 0x2D	; 45
    1934:	80 83       	st	Z, r24
    1936:	1f 5f       	subi	r17, 0xFF	; 255
    1938:	11 50       	subi	r17, 0x01	; 1
    193a:	f7 01       	movw	r30, r14
    193c:	e1 0f       	add	r30, r17
    193e:	f1 1d       	adc	r31, r1
    1940:	60 81       	ld	r22, Z
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	0e 94 b7 09 	call	0x136e	; 0x136e <send_lcd>
    1948:	95 ed       	ldi	r25, 0xD5	; 213
    194a:	9a 95       	dec	r25
    194c:	f1 f7       	brne	.-4      	; 0x194a <lcd_int16+0x140>
    194e:	00 00       	nop
    1950:	11 11       	cpse	r17, r1
    1952:	f2 cf       	rjmp	.-28     	; 0x1938 <lcd_int16+0x12e>
    1954:	61 96       	adiw	r28, 0x11	; 17
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	1f 91       	pop	r17
    1966:	0f 91       	pop	r16
    1968:	ff 90       	pop	r15
    196a:	ef 90       	pop	r14
    196c:	df 90       	pop	r13
    196e:	cf 90       	pop	r12
    1970:	bf 90       	pop	r11
    1972:	af 90       	pop	r10
    1974:	9f 90       	pop	r9
    1976:	8f 90       	pop	r8
    1978:	7f 90       	pop	r7
    197a:	6f 90       	pop	r6
    197c:	5f 90       	pop	r5
    197e:	08 95       	ret
    1980:	00 e0       	ldi	r16, 0x00	; 0
    1982:	ce 01       	movw	r24, r28
    1984:	01 96       	adiw	r24, 0x01	; 1
    1986:	7c 01       	movw	r14, r24
    1988:	90 cf       	rjmp	.-224    	; 0x18aa <lcd_int16+0xa0>

0000198a <main>:
    198a:	80 91 61 00 	lds	r24, 0x0061
    198e:	88 60       	ori	r24, 0x08	; 8
    1990:	80 93 61 00 	sts	0x0061, r24
    1994:	81 e8       	ldi	r24, 0x81	; 129
    1996:	81 bb       	out	0x11, r24	; 17
    1998:	8f ef       	ldi	r24, 0xFF	; 255
    199a:	82 b9       	out	0x02, r24	; 2
    199c:	80 91 8b 00 	lds	r24, 0x008B
    19a0:	82 6c       	ori	r24, 0xC2	; 194
    19a2:	80 93 8b 00 	sts	0x008B, r24
    19a6:	80 91 8a 00 	lds	r24, 0x008A
    19aa:	89 61       	ori	r24, 0x19	; 25
    19ac:	80 93 8a 00 	sts	0x008A, r24
    19b0:	10 92 8c 00 	sts	0x008C, r1
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e9       	ldi	r25, 0x90	; 144
    19b8:	90 93 87 00 	sts	0x0087, r25
    19bc:	80 93 86 00 	sts	0x0086, r24
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	90 ef       	ldi	r25, 0xF0	; 240
    19c4:	90 93 81 00 	sts	0x0081, r25
    19c8:	80 93 80 00 	sts	0x0080, r24
    19cc:	0e 94 81 09 	call	0x1302	; 0x1302 <uart_init>
    19d0:	0e 94 3f 02 	call	0x47e	; 0x47e <spi_init>
    19d4:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <lcd_init>
    19d8:	0e 94 8f 06 	call	0xd1e	; 0xd1e <init_twi>
    19dc:	0e 94 f7 04 	call	0x9ee	; 0x9ee <tcnt0_init>
    19e0:	1f bc       	out	0x2f, r1	; 47
    19e2:	8a e0       	ldi	r24, 0x0A	; 10
    19e4:	8e bd       	out	0x2e, r24	; 46
    19e6:	10 92 7a 00 	sts	0x007A, r1
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	92 e0       	ldi	r25, 0x02	; 2
    19ee:	9b bd       	out	0x2b, r25	; 43
    19f0:	8a bd       	out	0x2a, r24	; 42
    19f2:	87 b7       	in	r24, 0x37	; 55
    19f4:	80 61       	ori	r24, 0x10	; 16
    19f6:	87 bf       	out	0x37, r24	; 55
    19f8:	12 9a       	sbi	0x02, 2	; 2
    19fa:	1a 9a       	sbi	0x03, 2	; 3
    19fc:	1f 98       	cbi	0x03, 7	; 3
    19fe:	17 9a       	sbi	0x02, 7	; 2
    1a00:	1a 9a       	sbi	0x03, 2	; 3
    1a02:	8f e1       	ldi	r24, 0x1F	; 31
    1a04:	93 e0       	ldi	r25, 0x03	; 3
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <main+0x7c>
    1a0a:	00 c0       	rjmp	.+0      	; 0x1a0c <main+0x82>
    1a0c:	00 00       	nop
    1a0e:	1a 98       	cbi	0x03, 2	; 3
    1a10:	90 ea       	ldi	r25, 0xA0	; 160
    1a12:	9a 95       	dec	r25
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <main+0x88>
    1a16:	17 98       	cbi	0x02, 7	; 2
    1a18:	78 94       	sei
    1a1a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <fm_pwr_up>
    1a1e:	86 eb       	ldi	r24, 0xB6	; 182
    1a20:	96 e2       	ldi	r25, 0x26	; 38
    1a22:	90 93 17 01 	sts	0x0117, r25
    1a26:	80 93 16 01 	sts	0x0116, r24
    1a2a:	80 91 61 00 	lds	r24, 0x0061
    1a2e:	8f 77       	andi	r24, 0x7F	; 127
    1a30:	80 93 61 00 	sts	0x0061, r24
    1a34:	80 91 62 00 	lds	r24, 0x0062
    1a38:	8f 77       	andi	r24, 0x7F	; 127
    1a3a:	80 93 62 00 	sts	0x0062, r24
    1a3e:	87 b1       	in	r24, 0x07	; 7
    1a40:	87 64       	ori	r24, 0x47	; 71
    1a42:	87 b9       	out	0x07, r24	; 7
    1a44:	86 b1       	in	r24, 0x06	; 6
    1a46:	87 68       	ori	r24, 0x87	; 135
    1a48:	86 b9       	out	0x06, r24	; 6
    1a4a:	10 92 5f 03 	sts	0x035F, r1
    1a4e:	41 e0       	ldi	r20, 0x01	; 1
    1a50:	6f e5       	ldi	r22, 0x5F	; 95
    1a52:	73 e0       	ldi	r23, 0x03	; 3
    1a54:	80 e9       	ldi	r24, 0x90	; 144
    1a56:	0e 94 6d 06 	call	0xcda	; 0xcda <twi_start_wr>
    1a5a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <clear_display>
    1a5e:	c1 e8       	ldi	r28, 0x81	; 129
    1a60:	d0 e0       	ldi	r29, 0x00	; 0
    1a62:	4b e2       	ldi	r20, 0x2B	; 43
    1a64:	c4 2e       	mov	r12, r20
    1a66:	56 e5       	ldi	r21, 0x56	; 86
    1a68:	d5 2e       	mov	r13, r21
    1a6a:	61 e8       	ldi	r22, 0x81	; 129
    1a6c:	e6 2e       	mov	r14, r22
    1a6e:	7c ea       	ldi	r23, 0xAC	; 172
    1a70:	f7 2e       	mov	r15, r23
    1a72:	07 ed       	ldi	r16, 0xD7	; 215
    1a74:	1f ef       	ldi	r17, 0xFF	; 255
    1a76:	80 91 20 02 	lds	r24, 0x0220
    1a7a:	85 30       	cpi	r24, 0x05	; 5
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <main+0xf6>
    1a7e:	e1 c0       	rjmp	.+450    	; 0x1c42 <main+0x2b8>
    1a80:	42 e0       	ldi	r20, 0x02	; 2
    1a82:	61 e6       	ldi	r22, 0x61	; 97
    1a84:	73 e0       	ldi	r23, 0x03	; 3
    1a86:	80 e9       	ldi	r24, 0x90	; 144
    1a88:	0e 94 7e 06 	call	0xcfc	; 0xcfc <twi_start_rd>
    1a8c:	80 91 61 03 	lds	r24, 0x0361
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	98 2f       	mov	r25, r24
    1a94:	88 27       	eor	r24, r24
    1a96:	20 91 62 03 	lds	r18, 0x0362
    1a9a:	82 2b       	or	r24, r18
    1a9c:	4a e0       	ldi	r20, 0x0A	; 10
    1a9e:	6f e2       	ldi	r22, 0x2F	; 47
    1aa0:	73 e0       	ldi	r23, 0x03	; 3
    1aa2:	88 0f       	add	r24, r24
    1aa4:	89 2f       	mov	r24, r25
    1aa6:	88 1f       	adc	r24, r24
    1aa8:	99 0b       	sbc	r25, r25
    1aaa:	91 95       	neg	r25
    1aac:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__itoa_ncheck>
    1ab0:	36 9a       	sbi	0x06, 6	; 6
    1ab2:	34 9b       	sbis	0x06, 4	; 6
    1ab4:	fe cf       	rjmp	.-4      	; 0x1ab2 <main+0x128>
    1ab6:	34 9a       	sbi	0x06, 4	; 6
    1ab8:	84 b1       	in	r24, 0x04	; 4
    1aba:	95 b1       	in	r25, 0x05	; 5
    1abc:	90 93 71 02 	sts	0x0271, r25
    1ac0:	80 93 70 02 	sts	0x0270, r24
    1ac4:	9c 01       	movw	r18, r24
    1ac6:	25 5d       	subi	r18, 0xD5	; 213
    1ac8:	33 40       	sbci	r19, 0x03	; 3
    1aca:	2a 32       	cpi	r18, 0x2A	; 42
    1acc:	31 05       	cpc	r19, r1
    1ace:	40 f4       	brcc	.+16     	; 0x1ae0 <main+0x156>
    1ad0:	85 b5       	in	r24, 0x25	; 37
    1ad2:	81 66       	ori	r24, 0x61	; 97
    1ad4:	85 bd       	out	0x25, r24	; 37
    1ad6:	13 bc       	out	0x23, r1	; 35
    1ad8:	80 91 70 02 	lds	r24, 0x0270
    1adc:	90 91 71 02 	lds	r25, 0x0271
    1ae0:	9c 01       	movw	r18, r24
    1ae2:	2a 5a       	subi	r18, 0xAA	; 170
    1ae4:	33 40       	sbci	r19, 0x03	; 3
    1ae6:	2a 32       	cpi	r18, 0x2A	; 42
    1ae8:	31 05       	cpc	r19, r1
    1aea:	40 f4       	brcc	.+16     	; 0x1afc <main+0x172>
    1aec:	85 b5       	in	r24, 0x25	; 37
    1aee:	81 66       	ori	r24, 0x61	; 97
    1af0:	85 bd       	out	0x25, r24	; 37
    1af2:	c3 bc       	out	0x23, r12	; 35
    1af4:	80 91 70 02 	lds	r24, 0x0270
    1af8:	90 91 71 02 	lds	r25, 0x0271
    1afc:	9c 01       	movw	r18, r24
    1afe:	2a 57       	subi	r18, 0x7A	; 122
    1b00:	33 40       	sbci	r19, 0x03	; 3
    1b02:	2f 32       	cpi	r18, 0x2F	; 47
    1b04:	31 05       	cpc	r19, r1
    1b06:	40 f4       	brcc	.+16     	; 0x1b18 <main+0x18e>
    1b08:	85 b5       	in	r24, 0x25	; 37
    1b0a:	81 66       	ori	r24, 0x61	; 97
    1b0c:	85 bd       	out	0x25, r24	; 37
    1b0e:	d3 bc       	out	0x23, r13	; 35
    1b10:	80 91 70 02 	lds	r24, 0x0270
    1b14:	90 91 71 02 	lds	r25, 0x0271
    1b18:	9c 01       	movw	r18, r24
    1b1a:	24 55       	subi	r18, 0x54	; 84
    1b1c:	33 40       	sbci	r19, 0x03	; 3
    1b1e:	25 32       	cpi	r18, 0x25	; 37
    1b20:	31 05       	cpc	r19, r1
    1b22:	40 f4       	brcc	.+16     	; 0x1b34 <main+0x1aa>
    1b24:	85 b5       	in	r24, 0x25	; 37
    1b26:	81 66       	ori	r24, 0x61	; 97
    1b28:	85 bd       	out	0x25, r24	; 37
    1b2a:	e3 bc       	out	0x23, r14	; 35
    1b2c:	80 91 70 02 	lds	r24, 0x0270
    1b30:	90 91 71 02 	lds	r25, 0x0271
    1b34:	9c 01       	movw	r18, r24
    1b36:	29 52       	subi	r18, 0x29	; 41
    1b38:	33 40       	sbci	r19, 0x03	; 3
    1b3a:	2a 32       	cpi	r18, 0x2A	; 42
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	40 f4       	brcc	.+16     	; 0x1b50 <main+0x1c6>
    1b40:	85 b5       	in	r24, 0x25	; 37
    1b42:	81 66       	ori	r24, 0x61	; 97
    1b44:	85 bd       	out	0x25, r24	; 37
    1b46:	f3 bc       	out	0x23, r15	; 35
    1b48:	80 91 70 02 	lds	r24, 0x0270
    1b4c:	90 91 71 02 	lds	r25, 0x0271
    1b50:	8e 5f       	subi	r24, 0xFE	; 254
    1b52:	92 40       	sbci	r25, 0x02	; 2
    1b54:	8a 97       	sbiw	r24, 0x2a	; 42
    1b56:	20 f4       	brcc	.+8      	; 0x1b60 <main+0x1d6>
    1b58:	85 b5       	in	r24, 0x25	; 37
    1b5a:	81 66       	ori	r24, 0x61	; 97
    1b5c:	85 bd       	out	0x25, r24	; 37
    1b5e:	03 bd       	out	0x23, r16	; 35
    1b60:	0e 94 dd 01 	call	0x3ba	; 0x3ba <button_process>
    1b64:	0e 94 c1 02 	call	0x582	; 0x582 <encoder>
    1b68:	0e 94 b8 00 	call	0x170	; 0x170 <adjust_time>
    1b6c:	80 91 20 02 	lds	r24, 0x0220
    1b70:	83 70       	andi	r24, 0x03	; 3
    1b72:	81 30       	cpi	r24, 0x01	; 1
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <main+0x1ee>
    1b76:	ba c0       	rjmp	.+372    	; 0x1cec <main+0x362>
    1b78:	c0 9a       	sbi	0x18, 0	; 24
    1b7a:	c0 98       	cbi	0x18, 0	; 24
    1b7c:	1a ba       	out	0x1a, r1	; 26
    1b7e:	1b bb       	out	0x1b, r17	; 27
    1b80:	00 00       	nop
    1b82:	00 00       	nop
    1b84:	90 91 20 02 	lds	r25, 0x0220
    1b88:	89 2f       	mov	r24, r25
    1b8a:	87 70       	andi	r24, 0x07	; 7
    1b8c:	b9 f4       	brne	.+46     	; 0x1bbc <main+0x232>
    1b8e:	20 91 22 02 	lds	r18, 0x0222
    1b92:	2a 30       	cpi	r18, 0x0A	; 10
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <main+0x20e>
    1b96:	82 c0       	rjmp	.+260    	; 0x1c9c <main+0x312>
    1b98:	0e 94 9c 0a 	call	0x1538	; 0x1538 <clear_display>
    1b9c:	8f e2       	ldi	r24, 0x2F	; 47
    1b9e:	93 e0       	ldi	r25, 0x03	; 3
    1ba0:	0e 94 cc 0a 	call	0x1598	; 0x1598 <string2lcd>
    1ba4:	80 91 14 01 	lds	r24, 0x0114
    1ba8:	90 91 15 01 	lds	r25, 0x0115
    1bac:	0e 94 50 02 	call	0x4a0	; 0x4a0 <segsum>
    1bb0:	10 92 22 02 	sts	0x0222, r1
    1bb4:	90 91 20 02 	lds	r25, 0x0220
    1bb8:	89 2f       	mov	r24, r25
    1bba:	87 70       	andi	r24, 0x07	; 7
    1bbc:	83 30       	cpi	r24, 0x03	; 3
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <main+0x238>
    1bc0:	8c c0       	rjmp	.+280    	; 0x1cda <main+0x350>
    1bc2:	40 91 12 01 	lds	r20, 0x0112
    1bc6:	50 91 13 01 	lds	r21, 0x0113
    1bca:	20 91 14 01 	lds	r18, 0x0114
    1bce:	30 91 15 01 	lds	r19, 0x0115
    1bd2:	42 17       	cp	r20, r18
    1bd4:	53 07       	cpc	r21, r19
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <main+0x250>
    1bd8:	6d c0       	rjmp	.+218    	; 0x1cb4 <main+0x32a>
    1bda:	80 91 22 02 	lds	r24, 0x0222
    1bde:	8a 30       	cpi	r24, 0x0A	; 10
    1be0:	08 f4       	brcc	.+2      	; 0x1be4 <main+0x25a>
    1be2:	40 c0       	rjmp	.+128    	; 0x1c64 <main+0x2da>
    1be4:	89 2f       	mov	r24, r25
    1be6:	87 70       	andi	r24, 0x07	; 7
    1be8:	83 30       	cpi	r24, 0x03	; 3
    1bea:	09 f4       	brne	.+2      	; 0x1bee <main+0x264>
    1bec:	86 c0       	rjmp	.+268    	; 0x1cfa <main+0x370>
    1bee:	84 30       	cpi	r24, 0x04	; 4
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <main+0x26a>
    1bf2:	3d c0       	rjmp	.+122    	; 0x1c6e <main+0x2e4>
    1bf4:	86 30       	cpi	r24, 0x06	; 6
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <main+0x270>
    1bf8:	48 c0       	rjmp	.+144    	; 0x1c8a <main+0x300>
    1bfa:	1a bb       	out	0x1a, r17	; 26
    1bfc:	00 00       	nop
    1bfe:	00 00       	nop
    1c00:	10 92 21 02 	sts	0x0221, r1
    1c04:	e0 e0       	ldi	r30, 0x00	; 0
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	e3 5f       	subi	r30, 0xF3	; 243
    1c0a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c0c:	80 81       	ld	r24, Z
    1c0e:	88 bb       	out	0x18, r24	; 24
    1c10:	e0 91 21 02 	lds	r30, 0x0221
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	ec 55       	subi	r30, 0x5C	; 92
    1c18:	fd 4f       	sbci	r31, 0xFD	; 253
    1c1a:	80 81       	ld	r24, Z
    1c1c:	8b bb       	out	0x1b, r24	; 27
    1c1e:	8f e9       	ldi	r24, 0x9F	; 159
    1c20:	9f e0       	ldi	r25, 0x0F	; 15
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	f1 f7       	brne	.-4      	; 0x1c22 <main+0x298>
    1c26:	00 c0       	rjmp	.+0      	; 0x1c28 <main+0x29e>
    1c28:	00 00       	nop
    1c2a:	e0 91 21 02 	lds	r30, 0x0221
    1c2e:	ef 5f       	subi	r30, 0xFF	; 255
    1c30:	e0 93 21 02 	sts	0x0221, r30
    1c34:	e5 30       	cpi	r30, 0x05	; 5
    1c36:	38 f3       	brcs	.-50     	; 0x1c06 <main+0x27c>
    1c38:	80 91 20 02 	lds	r24, 0x0220
    1c3c:	85 30       	cpi	r24, 0x05	; 5
    1c3e:	09 f0       	breq	.+2      	; 0x1c42 <main+0x2b8>
    1c40:	1f cf       	rjmp	.-450    	; 0x1a80 <main+0xf6>
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	0e 94 28 0a 	call	0x1450	; 0x1450 <set_cursor>
    1c4a:	d0 93 13 01 	sts	0x0113, r29
    1c4e:	c0 93 12 01 	sts	0x0112, r28
    1c52:	80 91 14 01 	lds	r24, 0x0114
    1c56:	90 91 15 01 	lds	r25, 0x0115
    1c5a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <segsum>
    1c5e:	00 00       	nop
    1c60:	00 00       	nop
    1c62:	0e cf       	rjmp	.-484    	; 0x1a80 <main+0xf6>
    1c64:	89 2f       	mov	r24, r25
    1c66:	87 70       	andi	r24, 0x07	; 7
    1c68:	84 30       	cpi	r24, 0x04	; 4
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <main+0x2e4>
    1c6c:	c3 cf       	rjmp	.-122    	; 0x1bf4 <main+0x26a>
    1c6e:	80 91 16 01 	lds	r24, 0x0116
    1c72:	90 91 17 01 	lds	r25, 0x0117
    1c76:	0e 94 50 02 	call	0x4a0	; 0x4a0 <segsum>
    1c7a:	0e 94 45 03 	call	0x68a	; 0x68a <set_freq>
    1c7e:	80 91 20 02 	lds	r24, 0x0220
    1c82:	87 70       	andi	r24, 0x07	; 7
    1c84:	86 30       	cpi	r24, 0x06	; 6
    1c86:	09 f0       	breq	.+2      	; 0x1c8a <main+0x300>
    1c88:	b8 cf       	rjmp	.-144    	; 0x1bfa <main+0x270>
    1c8a:	0e 94 b8 06 	call	0xd70	; 0xd70 <fm_tune_freq>
    1c8e:	8f e9       	ldi	r24, 0x9F	; 159
    1c90:	9f e0       	ldi	r25, 0x0F	; 15
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <main+0x308>
    1c96:	00 c0       	rjmp	.+0      	; 0x1c98 <main+0x30e>
    1c98:	00 00       	nop
    1c9a:	af cf       	rjmp	.-162    	; 0x1bfa <main+0x270>
    1c9c:	40 91 12 01 	lds	r20, 0x0112
    1ca0:	50 91 13 01 	lds	r21, 0x0113
    1ca4:	20 91 14 01 	lds	r18, 0x0114
    1ca8:	30 91 15 01 	lds	r19, 0x0115
    1cac:	42 17       	cp	r20, r18
    1cae:	53 07       	cpc	r21, r19
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <main+0x32a>
    1cb2:	9a cf       	rjmp	.-204    	; 0x1be8 <main+0x25e>
    1cb4:	89 2f       	mov	r24, r25
    1cb6:	83 70       	andi	r24, 0x03	; 3
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <main+0x332>
    1cba:	8f cf       	rjmp	.-226    	; 0x1bda <main+0x250>
    1cbc:	0e 94 9c 0a 	call	0x1538	; 0x1538 <clear_display>
    1cc0:	88 e1       	ldi	r24, 0x18	; 24
    1cc2:	91 e0       	ldi	r25, 0x01	; 1
    1cc4:	0e 94 cc 0a 	call	0x1598	; 0x1598 <string2lcd>
    1cc8:	80 91 14 01 	lds	r24, 0x0114
    1ccc:	90 91 15 01 	lds	r25, 0x0115
    1cd0:	0e 94 c5 03 	call	0x78a	; 0x78a <segsum1>
    1cd4:	90 91 20 02 	lds	r25, 0x0220
    1cd8:	80 cf       	rjmp	.-256    	; 0x1bda <main+0x250>
    1cda:	80 91 14 01 	lds	r24, 0x0114
    1cde:	90 91 15 01 	lds	r25, 0x0115
    1ce2:	0e 94 50 02 	call	0x4a0	; 0x4a0 <segsum>
    1ce6:	90 91 20 02 	lds	r25, 0x0220
    1cea:	6b cf       	rjmp	.-298    	; 0x1bc2 <main+0x238>
    1cec:	80 91 12 01 	lds	r24, 0x0112
    1cf0:	90 91 13 01 	lds	r25, 0x0113
    1cf4:	0e 94 39 04 	call	0x872	; 0x872 <segsum2>
    1cf8:	3f cf       	rjmp	.-386    	; 0x1b78 <main+0x1ee>
    1cfa:	80 91 14 01 	lds	r24, 0x0114
    1cfe:	90 91 15 01 	lds	r25, 0x0115
    1d02:	0e 94 50 02 	call	0x4a0	; 0x4a0 <segsum>
    1d06:	80 91 20 02 	lds	r24, 0x0220
    1d0a:	87 70       	andi	r24, 0x07	; 7
    1d0c:	70 cf       	rjmp	.-288    	; 0x1bee <main+0x264>

00001d0e <__divmodhi4>:
    1d0e:	97 fb       	bst	r25, 7
    1d10:	07 2e       	mov	r0, r23
    1d12:	16 f4       	brtc	.+4      	; 0x1d18 <__divmodhi4+0xa>
    1d14:	00 94       	com	r0
    1d16:	07 d0       	rcall	.+14     	; 0x1d26 <__divmodhi4_neg1>
    1d18:	77 fd       	sbrc	r23, 7
    1d1a:	09 d0       	rcall	.+18     	; 0x1d2e <__divmodhi4_neg2>
    1d1c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__udivmodhi4>
    1d20:	07 fc       	sbrc	r0, 7
    1d22:	05 d0       	rcall	.+10     	; 0x1d2e <__divmodhi4_neg2>
    1d24:	3e f4       	brtc	.+14     	; 0x1d34 <__divmodhi4_exit>

00001d26 <__divmodhi4_neg1>:
    1d26:	90 95       	com	r25
    1d28:	81 95       	neg	r24
    1d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2c:	08 95       	ret

00001d2e <__divmodhi4_neg2>:
    1d2e:	70 95       	com	r23
    1d30:	61 95       	neg	r22
    1d32:	7f 4f       	sbci	r23, 0xFF	; 255

00001d34 <__divmodhi4_exit>:
    1d34:	08 95       	ret

00001d36 <__divmodsi4>:
    1d36:	05 2e       	mov	r0, r21
    1d38:	97 fb       	bst	r25, 7
    1d3a:	1e f4       	brtc	.+6      	; 0x1d42 <__divmodsi4+0xc>
    1d3c:	00 94       	com	r0
    1d3e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__negsi2>
    1d42:	57 fd       	sbrc	r21, 7
    1d44:	07 d0       	rcall	.+14     	; 0x1d54 <__divmodsi4_neg2>
    1d46:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__udivmodsi4>
    1d4a:	07 fc       	sbrc	r0, 7
    1d4c:	03 d0       	rcall	.+6      	; 0x1d54 <__divmodsi4_neg2>
    1d4e:	4e f4       	brtc	.+18     	; 0x1d62 <__divmodsi4_exit>
    1d50:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__negsi2>

00001d54 <__divmodsi4_neg2>:
    1d54:	50 95       	com	r21
    1d56:	40 95       	com	r20
    1d58:	30 95       	com	r19
    1d5a:	21 95       	neg	r18
    1d5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5e:	4f 4f       	sbci	r20, 0xFF	; 255
    1d60:	5f 4f       	sbci	r21, 0xFF	; 255

00001d62 <__divmodsi4_exit>:
    1d62:	08 95       	ret

00001d64 <__negsi2>:
    1d64:	90 95       	com	r25
    1d66:	80 95       	com	r24
    1d68:	70 95       	com	r23
    1d6a:	61 95       	neg	r22
    1d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d70:	9f 4f       	sbci	r25, 0xFF	; 255
    1d72:	08 95       	ret

00001d74 <__tablejump2__>:
    1d74:	ee 0f       	add	r30, r30
    1d76:	ff 1f       	adc	r31, r31
    1d78:	00 24       	eor	r0, r0
    1d7a:	00 1c       	adc	r0, r0
    1d7c:	0b be       	out	0x3b, r0	; 59
    1d7e:	07 90       	elpm	r0, Z+
    1d80:	f6 91       	elpm	r31, Z
    1d82:	e0 2d       	mov	r30, r0
    1d84:	09 94       	ijmp

00001d86 <__umulhisi3>:
    1d86:	a2 9f       	mul	r26, r18
    1d88:	b0 01       	movw	r22, r0
    1d8a:	b3 9f       	mul	r27, r19
    1d8c:	c0 01       	movw	r24, r0
    1d8e:	a3 9f       	mul	r26, r19
    1d90:	70 0d       	add	r23, r0
    1d92:	81 1d       	adc	r24, r1
    1d94:	11 24       	eor	r1, r1
    1d96:	91 1d       	adc	r25, r1
    1d98:	b2 9f       	mul	r27, r18
    1d9a:	70 0d       	add	r23, r0
    1d9c:	81 1d       	adc	r24, r1
    1d9e:	11 24       	eor	r1, r1
    1da0:	91 1d       	adc	r25, r1
    1da2:	08 95       	ret

00001da4 <__udivmodhi4>:
    1da4:	aa 1b       	sub	r26, r26
    1da6:	bb 1b       	sub	r27, r27
    1da8:	51 e1       	ldi	r21, 0x11	; 17
    1daa:	07 c0       	rjmp	.+14     	; 0x1dba <__udivmodhi4_ep>

00001dac <__udivmodhi4_loop>:
    1dac:	aa 1f       	adc	r26, r26
    1dae:	bb 1f       	adc	r27, r27
    1db0:	a6 17       	cp	r26, r22
    1db2:	b7 07       	cpc	r27, r23
    1db4:	10 f0       	brcs	.+4      	; 0x1dba <__udivmodhi4_ep>
    1db6:	a6 1b       	sub	r26, r22
    1db8:	b7 0b       	sbc	r27, r23

00001dba <__udivmodhi4_ep>:
    1dba:	88 1f       	adc	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	5a 95       	dec	r21
    1dc0:	a9 f7       	brne	.-22     	; 0x1dac <__udivmodhi4_loop>
    1dc2:	80 95       	com	r24
    1dc4:	90 95       	com	r25
    1dc6:	bc 01       	movw	r22, r24
    1dc8:	cd 01       	movw	r24, r26
    1dca:	08 95       	ret

00001dcc <__udivmodsi4>:
    1dcc:	a1 e2       	ldi	r26, 0x21	; 33
    1dce:	1a 2e       	mov	r1, r26
    1dd0:	aa 1b       	sub	r26, r26
    1dd2:	bb 1b       	sub	r27, r27
    1dd4:	fd 01       	movw	r30, r26
    1dd6:	0d c0       	rjmp	.+26     	; 0x1df2 <__udivmodsi4_ep>

00001dd8 <__udivmodsi4_loop>:
    1dd8:	aa 1f       	adc	r26, r26
    1dda:	bb 1f       	adc	r27, r27
    1ddc:	ee 1f       	adc	r30, r30
    1dde:	ff 1f       	adc	r31, r31
    1de0:	a2 17       	cp	r26, r18
    1de2:	b3 07       	cpc	r27, r19
    1de4:	e4 07       	cpc	r30, r20
    1de6:	f5 07       	cpc	r31, r21
    1de8:	20 f0       	brcs	.+8      	; 0x1df2 <__udivmodsi4_ep>
    1dea:	a2 1b       	sub	r26, r18
    1dec:	b3 0b       	sbc	r27, r19
    1dee:	e4 0b       	sbc	r30, r20
    1df0:	f5 0b       	sbc	r31, r21

00001df2 <__udivmodsi4_ep>:
    1df2:	66 1f       	adc	r22, r22
    1df4:	77 1f       	adc	r23, r23
    1df6:	88 1f       	adc	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	1a 94       	dec	r1
    1dfc:	69 f7       	brne	.-38     	; 0x1dd8 <__udivmodsi4_loop>
    1dfe:	60 95       	com	r22
    1e00:	70 95       	com	r23
    1e02:	80 95       	com	r24
    1e04:	90 95       	com	r25
    1e06:	9b 01       	movw	r18, r22
    1e08:	ac 01       	movw	r20, r24
    1e0a:	bd 01       	movw	r22, r26
    1e0c:	cf 01       	movw	r24, r30
    1e0e:	08 95       	ret

00001e10 <__itoa_ncheck>:
    1e10:	bb 27       	eor	r27, r27
    1e12:	4a 30       	cpi	r20, 0x0A	; 10
    1e14:	31 f4       	brne	.+12     	; 0x1e22 <__itoa_ncheck+0x12>
    1e16:	99 23       	and	r25, r25
    1e18:	22 f4       	brpl	.+8      	; 0x1e22 <__itoa_ncheck+0x12>
    1e1a:	bd e2       	ldi	r27, 0x2D	; 45
    1e1c:	90 95       	com	r25
    1e1e:	81 95       	neg	r24
    1e20:	9f 4f       	sbci	r25, 0xFF	; 255
    1e22:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__utoa_common>

00001e26 <__utoa_ncheck>:
    1e26:	bb 27       	eor	r27, r27

00001e28 <__utoa_common>:
    1e28:	fb 01       	movw	r30, r22
    1e2a:	55 27       	eor	r21, r21
    1e2c:	aa 27       	eor	r26, r26
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	aa 1f       	adc	r26, r26
    1e34:	a4 17       	cp	r26, r20
    1e36:	10 f0       	brcs	.+4      	; 0x1e3c <__utoa_common+0x14>
    1e38:	a4 1b       	sub	r26, r20
    1e3a:	83 95       	inc	r24
    1e3c:	50 51       	subi	r21, 0x10	; 16
    1e3e:	b9 f7       	brne	.-18     	; 0x1e2e <__utoa_common+0x6>
    1e40:	a0 5d       	subi	r26, 0xD0	; 208
    1e42:	aa 33       	cpi	r26, 0x3A	; 58
    1e44:	08 f0       	brcs	.+2      	; 0x1e48 <__utoa_common+0x20>
    1e46:	a9 5d       	subi	r26, 0xD9	; 217
    1e48:	a1 93       	st	Z+, r26
    1e4a:	00 97       	sbiw	r24, 0x00	; 0
    1e4c:	79 f7       	brne	.-34     	; 0x1e2c <__utoa_common+0x4>
    1e4e:	b1 11       	cpse	r27, r1
    1e50:	b1 93       	st	Z+, r27
    1e52:	11 92       	st	Z+, r1
    1e54:	cb 01       	movw	r24, r22
    1e56:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <strrev>

00001e5a <strrev>:
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	67 2f       	mov	r22, r23
    1e60:	71 91       	ld	r23, Z+
    1e62:	77 23       	and	r23, r23
    1e64:	e1 f7       	brne	.-8      	; 0x1e5e <strrev+0x4>
    1e66:	32 97       	sbiw	r30, 0x02	; 2
    1e68:	04 c0       	rjmp	.+8      	; 0x1e72 <strrev+0x18>
    1e6a:	7c 91       	ld	r23, X
    1e6c:	6d 93       	st	X+, r22
    1e6e:	70 83       	st	Z, r23
    1e70:	62 91       	ld	r22, -Z
    1e72:	ae 17       	cp	r26, r30
    1e74:	bf 07       	cpc	r27, r31
    1e76:	c8 f3       	brcs	.-14     	; 0x1e6a <strrev+0x10>
    1e78:	08 95       	ret

00001e7a <eeprom_read_byte>:
    1e7a:	e1 99       	sbic	0x1c, 1	; 28
    1e7c:	fe cf       	rjmp	.-4      	; 0x1e7a <eeprom_read_byte>
    1e7e:	9f bb       	out	0x1f, r25	; 31
    1e80:	8e bb       	out	0x1e, r24	; 30
    1e82:	e0 9a       	sbi	0x1c, 0	; 28
    1e84:	99 27       	eor	r25, r25
    1e86:	8d b3       	in	r24, 0x1d	; 29
    1e88:	08 95       	ret

00001e8a <eeprom_read_word>:
    1e8a:	a8 e1       	ldi	r26, 0x18	; 24
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	42 e0       	ldi	r20, 0x02	; 2
    1e90:	50 e0       	ldi	r21, 0x00	; 0
    1e92:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <eeprom_read_blraw>

00001e96 <eeprom_write_byte>:
    1e96:	26 2f       	mov	r18, r22

00001e98 <eeprom_write_r18>:
    1e98:	e1 99       	sbic	0x1c, 1	; 28
    1e9a:	fe cf       	rjmp	.-4      	; 0x1e98 <eeprom_write_r18>
    1e9c:	9f bb       	out	0x1f, r25	; 31
    1e9e:	8e bb       	out	0x1e, r24	; 30
    1ea0:	2d bb       	out	0x1d, r18	; 29
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	e2 9a       	sbi	0x1c, 2	; 28
    1ea8:	e1 9a       	sbi	0x1c, 1	; 28
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	01 96       	adiw	r24, 0x01	; 1
    1eae:	08 95       	ret

00001eb0 <eeprom_write_word>:
    1eb0:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <eeprom_write_byte>
    1eb4:	27 2f       	mov	r18, r23
    1eb6:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <eeprom_write_r18>

00001eba <eeprom_read_block>:
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22

00001ebe <eeprom_read_blraw>:
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	e1 99       	sbic	0x1c, 1	; 28
    1ec2:	fe cf       	rjmp	.-4      	; 0x1ec0 <eeprom_read_blraw+0x2>
    1ec4:	06 c0       	rjmp	.+12     	; 0x1ed2 <eeprom_read_blraw+0x14>
    1ec6:	ff bb       	out	0x1f, r31	; 31
    1ec8:	ee bb       	out	0x1e, r30	; 30
    1eca:	e0 9a       	sbi	0x1c, 0	; 28
    1ecc:	31 96       	adiw	r30, 0x01	; 1
    1ece:	0d b2       	in	r0, 0x1d	; 29
    1ed0:	0d 92       	st	X+, r0
    1ed2:	41 50       	subi	r20, 0x01	; 1
    1ed4:	50 40       	sbci	r21, 0x00	; 0
    1ed6:	b8 f7       	brcc	.-18     	; 0x1ec6 <eeprom_read_blraw+0x8>
    1ed8:	08 95       	ret

00001eda <_exit>:
    1eda:	f8 94       	cli

00001edc <__stop_program>:
    1edc:	ff cf       	rjmp	.-2      	; 0x1edc <__stop_program>
