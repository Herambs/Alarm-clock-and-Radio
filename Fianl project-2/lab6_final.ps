%!PS-Adobe-3.0
%%Title: lab6_final.c
%%For: heramb sawant
%%Creator: a2ps version 4.14
%%CreationDate: Tue Dec  4 19:31:48 2018
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 7
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#define) K
( F_CPU 16000000 ) p
(// cpu speed in hertz ) c n
(#define) K
( TRUE 1) p n
(#define) K
( FALSE 0) p n
(#include) K
( <avr/io.h>) p n
(#include) K
( <util/delay.h>) p n
(#include) K
( <avr/interrupt.h>) p n
(#include) K
( <string.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( ") p
(hd44780.h) str
(") p n
(#include) K
( ") p
(lm73_functions.h) str
(") p n
(#include) K
( ") p
(twi_master.h) str
(") p n
(#include) K
( ") p
(uart_functions.h) str
(") p n
() N
(extern) K
( ) p
(enum) k
( radio_band{FM, AM, SW};) p n
(extern) K
( ) p
(volatile) K
( uint8_t STC_interrupt;) p n
() N
(volatile) K
( ) p
(enum) k
( radio_band current_radio_band = FM;) p n
() N
(//global variables for fm) c n
(uint16_t eeprom_fm_freq;) p n
(uint16_t eeprom_am_freq;) N
(uint16_t eeprom_sw_freq;) N
(uint8_t  eeprom_volume;) N
(uint16_t fm_freq = 9910;) N
(uint16_t current_fm_freq = 9910;) N
(uint16_t current_am_freq;) N
(uint16_t current_sw_freq;) N
(uint8_t  current_volume;) N
() N
(//Used in debug mode for UART1) c n
(char) k
( uart1_tx_buf[40];      ) p
(//holds string to send to crt) c n
(char) k
( uart1_rx_buf[40];      ) p
(//holds string that recieves data from uart) c n
() p n
() N
(uint8_t flag = 0;) N
(volatile) K
( uint8_t  rcv_rdy;) p n
(char) k
(    lcd_string_array[16];  ) p
(//holds a string to refresh the LCD) c n
(uint16_t adc_result;  ) p
(//holds adc result) c n
(uint16_t sum = 130; ) p
(//holds real time clock value) c n
(uint8_t seconds = 0; ) p
(//cunts seconds for real time clock) c n
(uint8_t seconds1 = 0; ) p
(//counts seconds for snooze ) c n
(uint8_t b = 0;) p n
(uint8_t state = 0;    ) S
(//holds push button value) c n
(uint8_t counter_value=0; ) p
(//variable for incrementing according to push button) c n
(int) k
(16_t total = 131; ) p
(//variable for alarm) c n
(uint8_t data = 0x00; ) p n
(uint16_t alarm = 0;) N
(char) k
(   rx_char;) p n
(extern) K
( uint8_t lm73_wr_buf[2];  ) p n
(extern) K
( uint8_t lm73_rd_buf[2];) p n
(uint8_t k;) N
() N
(void) k
( adjust_time\(\){   ) p
(// bounding cont for real time clock) c n
(if) K
(\(sum == 60\){) p n
(     sum = 100;}) N
(   ) S
(if) K
(\(sum == 160\){) p n
(     sum = 200;}) N
(if) K
(\(sum == 260\){) p n
(     sum = 300;}) N
(   ) S
(if) K
(\(sum == 360\){) p n
(     sum = 400;}) N
(if) K
(\(sum == 460\){) p n
(     sum = 500;}) N
(   ) S
(if) K
(\(sum == 560\){) p n
(     sum = 600;}) N
(if) K
(\(sum == 660\){) p n
(     sum = 700;}) N
(   ) S
(if) K
(\(sum == 760\){) p n
(     sum = 800;}) N
(lab6_final.c) (Page 1/14) (Dec 04, 18 19:31) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(if) K
(\(sum == 860\){) p n
(     sum = 900;}) N
(   ) S
(if) K
(\(sum == 960\){) p n
(     sum = 1000;}) N
(if) K
(\(sum == 1060\){) p n
(     sum = 1100;}) N
(   ) S
(if) K
(\(sum == 1160\){) p n
(     sum = 1200;}) N
(if) K
(\(sum == 1260\){) p n
(     sum = 1300;}) N
(   ) S
(if) K
(\(sum == 1360\){) p n
(     sum = 1400;}) N
(if) K
(\(sum == 1460\){) p n
(     sum = 1500;}) N
(   ) S
(if) K
(\(sum == 1560\){) p n
(     sum = 1600;}) N
(if) K
(\(sum == 1660\){) p n
(     sum = 1700;}) N
(   ) S
(if) K
(\(sum == 1760\){) p n
(     sum = 1800;}) N
(if) K
(\(sum == 1860\){) p n
(     sum = 1900;}) N
(   ) S
(if) K
(\(sum == 1960\){) p n
(     sum = 2000;}) N
(if) K
(\(sum == 2060\){) p n
(     sum = 2100;}) N
(   ) S
(if) K
(\(sum == 2160\){) p n
(     sum = 2200;}) N
(if) K
(\(sum == 2260\){) p n
(     sum = 2300;}) N
(   ) S
(if) K
(\(sum == 2360\){) p n
(     sum = 0;}) N
(}) N
() N
(uint8_t disp[5] = {0x00,0x10,0x20,0x30,0x40};) S
(//slection array) c n
() p n
() N
(//holds data to be sent to the segments. logic zero turns segment on ) c n
(uint8_t segment_data[5];) p n
() N
(uint8_t segment_data1[5];) N
() N
(//decimal to 7-segment LED display encodings, logic "0" turns on segment) c n
(uint8_t dec_to_7seg[14] = {0x03,0x9F,0x25,0x0D,0x99,0x49,0x41,0x1F,0x01,0x09,0x2) p n
(0,0xFF,0x00,0xDB}; ) N
() N
() N
(//******************************************************************************) c n
(//                            chk_buttons                                      ) N
(//Checks the state of the button number passed to it. It shifts in ones till   ) N
(//the button is pushed. Function returns a 1 only once per debounced button    ) N
(//push so a debounce and toggle function can be implemented at the same time.  ) N
(//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            ) N
(//Expects active low pushbuttons on PINA port.  Debounce time is determined by ) N
(//external loop delay times 12. ) N
(//) N
(uint8_t chk_buttons\(uint8_t button\) {) p n
() N
(  ) S
(static) K
( uint16_t state[8] ={0x00}; ) p
(//holds present state) c n
(  state[button] = \(state[button] << 1\) | \(! bit_is_clear\(PINA, button\)\) | 0xE000) p n
(;) N
(  ) S
(if) K
( \(state[button] == 0xF000\) ) p
(return) K
( 1;) p n
(  ) S
(return) K
( 0;) p n
() N
(}) N
() N
() N
(//******************************************************************//) c n
(                           ) p
(//button process) c n
(lab6_final.c) (Page 2/14) (Dec 04, 18 19:31) title
border
grestore
(Printed by heramb sawant) rhead
(lab6_final.c) (1/7) (Tuesday December 04, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(//******************************************************************//) c n
() p n
(uint8_t button_process\() S
(void) k
(\)) p n
(  {) N
(     uint8_t i=1;) N
(     PORTB |= 0x70;                           ) S
(// ENABLE TRISTATE BUFFER) c n
() p n
(      ) S
(for) K
(\(i=1;i<9;i++\)                       ) p
(//counter for push buttons) c n
(       {                       ) p n
(         chk_buttons\(i-1\);                       ) S
(// call chk_cuttons) c n
() p n
(          ) S
(if) K
(\(chk_buttons\(i-1\) == 1\)              ) p
(// if its pushed) c n
(           {) p n
(             state ^= i;                         ) S
(//state holds value of push but) c n
(tons) N
(           }) p n
() N
(          ) S
(if) K
(\(\(state & 0x03\) == 0\) {sei\(\);}           ) p
(//if no button pressed then) c n
( enable global interrupt) N
( ) p n
(          ) S
(if) K
(\(\(state & 0x07\) == 1\) {counter_value = 1;} ) p
(//if first button is pres) c n
(sed) N
() p n
(          ) S
(if) K
(\(\(state & 0x07\) == 2\) ) p n
(           {) N
(             counter_value = 1;) N
(             seconds = 0;            ) S
(//if second button is pressed) c n
(           }) p n
(         ) S
(if) K
(\(\(state & 0x07\) == 4\)     ) p
(//mode for controlling volume ) c n
(           {) p n
(             volume_control\(\);        ) N
(           }) N
() N
(            ) N
(       } ) S
(//for) c n
() p n
(  PORTB |= 0x00;                                ) S
(//disable tristate buffer) c n
(  SPDR = state;                                  ) p
(// send data to bargraph) c n
(  ) p
(while) K
(\(bit_is_clear\(SPSR,SPIF\)\){}            ) p
(// wait for 8 cycles) c n
(  data = SPDR;                                 ) p
(//receive  data form encoder) c n
( }) p n
() N
() N
() N
(//******************************************************************//) c n
(                         ) p
(//encoder) c n
(//*****************************************************************//) N
() p n
(void) k
( encoder\(\){) p n
() N
( ) S
(static) K
( uint8_t a_past = 0x00; ) p
(// holds last value) c n
( ) p
(static) K
( uint8_t b_past = 0x00; ) p
(// holds last value for ) c n
() p n
( DDRE = 0xFF;                  ) S
(//set port E to output) c n
( PORTE |= 0x20 ;               ) p
(// inhibitor high) c n
( ) p
(asm) K
(\("nop"\);) p n
( ) S
(asm) K
(\("nop"\);) p n
( PORTE &= ~\(0x40\);             ) S
(//SH_LD/ low) c n
( ) p
(asm) K
(\("nop"\);) p n
( ) S
(asm) K
(\("nop"\);) p n
( PORTE |= 0x40;               ) S
(//SH/LD_n high) c n
( PORTE &= ~\(0x20\);            ) p
(//inhibitor low) c n
( uint8_t dat = data&0x03;     ) p
(// mask data) c n
( uint8_t dat1 = data&0x0C;    ) p
(// mask data1) c n
() p n
(if) K
(\(\(state & 0x03\) == 1\){) p n
() S 8 T () S
(switch) K
(\(a_past\)        ) p
(// inc & dec according to direction of encoder for) c n
( encoder 1) N
() p 8 T ({) N
(lab6_final.c) (Page 3/14) (Dec 04, 18 19:31) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(case) K
( 0x00:) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(if) K
(\(dat==0x01\){}) p n
() S 8 T (          ) S 24 T () S
(else) K
( ) p
(if) K
(\(dat==0x02\){}) p n
() S 8 T () S 16 T () S 24 T (a_past = dat;) N
(                  ) S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
() N
(        ) S
(case) K
( 0x01:) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T (  ) S
(if) K
(\(dat==0x03\){total = total + counter_value;) p n
(                                        _delay_ms\(2\);}           ) S
(// inc count) c n
(                  ) p
(else) K
( ) p
(if) K
(\(dat==0x00\){total = total - counter_value;) p n
(                                           _delay_ms\(2\);}        ) S
(// dec count) c n
() p 8 T () S 16 T () S 24 T (a_past = dat;) N
(                  ) S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
(        ) S
(case) K
( 0x03:) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(if) K
(\(dat==0x02\){}) p n
(                  ) S 24 T () S
(else) K
( ) p
(if) K
(\(dat==0x01\){}) p n
() S 8 T () S 16 T () S 24 T (a_past = dat;) N
(                  ) S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
(        ) S
(case) K
( 0x02:) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(if) K
(\(dat==0x00\){}) p n
(                  ) S 24 T () S
(else) K
( ) p
(if) K
(\(dat==0x03\){}) p n
() S 8 T () S 16 T () S 24 T (a_past = dat;) N
(                  ) S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
() S 8 T () N
(    }) N
( }) N
(if) K
(\(\(state & 0x03\) == 2\){) p n
(switch) K
(\(b_past\)                 ) p
(//inc and dec count according to direction of enc) c n
(oder for second encoder) N
(        {) p n
(        ) S
(case) K
( 0x00:) p n
(                {) N
(                        ) S
(if) K
(\(dat1==0x04\){}) p n
(                        ) S
(else) K
( ) p
(if) K
(\(dat1==0x08\){}) p n
(                        b_past = dat1;) N
(                        ) S
(break) K
(;) p n
(                }) N
() N
(        ) S
(case) K
( 0x04:) p n
(                {) N
(                        ) S
(if) K
(\(dat1==0x0C\){sum = sum + counter_value;}      ) p
(// inc c) c n
(ount) N
(                        ) p
(else) K
( ) p
(if) K
(\(dat1==0x00\){sum = sum - counter_value;} ) p
(// dec c) c n
(ount) N
(                        b_past = dat1;) p n
(                        ) S
(break) K
(;) p n
(                }) N
(        ) S
(case) K
( 0x0C:) p n
(                {) N
(                        ) S
(if) K
(\(dat1==0x08\){}) p n
(                        ) S
(else) K
( ) p
(if) K
(\(dat1==0x04\){}) p n
(                        b_past = dat1;) N
(                        ) S
(break) K
(;) p n
(                }) N
(        ) S
(case) K
( 0x08:) p n
(                {) N
(                        ) S
(if) K
(\(dat1==0x00\){}) p n
(                        ) S
(else) K
( ) p
(if) K
(\(dat1==0x0C\){}) p n
(                        b_past = dat1;) N
(                        ) S
(break) K
(;) p n
(                }) N
(lab6_final.c) (Page 4/14) (Dec 04, 18 19:31) title
border
grestore
(Printed by heramb sawant) rhead
(lab6_final.c) (2/7) (Tuesday December 04, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(    }) N
(  segsum\(sum\);               ) S
(//display increment setting of real time clock) c n
(}) p n
(  ) N
(}) N
() N
(void) k
( set_freq\(\){      ) p
(//tune different frequencies using encoder) c n
() p n
( ) S
(static) K
( uint8_t a_past = 0x00; ) p
(// holds last value) c n
( ) p
(static) K
( uint8_t b_past = 0x00; ) p
(// holds last value for ) c n
() p n
( DDRE = 0xFF;                  ) S
(//set port E to output) c n
( PORTE |= 0x20 ;               ) p
(// inhibitor high) c n
( ) p
(asm) K
(\("nop"\);) p n
( ) S
(asm) K
(\("nop"\);) p n
( PORTE &= ~\(0x40\);             ) S
(//SH_LD/ low) c n
( ) p
(asm) K
(\("nop"\);) p n
( ) S
(asm) K
(\("nop"\);) p n
( PORTE |= 0x40;               ) S
(//SH/LD_n high) c n
( PORTE &= ~\(0x20\);            ) p
(//inhibitor low) c n
( uint8_t dat = data&0x03;     ) p
(// mask data) c n
( uint8_t dat1 = data&0x0C;    ) p
(// mask data1) c n
() p n
() N
() S 8 T () S
(switch) K
(\(a_past\)        ) p
(// inc & dec according to direction of encoder for) c n
( encoder 1) N
() p 8 T ({) N
() S 8 T () S
(case) K
( 0x00:) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(if) K
(\(dat==0x01\){}) p n
() S 8 T (          ) S 24 T () S
(else) K
( ) p
(if) K
(\(dat==0x02\){}) p n
() S 8 T () S 16 T () S 24 T (a_past = dat;) N
(                  ) S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
() N
(        ) S
(case) K
( 0x01:) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T (  ) S
(if) K
(\(dat==0x03\){current_fm_freq = current_fm_freq + 20;) p n
(                                        _delay_ms\(2\);}           ) S
(// inc count) c n
(                  ) p
(else) K
( ) p
(if) K
(\(dat==0x00\){current_fm_freq = current_fm_freq - 20;) p n
(                                           _delay_ms\(2\);}        ) S
(// dec count) c n
() p 8 T () S 16 T () S 24 T (a_past = dat;) N
(                  ) S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
(        ) S
(case) K
( 0x03:) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(if) K
(\(dat==0x02\){}) p n
(                  ) S 24 T () S
(else) K
( ) p
(if) K
(\(dat==0x01\){}) p n
() S 8 T () S 16 T () S 24 T (a_past = dat;) N
(                  ) S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
(        ) S
(case) K
( 0x02:) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(if) K
(\(dat==0x00\){}) p n
(                  ) S 24 T () S
(else) K
( ) p
(if) K
(\(dat==0x03\){}) p n
() S 8 T () S 16 T () S 24 T (a_past = dat;) N
(                  ) S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
() S 8 T () N
(    }) N
(if) K
(\(\(state & 0x03\) == 2\){) p n
(switch) K
(\(b_past\)                 ) p
(//inc and dec count according to direction of enc) c n
(oder for second encoder) N
(        {) p n
(        ) S
(case) K
( 0x00:) p n
(                {) N
(                        ) S
(if) K
(\(dat1==0x04\){}) p n
(                        ) S
(else) K
( ) p
(if) K
(\(dat1==0x08\){}) p n
(lab6_final.c) (Page 5/14) (Dec 04, 18 19:31) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                        b_past = dat1;) p n
(                        ) S
(break) K
(;) p n
(                }) N
() N
(        ) S
(case) K
( 0x04:) p n
(                {) N
(                        ) S
(if) K
(\(dat1==0x0C\){sum = sum + counter_value;}      ) p
(// inc c) c n
(ount) N
(                        ) p
(else) K
( ) p
(if) K
(\(dat1==0x00\){sum = sum - counter_value;} ) p
(// dec c) c n
(ount) N
(                        b_past = dat1;) p n
(                        ) S
(break) K
(;) p n
(                }) N
(        ) S
(case) K
( 0x0C:) p n
(                {) N
(                        ) S
(if) K
(\(dat1==0x08\){}) p n
(                        ) S
(else) K
( ) p
(if) K
(\(dat1==0x04\){}) p n
(                        b_past = dat1;) N
(                        ) S
(break) K
(;) p n
(                }) N
(        ) S
(case) K
( 0x08:) p n
(                {) N
(                        ) S
(if) K
(\(dat1==0x00\){}) p n
(                        ) S
(else) K
( ) p
(if) K
(\(dat1==0x0C\){}) p n
(                        b_past = dat1;) N
(                        ) S
(break) K
(;) p n
(                }) N
() N
(    }) N
(  segsum\(sum\);               ) S
(//display increment setting of real time clock) c n
(}) p n
(  ) N
(}) N
() N
() N
(void) k
( volume_control\(\){  ) p
(//volume control using encoder) c n
() p n
( ) S
(static) K
( uint8_t a_past = 0x00; ) p
(// holds last value) c n
( ) p
(static) K
( uint8_t b_past = 0x00; ) p
(// holds last value for ) c n
() p n
( DDRE = 0xFF;             ) S
(//set port E to output) c n
( PORTE |= 0x20 ;          ) p
(// inhibitor high) c n
( ) p
(asm) K
(\("nop"\);) p n
( ) S
(asm) K
(\("nop"\);) p n
( PORTE &= ~\(0x40\);        ) S
(//SH_LD/ low) c n
( ) p
(asm) K
(\("nop"\);) p n
( ) S
(asm) K
(\("nop"\);) p n
( PORTE |= 0x40;           ) S
(//SH/LD_n high) c n
( PORTE &= ~\(0x20\);        ) p
(//inhibitor low) c n
( uint8_t dat = data&0x03;  ) p
(// mask data) c n
( uint8_t dat1 = data&0x0C; ) p
(// mask data1) c n
() p n
() N
() S 8 T () S
(switch) K
(\(a_past\)  ) p
(// inc & dec according to direction of encoder for encod) c n
(er 1) N
() p 8 T ({) N
() S 8 T () S
(case) K
( 0x00:) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(if) K
(\(dat==0x01\){}) p n
() S 8 T (          ) S 24 T () S
(else) K
( ) p
(if) K
(\(dat==0x02\){}) p n
() S 8 T () S 16 T () S 24 T (a_past = dat;) N
(                  ) S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
() N
(        ) S
(case) K
( 0x01:) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T (  ) S
(if) K
(\(dat==0x03\){OCR3A = OCR3A - 0x0200;) p n
(                                        _delay_ms\(2\);}) S
(// inc count) c n
(                  ) p
(else) K
( ) p
(if) K
(\(dat==0x00\){OCR3A = OCR3A + 0x0200;) p n
(lab6_final.c) (Page 6/14) (Dec 04, 18 19:31) title
border
grestore
(Printed by heramb sawant) rhead
(lab6_final.c) (3/7) (Tuesday December 04, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                                           _delay_ms\(2\);}) p
(// dec count) c n
() p 8 T () S 16 T () S 24 T (a_past = dat;) N
(                  ) S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
(        ) S
(case) K
( 0x03:) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(if) K
(\(dat==0x02\){}) p n
(                  ) S 24 T () S
(else) K
( ) p
(if) K
(\(dat==0x01\){}) p n
() S 8 T () S 16 T () S 24 T (a_past = dat;) N
(                  ) S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
(        ) S
(case) K
( 0x02:) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(if) K
(\(dat==0x00\){}) p n
(                  ) S 24 T () S
(else) K
( ) p
(if) K
(\(dat==0x03\){}) p n
() S 8 T () S 16 T () S 24 T (a_past = dat;) N
(                  ) S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
() S 8 T () N
(    }) N
(if) K
(\(\(state & 0x03\) == 2\){) p n
(switch) K
(\(b_past\)  ) p
(//inc dec count according to direction of encoder for second enc) c n
(oder) N
(        {) p n
(        ) S
(case) K
( 0x00:) p n
(                {) N
(                        ) S
(if) K
(\(dat1==0x04\){}) p n
(                        ) S
(else) K
( ) p
(if) K
(\(dat1==0x08\){}) p n
(                        b_past = dat1;) N
(                        ) S
(break) K
(;) p n
(                }) N
() N
(        ) S
(case) K
( 0x04:) p n
(                {) N
(                        ) S
(if) K
(\(dat1==0x0C\){sum = sum + counter_value;} ) p
(// inc count) c n
(                        ) p
(else) K
( ) p
(if) K
(\(dat1==0x00\){sum = sum - counter_value;} ) p
(// dec c) c n
(ount) N
(                        b_past = dat1;) p n
(                        ) S
(break) K
(;) p n
(                }) N
(        ) S
(case) K
( 0x0C:) p n
(                {) N
(                        ) S
(if) K
(\(dat1==0x08\){}) p n
(                        ) S
(else) K
( ) p
(if) K
(\(dat1==0x04\){}) p n
(                        b_past = dat1;) N
(                        ) S
(break) K
(;) p n
(                }) N
(        ) S
(case) K
( 0x08:) p n
(                {) N
(                        ) S
(if) K
(\(dat1==0x00\){}) p n
(                        ) S
(else) K
( ) p
(if) K
(\(dat1==0x0C\){}) p n
(                        b_past = dat1;) N
(                        ) S
(break) K
(;) p n
(                }) N
() N
(    }) N
(  segsum\(sum\);       ) S
(//display increment setting of real time clock) c n
(}) p n
(  ) N
(}) N
() N
() N
() N
(//*********************************************************************) c n
(                                ) p
(//SPI initialize) c n
(//*********************************************************************) N
(void) k
( spi_init\(\)) p n
({) N
(        DDRF  |= 0x08;  ) S
(//port F bit 3 is enable for LCD) c n
(lab6_final.c) (Page 7/14) (Dec 04, 18 19:31) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        PORTF &= 0xF7;  ) p
(//port F bit 3 is initially low) c n
() p 8 T (DDRB = 0xF7;    ) S
(// set ss_n, sck, mosi) c n
() p 8 T (SPCR |= \(1<<SPE\) | \(1<<MSTR\);) S
(// master mode) c n
() p 8 T (SPSR |= \(1<<SPI2X\);) S
(// double speed operation) c n
(}) p n
() N
(//******************************************************************************) c n
() p n
(//******************************************************************************) c n
(*****) N
(//                                   segment_sum                                ) N
(    ) N
(//takes a 16-bit binary input value and places the appropriate equivalent 4 digi) N
(t ) N
(//BCD segment code in the array segment_data for display.                       ) N
(//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|) N
(void) k
( segsum\(sum\) {) p n
(uint8_t ones;  ) N
(uint8_t tens;  ) N
(uint8_t hundreds;  ) N
(uint8_t thousands;  ) S
(//determine how many digits there are ) c n
(ones = sum%10;) p n
(tens = \(sum/10\)%10;) N
(hundreds = \(sum/100\)%10;) N
(thousands = \(sum/1000\)%10;) N
(segment_data[0] = dec_to_7seg[ones];) N
(segment_data[1] = dec_to_7seg[tens];) N
(if) K
(\(\(seconds % 2\) == 0\){segment_data[2] = dec_to_7seg[10];}) p n
(else) K
( segment_data[2] = dec_to_7seg[11];) p n
(segment_data[3] = dec_to_7seg[hundreds];) N
(segment_data[4] = dec_to_7seg[thousands];) N
(if) K
(\(sum<10\){           ) p
(//blancking leading 0s) c n
(  segment_data[1] = 0xFF;) p n
(  segment_data[3] = 0xFF;) N
(  segment_data[4] = 0xFF;}) N
(else) K
( ) p
(if) K
(\(sum<100\){) p n
(  segment_data[3] = 0xFF;) N
(  segment_data[4] = 0xFF;}) N
(else) K
( ) p
(if) K
(\(sum<1000\){) p n
(  segment_data[4] = 0xFF;}) N
() N
(}) N
() N
() N
() N
(void) k
( segsum1\(sum1\) {) p n
(uint8_t ones1;) N
(uint8_t tens1;) N
(uint8_t hundreds1;) N
(uint8_t thousands1;  ) S
(//determine how many digits there are ) c n
(ones1 = sum1%10;) p n
(tens1 = \(sum1/10\)%10;) N
(hundreds1 = \(sum1/100\)%10;) N
(thousands1 = \(sum1/1000\)%10;) N
(segment_data1[0] = dec_to_7seg[ones1];) N
(segment_data1[1] = dec_to_7seg[tens1];) N
(if) K
(\(\(seconds % 2\) == 0\){segment_data[2] = dec_to_7seg[12];}) p n
(else) K
( segment_data[2] = dec_to_7seg[11];) p n
(segment_data1[3] = dec_to_7seg[hundreds1];) N
(segment_data1[4] = dec_to_7seg[thousands1];) N
(if) K
(\(sum<10\){           ) p
(//blancking leading 0s) c n
(  segment_data1[1] = 0xFF;) p n
(  segment_data1[3] = 0xFF;) N
(  segment_data1[4] = 0xFF;}) N
(else) K
( ) p
(if) K
(\(sum1<100\){) p n
(  segment_data1[3] = 0xFF;) N
(  segment_data1[4] = 0xFF;}) N
(else) K
( ) p
(if) K
(\(sum1<1000\){) p n
(  segment_data1[4] = 0xFF;}) N
(lab6_final.c) (Page 8/14) (Dec 04, 18 19:31) title
border
grestore
(Printed by heramb sawant) rhead
(lab6_final.c) (4/7) (Tuesday December 04, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(}) N
() N
(void) k
( segsum2\(uint16_t sum\) {) p n
(uint8_t ones;  ) N
(uint8_t tens;  ) N
(uint8_t hundreds;  ) N
(uint8_t thousands;  ) S
(//determine how many digits there are ) c n
(ones = sum%10;) p n
(tens = \(sum/10\)%10;) N
(hundreds = \(sum/100\)%10;) N
(thousands = \(sum/1000\)%10;) N
(segment_data[0] = dec_to_7seg[ones];) N
(segment_data[1] = dec_to_7seg[tens];) N
(segment_data[2] = dec_to_7seg[10];) N
(segment_data[3] = dec_to_7seg[hundreds];) N
(segment_data[4] = dec_to_7seg[thousands];) N
(if) K
(\(sum<10\){           ) p
(//blancking leading 0s) c n
(  segment_data[1] = 0xFF;) p n
(  segment_data[3] = 0xFF;) N
(  segment_data[4] = 0xFF;}) N
(else) K
( ) p
(if) K
(\(sum<100\){) p n
(  segment_data[3] = 0xFF;) N
(  segment_data[4] = 0xFF;}) N
(else) K
( ) p
(if) K
(\(sum<1000\){) p n
(  segment_data[4] = 0xFF;}) N
() N
(}) N
() N
(void) k
( segsum3\(uint16_t sum\) {) p n
(uint8_t ones;) N
(uint8_t tens;) N
(uint8_t hundreds;) N
(uint8_t thousands;  ) S
(//determine how many digits there are ) c n
(ones = sum%10;) p n
(tens = \(sum/10\)%10;) N
(hundreds = \(sum/100\)%10;) N
(thousands = \(sum/1000\)%10;) N
(segment_data[0] = dec_to_7seg[ones];) N
(segment_data[1] = dec_to_7seg[tens];) N
(segment_data[2] = dec_to_7seg[13];) N
(segment_data[3] = dec_to_7seg[hundreds];) N
(segment_data[4] = dec_to_7seg[thousands];) N
(if) K
(\(sum<10\){           ) p
(//blancking leading 0s) c n
(  segment_data[1] = 0xFF;) p n
(  segment_data[3] = 0xFF;) N
(  segment_data[4] = 0xFF;}) N
(else) K
( ) p
(if) K
(\(sum<100\){ ) p n
(  segment_data[3] = 0xFF;) N
(  segment_data[4] = 0xFF;}) N
(else) K
( ) p
(if) K
(\(sum<1000\){) p n
(  segment_data[4] = 0xFF;}) N
() N
(}) N
() N
() N
(void) k
( tcnt0_init\() p
(void) k
(\)   ) p
(//initializing timer/counter0 for real time clock) c n
( {) p n
(   ASSR |= \(1<<AS0\);) N
() N
(  ) S
(//Enable coutner in normal mode with no prescaler) c n
(  TCCR0 = \(0<<CS02\) | \(0<<CS01\) | \(1<<CS00\);) p n
() N
(  ) S
(//Wait for all ascynch warning bits to clear) c n
(  ) p
(while) K
(\(bit_is_set\(ASSR, TCN0UB\)\);) p n
(  ) S
(while) K
(\(bit_is_set\(ASSR, OCR0UB\)\);) p n
(  ) S
(while) K
(\(bit_is_set\(ASSR, TCR0UB\)\);) p n
() N
(  ) S
(//Enable overflow interrupts for T/C 0) c n
(lab6_final.c) (Page 9/14) (Dec 04, 18 19:31) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  TIMSK |= \(1<<TOIE0\);) p n
( }) N
() N
() N
(ISR\(USART0_RX_vect\)) N
( {) N
(   rx_char = UDR0;              ) S
(//get remote temperature) c n
() p n
(   ) S
(if) K
(\(state == 5\)) p n
(      {) N
(        ) S
(char) k
(2lcd\(rx_char\);) p n
(      }) N
( } ) N
() N
() N
(ISR\(TIMER0_OVF_vect\)           ) S
(//ISR for real time clock and snooze) c n
( {) p n
(   ) S
(static) K
( uint8_t count = 0;         ) p n
(   count ++;) N
() N
(     ) S
(if) K
(\(\(count % 128\) == 0\)    ) p
(//complete 1 sec) c n
(       {) p n
(         seconds = seconds + 1;) S
(//increment second) c n
() p n
(            ) S
(if) K
(\(seconds == 60\)) p n
(              {           ) N
(                sum = sum + 1; ) S
(//increment sum after every min) c n
(                seconds = 0;) p n
(              }) N
(       }) N
() N
(       ) S
(if) K
(\(state == 3\)         ) p
(//snooze mode) c n
(         {) p n
(           ) S
(if) K
(\(\(count % 128\) == 0\)) p n
(             { ) N
(                seconds1 = seconds1 + 1;  ) S
(//increment seconds1 every second ) c n
(             }) p n
(         }) N
( }) N
() N
() N
(void) k
( bargraph\(\){) p n
(  PORTB |= 0x01; ) S
(//rising edge to rgclk) c n
(  PORTB &= ~0x01;) p
(//falling edge to rgclk) c n
(}) p n
() N
() N
(/*******************************************************************************) c n
(***) N
( initializing timer/counter2 in different configuration for controlling brightne) N
(ss) N
(********************************************************************************) N
(**/) N
() p n
(tcnt2_init\(\){                                ) S
(//initializing timer/counter2 in di) c n
(fferent  ) N
(TCCR2 |= \(1<<WGM20\) | \(1<<COM21\) | \(1<<CS20\);) p
(//configurtion for controling) c n
(OCR2 = 0x00;                                 ) p
(//brightness ) c n
(}) p n
() N
(tcnt21_init\(\){) N
(TCCR2 |= \(1<<WGM20\) | \(1<<COM21\) | \(1<<CS20\);) N
(OCR2 = 0x2B;) N
(}) N
() N
(tcnt22_init\(\){) N
(TCCR2 |= \(1<<WGM20\) | \(1<<COM21\) | \(1<<CS20\);) N
(OCR2 = 0x56;) N
(}) N
(lab6_final.c) (Page 10/14) (Dec 04, 18 19:31) title
border
grestore
(Printed by heramb sawant) rhead
(lab6_final.c) (5/7) (Tuesday December 04, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (11-12) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(tcnt23_init\(\){) N
(TCCR2 |= \(1<<WGM20\) | \(1<<COM21\) | \(1<<CS20\);) N
(OCR2 = 0x81;) N
(}) N
(tcnt24_init\(\){) N
(TCCR2 |= \(1<<WGM20\) | \(1<<COM21\) | \(1<<CS20\);) N
(OCR2 = 0xAC;) N
(}) N
() N
(tcnt25_init\(\){) N
(TCCR2 |= \(1<<WGM20\) | \(1<<COM21\) | \(1<<CS20\);) N
(OCR2 = 0xD7;) N
(}) N
() N
(tcnt26_init\(\){) N
(TCCR2 |= \(1<<WGM20\) | \(1<<COM21\) | \(1<<CS20\);) N
(OCR2 = 0xE0;) N
(}) N
() N
(/*******************************************************************************) c n
(*******/) N
( ) p
(// initializing timer/counter1 in pwm mode for annoying beep) c n
(/*******************************************************************************) N
(******/) N
() p n
(void) k
( tcnt1_init\(\)              ) p
(//initializing timer/counter1 in pwm mode) c n
( {) p n
(   TCCR1A = 0x00;                  ) S
(//for annoying beep) c n
(   TCCR1B = \(1<<WGM12\) | \(1<<CS11\);) p n
(   TCCR1C = 0x00;) N
(   OCR1A = 0x0200;) N
(   TIMSK |= \(1<<OCIE1A\);) N
( }) N
( ) N
() N
(ISR\(TIMER1_COMPA_vect\)) N
( {) N
(   ) S
(if) K
(\(\(sum == total\) && \(state & 0x03\) ==0\){    ) p n
(   PORTD ^= 0x80;}                              ) S
(// RING alarm) c n
(   ) p
(if) K
(\(\(sum == total\) && \(state & 0x03\) == 3\){}  ) p
(//if its snooze mode then dont p) c n
(lay alarm) N
(                                                  ) p n
(     ) S
(if) K
(\(seconds1 >= 10\)                         ) p
(//after 10secs snooze play alarm) c n
(       {) p n
(         PORTD ^= 0x80;) N
(       }) N
(if) K
(\(sum != total\){}                        ) p n
() N
(  }) S
(//ISR) c n
(   ) p n
() N
(//******************************************************************************) c n
(*****) N
() p n
() N
(//******************************************************************************) c n
(*****) N
(uint8_t main\(\)) p n
({) N
(uint16_t lm73_temp;) N
(DDRF |= 0x08;) S
(//lcd strobe display) c n
(DDRD = 0x81;) p
(//for twi and annoying beep) c n
(DDRE = 0xFF;) p
(//sh/ld, clh_inh output) c n
() p n
() N
(TCCR3A |= \(1<<COM3A1\) | \(1<<COM3A0\) | \(1<<WGM31\);) S
(//initialize timer3 for vol) c n
(TCCR3B |= \(1<<WGM33\) | \(1<<WGM32\) | \(1<<CS30\);   ) p
(//control) c n
(TCCR3C = 0x00;) p n
(lab6_final.c) (Page 11/14) (Dec 04, 18 19:31) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(OCR3A = 0x9000;) p
(//duty cycle of 60%) c n
(ICR3 = 0xF000;) p n
() N
() N
(uart_init\(\);  ) S
(//initialize uart) c n
(spi_init\(\);   ) p
(//initalize spi) c n
(lcd_init\(\);   ) p
(//initialize lcd) c n
(init_twi\(\);   ) p
(//initialize twi ) c n
(tcnt0_init\(\); ) p
(//initialize timer0) c n
(tcnt1_init\(\); ) p
(//initialize timer1) c n
(sei\(\);        ) p
(//enable global interrupts) c n
() p n
(DDRE  |= 0x04; ) S
(//Port E bit 2 is active high reset for radio ) c n
(PORTE |= 0x04; ) p
(//radio reset is on at powerup \(active high\)) c n
() p n
(//EICRB |= \(1<<ISC71\) | \(1<<ISC70\);) c n
(//EIMSK |= \(1<<INT7\);) N
() p n
(//hardware reset of Si4734) c n
(PORTE &= ~\(1<<PE7\); ) p
(//int2 initially low to sense TWI mode) c n
(DDRE  |= 0x80;      ) p
(//turn on Port E bit 7 to drive it low) c n
(PORTE |=  \(1<<PE2\); ) p
(//hardware reset Si4734 ) c n
(_delay_us\(200\);     ) p
(//hold for 200us, 100us by spec         ) c n
(PORTE &= ~\(1<<PE2\); ) p
(//release reset ) c n
(_delay_us\(30\);      ) p
(//5us required because of my slow I2C translators I suspect) c n
(//Si code in "low" has 30us delay...no explaination) N
(DDRE  &= ~\(0x80\);   ) p
(//now Port E bit 7 becomes input from the radio interrupt) c n
() p n
(//sei\(\);        //enable global interrupts) c n
() p n
(fm_pwr_up\(\); ) S
(//powerup the radio as appropriate) c n
(current_fm_freq = 9910; ) p
(//arg2, arg3: 99.9Mhz, 200khz steps) c n
() p n
(//SETTING UP ADC) c n
(DDRF &= ~\(_BV\(DDF7\)\);) p
(//make port F bit 7 is ADC input  ) c n
(PORTF &= ~\(_BV\(PF7\)\);) p
(////port F bit 7 pullups must be off) c n
(ADMUX |= \(1<<REFS0\)|\(1<<MUX2\)|\(1<<MUX1\)|\(1<<MUX0\);) p
(//single-ended, input PORTF bi) c n
(t 7, right adjusted, 10 bits) N
(ADCSRA |= \(1<<ADEN\)|\(1<<ADPS2\)|\(1<<ADPS1\)|\(1<<ADPS0\);) p
(//ADC enabled, don't start ) c n
(yet, single shot mode ) N
() p n
() N
(//set LM73 mode for reading temperature by loading pointer register) c n
(lm73_wr_buf[0] = LM73_PTR_TEMP; ) p
(//load lm73_wr_buf[0] with temperature pointer a) c n
(ddress) N
(twi_start_wr\(LM73_ADDRESS, lm73_wr_buf, 1\);     ) p
(//start the TWI write process) c n
(clear_display\(\);) p n
() N
(while) K
(\(1\)) p n
( {) N
(   ) S
(if) K
(\(state == 5\) ) p
(//display remote temperature and shut down alarm) c n
(     {) p n
(       set_cursor\(0,0\);) N
(       total = 129;) N
(       segsum\(sum\);) N
(       ) S
(asm) K
(\("nop"\);) p n
(       ) S
(asm) K
(\("nop"\);) p n
(     }) N
(  twi_start_rd\(LM73_ADDRESS, lm73_rd_buf, 2\); ) S
(//read temperature data from LM73 ) c n
(\(2 bytes\) ) N
(  lm73_temp = lm73_rd_buf[0]; ) p
(//save high temperature byte into lm73_temp) c n
(  lm73_temp = \(lm73_temp << 8\); ) p
(//shift it into upper byte ) c n
(  lm73_temp |= lm73_rd_buf[1]; ) p
(//"OR" in the low temp byte to lm73_temp ) c n
(  itoa\(lm73_temp>>7,lcd_string_array, 10\); ) p
(//convert to string in array with ito) c n
(a\(\) from avr-libc ) N
() p n
() N
(   ADCSRA |= \(1<<ADSC\);) S
(//poke ADSC and start conversion) c n
(   ) p
(while) K
(\(bit_is_clear\(ADCSRA, ADIF\)\); ) p
(//spin while interrupt flag not set) c n
(lab6_final.c) (Page 12/14) (Dec 04, 18 19:31) title
border
grestore
(Printed by heramb sawant) rhead
(lab6_final.c) (6/7) (Tuesday December 04, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (13-14) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(   ADCSRA |= \(1<<ADIF\); ) p
(//its done, clear flag by writing a one ) c n
(   adc_result = ADC;  ) p
(//read the ADC output as 16 bits) c n
(/**************************************************************************) N
(      adjusting brightness according to adc value) N
(**************************************************************************/) N
(   ) p
(if) K
(\(\(0x03D4 < adc_result\) && \(adc_result < 0x03FF\)\)) p n
(     {             ) N
(      tcnt2_init\(\);) N
(     }                                                  ) N
(  ) S
(if) K
(\(\(0x03A9 < adc_result\) && \(adc_result < 0x03D4\)\)) p n
(     {) N
(      tcnt21_init\(\);) N
(     }                                                       ) N
(  ) S
(if) K
(\(\(0x0379 < adc_result\) && \( adc_result < 0x03A9\)\)) p n
(     {) N
(      tcnt22_init\(\);) N
(     }                                         ) N
(  ) S
(if) K
(\(\(0x0353 < adc_result\) && \(adc_result< 0x0379\)\)) p n
(     {) N
(      tcnt23_init\(\);) N
(     }) N
(  ) S
(if) K
(\(\(0x0328 < adc_result\) && \(adc_result< 0x0353\)\)) p n
(     {) N
(      tcnt24_init\(\);) N
(     }     ) N
(  ) S
(if) K
(\(\(0x02FD < adc_result\) && \(adc_result< 0x0328\)\)) p n
(     {) N
(      tcnt25_init\(\);) N
(     }                                      ) N
() N
() N
(button_process\(\);) S
(//check pushbuttons ) c n
(encoder\(\); ) p
(//performs encoder function) c n
(adjust_time\(\); ) p
(//call adjust_time) c n
() p n
(  ) S
(if) K
(\(\(state & 0x03\) == 1\) ) p
(//mode for setting alarm) c n
(    {) p n
(        segsum2\(total\);) N
(    }) N
() N
(bargraph\(\); ) S
(//call bargraph) c n
(DDRA = 0x00; ) p
(//set porta to input) c n
(PORTA = 0xFF; ) p
(//porta to pullups) c n
(asm) K
(\("nop"\);) p n
(asm) K
(\("nop"\);) p n
() N
() N
(  ) S
(if) K
(\(\(\(state & 0x07\) == 0\) && \(seconds1 != 10\)\) ) p
(//normal clock mode) c n
(    {) p n
(        clear_display\(\); ) N
(        string2lcd\(lcd_string_array\); ) S
(//send the string to LCD \(lcd_functions\)) c n
(        segsum\(sum\);) p n
(        seconds1 = 0;) N
(    }) N
() N
(       ) S
(if) K
(\(\(state & 0x07\) == 3\)                         ) p
(//snooze mode) c n
(         {) p n
(           segsum\(sum\);) N
(         }) N
() N
(       ) S
(if) K
(\(\(sum == total\) && \(state & 0x03\) == 0\)       ) p
(//alarm mode) c n
(         {) p n
(           clear_display\(\);) N
(           string2lcd\(") S
(ALARM) str
("\);                         ) p
(//display "alarm" on l) c n
(cd) N
(           segsum1\(sum\);) p n
(         }) N
() N
(        ) S
(if) K
(\(\(seconds1 >= 10\) && \(\(state & 0x07\) == 3\)\)  ) p
(//after snooze) c n
(lab6_final.c) (Page 13/14) (Dec 04, 18 19:31) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(         {) p n
(           segsum\(sum\);) N
(         }) N
() N
(        ) S
(if) K
(\(\(state & 0x08\) == 8\)                        ) p
(//mode for tuning frequen) c n
(cy) N
(         {) p n
(          segsum3\(current_fm_freq/10\);) N
(          set_freq\(\);) N
(            ) S
(if) K
(\(\(state & 0xFF\) == 0x0C\)) p n
(              {) N
(                state = 0;) N
(              }) N
(          _delay_us\(100\);) N
(         }) N
(        ) S
(if) K
(\(\(state & 0x07\) == 6\)                     ) p
(//mode for tuning radio on c) c n
(urrent frequency) N
(         {) p n
(          segsum\(current_fm_freq\);) N
(          set_freq\(\);) N
(          fm_tune_freq\(\);) N
(          _delay_ms\(1\);) N
(         ) S
(// state = 0;) c n
(         }) p n
(        ) S
(if) K
(\(\(state & 0x07\) == 7\)                    ) p
(//mode for shutting down radi) c n
(o) N
(         {) p n
(           radio_pwr_dwn\(\);) N
(           fm_pwr_up\(\);) N
(           state = 0;) N
(         }) N
() N
(DDRA = 0xFF;                                    ) S
(// set porta to output) c n
(asm) K
(\("nop"\);) p n
(asm) K
(\("nop"\);) p n
(        ) S
(for) K
(\(b=0;b<5;b++\)) p n
(           {                              ) N
() S 8 T (     PORTB = disp[b];                        ) S
(//selection logic) c n
() p 8 T (     PORTA = segment_data[b];                ) S
(//sending data to port a) c n
(              _delay_ms\(1\);                 ) p n
(         ) N
(           }) S
(//for) c n
(  }) p
(//while) c n
(}) p
(//main) c n
() p n
() N
() N
(lab6_final.c) (Page 14/14) (Dec 04, 18 19:31) title
border
grestore
(Printed by heramb sawant) rhead
(lab6_final.c) (7/7) (Tuesday December 04, 2018) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
