
lab6_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  000021c4  00002258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000149  0080021e  0080021e  00002376  2**0
                  ALLOC
  3 .stab         00005604  00000000  00000000  00002378  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c98  00000000  00000000  0000797c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00009614  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00009628  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      40:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__vector_16>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__vector_18>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__vector_33>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	6d 07       	cpc	r22, r29
      8e:	44 07       	cpc	r20, r20
      90:	44 07       	cpc	r20, r20
      92:	44 07       	cpc	r20, r20
      94:	44 07       	cpc	r20, r20
      96:	44 07       	cpc	r20, r20
      98:	44 07       	cpc	r20, r20
      9a:	44 07       	cpc	r20, r20
      9c:	6d 07       	cpc	r22, r29
      9e:	44 07       	cpc	r20, r20
      a0:	44 07       	cpc	r20, r20
      a2:	44 07       	cpc	r20, r20
      a4:	44 07       	cpc	r20, r20
      a6:	44 07       	cpc	r20, r20
      a8:	44 07       	cpc	r20, r20
      aa:	44 07       	cpc	r20, r20
      ac:	77 07       	cpc	r23, r23
      ae:	44 07       	cpc	r20, r20
      b0:	44 07       	cpc	r20, r20
      b2:	44 07       	cpc	r20, r20
      b4:	44 07       	cpc	r20, r20
      b6:	44 07       	cpc	r20, r20
      b8:	44 07       	cpc	r20, r20
      ba:	44 07       	cpc	r20, r20
      bc:	44 07       	cpc	r20, r20
      be:	44 07       	cpc	r20, r20
      c0:	44 07       	cpc	r20, r20
      c2:	44 07       	cpc	r20, r20
      c4:	44 07       	cpc	r20, r20
      c6:	44 07       	cpc	r20, r20
      c8:	44 07       	cpc	r20, r20
      ca:	44 07       	cpc	r20, r20
      cc:	77 07       	cpc	r23, r23
      ce:	44 07       	cpc	r20, r20
      d0:	44 07       	cpc	r20, r20
      d2:	44 07       	cpc	r20, r20
      d4:	44 07       	cpc	r20, r20
      d6:	44 07       	cpc	r20, r20
      d8:	44 07       	cpc	r20, r20
      da:	44 07       	cpc	r20, r20
      dc:	44 07       	cpc	r20, r20
      de:	44 07       	cpc	r20, r20
      e0:	44 07       	cpc	r20, r20
      e2:	44 07       	cpc	r20, r20
      e4:	44 07       	cpc	r20, r20
      e6:	44 07       	cpc	r20, r20
      e8:	44 07       	cpc	r20, r20
      ea:	44 07       	cpc	r20, r20
      ec:	8e 07       	cpc	r24, r30
      ee:	44 07       	cpc	r20, r20
      f0:	44 07       	cpc	r20, r20
      f2:	44 07       	cpc	r20, r20
      f4:	44 07       	cpc	r20, r20
      f6:	44 07       	cpc	r20, r20
      f8:	44 07       	cpc	r20, r20
      fa:	44 07       	cpc	r20, r20
      fc:	92 07       	cpc	r25, r18
      fe:	44 07       	cpc	r20, r20
     100:	44 07       	cpc	r20, r20
     102:	44 07       	cpc	r20, r20
     104:	44 07       	cpc	r20, r20
     106:	44 07       	cpc	r20, r20
     108:	44 07       	cpc	r20, r20
     10a:	44 07       	cpc	r20, r20
     10c:	44 07       	cpc	r20, r20
     10e:	44 07       	cpc	r20, r20
     110:	44 07       	cpc	r20, r20
     112:	44 07       	cpc	r20, r20
     114:	44 07       	cpc	r20, r20
     116:	44 07       	cpc	r20, r20
     118:	44 07       	cpc	r20, r20
     11a:	44 07       	cpc	r20, r20
     11c:	a0 07       	cpc	r26, r16
     11e:	44 07       	cpc	r20, r20
     120:	44 07       	cpc	r20, r20
     122:	44 07       	cpc	r20, r20
     124:	44 07       	cpc	r20, r20
     126:	44 07       	cpc	r20, r20
     128:	44 07       	cpc	r20, r20
     12a:	44 07       	cpc	r20, r20
     12c:	5e 07       	cpc	r21, r30

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e1       	ldi	r29, 0x10	; 16
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	12 e0       	ldi	r17, 0x02	; 2
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e4 ec       	ldi	r30, 0xC4	; 196
     142:	f1 e2       	ldi	r31, 0x21	; 33
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	ae 31       	cpi	r26, 0x1E	; 30
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	23 e0       	ldi	r18, 0x03	; 3
     156:	ae e1       	ldi	r26, 0x1E	; 30
     158:	b2 e0       	ldi	r27, 0x02	; 2
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a7 36       	cpi	r26, 0x67	; 103
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <main>
     168:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <adjust_time>:
extern uint8_t lm73_wr_buf[2];  
extern uint8_t lm73_rd_buf[2];
uint8_t k;

void adjust_time(){   // bounding cont for real time clock
if(sum == 60){
     170:	80 91 15 01 	lds	r24, 0x0115
     174:	90 91 16 01 	lds	r25, 0x0116
     178:	8c 33       	cpi	r24, 0x3C	; 60
     17a:	91 05       	cpc	r25, r1
     17c:	09 f4       	brne	.+2      	; 0x180 <adjust_time+0x10>
     17e:	85 c0       	rjmp	.+266    	; 0x28a <adjust_time+0x11a>
     sum = 100;}
   if(sum == 160){
     180:	80 3a       	cpi	r24, 0xA0	; 160
     182:	91 05       	cpc	r25, r1
     184:	09 f4       	brne	.+2      	; 0x188 <adjust_time+0x18>
     186:	43 c0       	rjmp	.+134    	; 0x20e <adjust_time+0x9e>
     sum = 200;}
if(sum == 260){
     188:	84 30       	cpi	r24, 0x04	; 4
     18a:	21 e0       	ldi	r18, 0x01	; 1
     18c:	92 07       	cpc	r25, r18
     18e:	09 f0       	breq	.+2      	; 0x192 <adjust_time+0x22>
     190:	ba c0       	rjmp	.+372    	; 0x306 <adjust_time+0x196>
     sum = 300;}
     192:	8c e2       	ldi	r24, 0x2C	; 44
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	90 93 16 01 	sts	0x0116, r25
     19a:	80 93 15 01 	sts	0x0115, r24
     sum = 400;}
if(sum == 460){
     sum = 500;}
   if(sum == 560){
     sum = 600;}
if(sum == 660){
     19e:	84 39       	cpi	r24, 0x94	; 148
     1a0:	22 e0       	ldi	r18, 0x02	; 2
     1a2:	92 07       	cpc	r25, r18
     1a4:	09 f0       	breq	.+2      	; 0x1a8 <adjust_time+0x38>
     1a6:	b9 c0       	rjmp	.+370    	; 0x31a <adjust_time+0x1aa>
     sum = 700;}
     1a8:	8c eb       	ldi	r24, 0xBC	; 188
     1aa:	92 e0       	ldi	r25, 0x02	; 2
     1ac:	90 93 16 01 	sts	0x0116, r25
     1b0:	80 93 15 01 	sts	0x0115, r24
     sum = 800;}
if(sum == 860){
     sum = 900;}
   if(sum == 960){
     sum = 1000;}
if(sum == 1060){
     1b4:	84 32       	cpi	r24, 0x24	; 36
     1b6:	24 e0       	ldi	r18, 0x04	; 4
     1b8:	92 07       	cpc	r25, r18
     1ba:	09 f0       	breq	.+2      	; 0x1be <adjust_time+0x4e>
     1bc:	b8 c0       	rjmp	.+368    	; 0x32e <adjust_time+0x1be>
     sum = 1100;}
     1be:	8c e4       	ldi	r24, 0x4C	; 76
     1c0:	94 e0       	ldi	r25, 0x04	; 4
     1c2:	90 93 16 01 	sts	0x0116, r25
     1c6:	80 93 15 01 	sts	0x0115, r24
     sum = 1200;}
if(sum == 1260){
     sum = 1300;}
   if(sum == 1360){
     sum = 1400;}
if(sum == 1460){
     1ca:	84 3b       	cpi	r24, 0xB4	; 180
     1cc:	25 e0       	ldi	r18, 0x05	; 5
     1ce:	92 07       	cpc	r25, r18
     1d0:	09 f0       	breq	.+2      	; 0x1d4 <adjust_time+0x64>
     1d2:	b7 c0       	rjmp	.+366    	; 0x342 <adjust_time+0x1d2>
     sum = 1500;}
     1d4:	8c ed       	ldi	r24, 0xDC	; 220
     1d6:	95 e0       	ldi	r25, 0x05	; 5
     1d8:	90 93 16 01 	sts	0x0116, r25
     1dc:	80 93 15 01 	sts	0x0115, r24
     sum = 1600;}
if(sum == 1660){
     sum = 1700;}
   if(sum == 1760){
     sum = 1800;}
if(sum == 1860){
     1e0:	84 34       	cpi	r24, 0x44	; 68
     1e2:	27 e0       	ldi	r18, 0x07	; 7
     1e4:	92 07       	cpc	r25, r18
     1e6:	09 f0       	breq	.+2      	; 0x1ea <adjust_time+0x7a>
     1e8:	b6 c0       	rjmp	.+364    	; 0x356 <adjust_time+0x1e6>
     sum = 1900;}
     1ea:	8c e6       	ldi	r24, 0x6C	; 108
     1ec:	97 e0       	ldi	r25, 0x07	; 7
     1ee:	90 93 16 01 	sts	0x0116, r25
     1f2:	80 93 15 01 	sts	0x0115, r24
     sum = 2000;}
if(sum == 2060){
     sum = 2100;}
   if(sum == 2160){
     sum = 2200;}
if(sum == 2260){
     1f6:	84 3d       	cpi	r24, 0xD4	; 212
     1f8:	28 e0       	ldi	r18, 0x08	; 8
     1fa:	92 07       	cpc	r25, r18
     1fc:	09 f0       	breq	.+2      	; 0x200 <adjust_time+0x90>
     1fe:	b5 c0       	rjmp	.+362    	; 0x36a <adjust_time+0x1fa>
     sum = 2300;}
     200:	8c ef       	ldi	r24, 0xFC	; 252
     202:	98 e0       	ldi	r25, 0x08	; 8
     204:	90 93 16 01 	sts	0x0116, r25
     208:	80 93 15 01 	sts	0x0115, r24
     20c:	08 95       	ret

void adjust_time(){   // bounding cont for real time clock
if(sum == 60){
     sum = 100;}
   if(sum == 160){
     sum = 200;}
     20e:	88 ec       	ldi	r24, 0xC8	; 200
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	90 93 16 01 	sts	0x0116, r25
     216:	80 93 15 01 	sts	0x0115, r24
     sum = 300;}
   if(sum == 360){
     sum = 400;}
if(sum == 460){
     sum = 500;}
   if(sum == 560){
     21a:	80 33       	cpi	r24, 0x30	; 48
     21c:	22 e0       	ldi	r18, 0x02	; 2
     21e:	92 07       	cpc	r25, r18
     220:	09 f0       	breq	.+2      	; 0x224 <adjust_time+0xb4>
     222:	bd cf       	rjmp	.-134    	; 0x19e <adjust_time+0x2e>
     sum = 600;}
     224:	88 e5       	ldi	r24, 0x58	; 88
     226:	92 e0       	ldi	r25, 0x02	; 2
     228:	90 93 16 01 	sts	0x0116, r25
     22c:	80 93 15 01 	sts	0x0115, r24
     sum = 700;}
   if(sum == 760){
     sum = 800;}
if(sum == 860){
     sum = 900;}
   if(sum == 960){
     230:	80 3c       	cpi	r24, 0xC0	; 192
     232:	23 e0       	ldi	r18, 0x03	; 3
     234:	92 07       	cpc	r25, r18
     236:	09 f0       	breq	.+2      	; 0x23a <adjust_time+0xca>
     238:	bd cf       	rjmp	.-134    	; 0x1b4 <adjust_time+0x44>
     sum = 1000;}
     23a:	88 ee       	ldi	r24, 0xE8	; 232
     23c:	93 e0       	ldi	r25, 0x03	; 3
     23e:	90 93 16 01 	sts	0x0116, r25
     242:	80 93 15 01 	sts	0x0115, r24
     sum = 1100;}
   if(sum == 1160){
     sum = 1200;}
if(sum == 1260){
     sum = 1300;}
   if(sum == 1360){
     246:	80 35       	cpi	r24, 0x50	; 80
     248:	25 e0       	ldi	r18, 0x05	; 5
     24a:	92 07       	cpc	r25, r18
     24c:	09 f0       	breq	.+2      	; 0x250 <adjust_time+0xe0>
     24e:	bd cf       	rjmp	.-134    	; 0x1ca <adjust_time+0x5a>
     sum = 1400;}
     250:	88 e7       	ldi	r24, 0x78	; 120
     252:	95 e0       	ldi	r25, 0x05	; 5
     254:	90 93 16 01 	sts	0x0116, r25
     258:	80 93 15 01 	sts	0x0115, r24
     sum = 1500;}
   if(sum == 1560){
     sum = 1600;}
if(sum == 1660){
     sum = 1700;}
   if(sum == 1760){
     25c:	80 3e       	cpi	r24, 0xE0	; 224
     25e:	26 e0       	ldi	r18, 0x06	; 6
     260:	92 07       	cpc	r25, r18
     262:	09 f0       	breq	.+2      	; 0x266 <adjust_time+0xf6>
     264:	bd cf       	rjmp	.-134    	; 0x1e0 <adjust_time+0x70>
     sum = 1800;}
     266:	88 e0       	ldi	r24, 0x08	; 8
     268:	97 e0       	ldi	r25, 0x07	; 7
     26a:	90 93 16 01 	sts	0x0116, r25
     26e:	80 93 15 01 	sts	0x0115, r24
     sum = 1900;}
   if(sum == 1960){
     sum = 2000;}
if(sum == 2060){
     sum = 2100;}
   if(sum == 2160){
     272:	80 37       	cpi	r24, 0x70	; 112
     274:	28 e0       	ldi	r18, 0x08	; 8
     276:	92 07       	cpc	r25, r18
     278:	09 f0       	breq	.+2      	; 0x27c <adjust_time+0x10c>
     27a:	bd cf       	rjmp	.-134    	; 0x1f6 <adjust_time+0x86>
     sum = 2200;}
     27c:	88 e9       	ldi	r24, 0x98	; 152
     27e:	98 e0       	ldi	r25, 0x08	; 8
     280:	90 93 16 01 	sts	0x0116, r25
     284:	80 93 15 01 	sts	0x0115, r24
     288:	08 95       	ret
extern uint8_t lm73_rd_buf[2];
uint8_t k;

void adjust_time(){   // bounding cont for real time clock
if(sum == 60){
     sum = 100;}
     28a:	84 e6       	ldi	r24, 0x64	; 100
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	90 93 16 01 	sts	0x0116, r25
     292:	80 93 15 01 	sts	0x0115, r24
     sum = 200;}
if(sum == 260){
     sum = 300;}
   if(sum == 360){
     sum = 400;}
if(sum == 460){
     296:	8c 3c       	cpi	r24, 0xCC	; 204
     298:	21 e0       	ldi	r18, 0x01	; 1
     29a:	92 07       	cpc	r25, r18
     29c:	09 f0       	breq	.+2      	; 0x2a0 <adjust_time+0x130>
     29e:	bd cf       	rjmp	.-134    	; 0x21a <adjust_time+0xaa>
     sum = 500;}
     2a0:	84 ef       	ldi	r24, 0xF4	; 244
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	90 93 16 01 	sts	0x0116, r25
     2a8:	80 93 15 01 	sts	0x0115, r24
     sum = 600;}
if(sum == 660){
     sum = 700;}
   if(sum == 760){
     sum = 800;}
if(sum == 860){
     2ac:	8c 35       	cpi	r24, 0x5C	; 92
     2ae:	23 e0       	ldi	r18, 0x03	; 3
     2b0:	92 07       	cpc	r25, r18
     2b2:	09 f0       	breq	.+2      	; 0x2b6 <adjust_time+0x146>
     2b4:	bd cf       	rjmp	.-134    	; 0x230 <adjust_time+0xc0>
     sum = 900;}
     2b6:	84 e8       	ldi	r24, 0x84	; 132
     2b8:	93 e0       	ldi	r25, 0x03	; 3
     2ba:	90 93 16 01 	sts	0x0116, r25
     2be:	80 93 15 01 	sts	0x0115, r24
     sum = 1000;}
if(sum == 1060){
     sum = 1100;}
   if(sum == 1160){
     sum = 1200;}
if(sum == 1260){
     2c2:	8c 3e       	cpi	r24, 0xEC	; 236
     2c4:	24 e0       	ldi	r18, 0x04	; 4
     2c6:	92 07       	cpc	r25, r18
     2c8:	09 f0       	breq	.+2      	; 0x2cc <adjust_time+0x15c>
     2ca:	bd cf       	rjmp	.-134    	; 0x246 <adjust_time+0xd6>
     sum = 1300;}
     2cc:	84 e1       	ldi	r24, 0x14	; 20
     2ce:	95 e0       	ldi	r25, 0x05	; 5
     2d0:	90 93 16 01 	sts	0x0116, r25
     2d4:	80 93 15 01 	sts	0x0115, r24
     sum = 1400;}
if(sum == 1460){
     sum = 1500;}
   if(sum == 1560){
     sum = 1600;}
if(sum == 1660){
     2d8:	8c 37       	cpi	r24, 0x7C	; 124
     2da:	26 e0       	ldi	r18, 0x06	; 6
     2dc:	92 07       	cpc	r25, r18
     2de:	09 f0       	breq	.+2      	; 0x2e2 <adjust_time+0x172>
     2e0:	bd cf       	rjmp	.-134    	; 0x25c <adjust_time+0xec>
     sum = 1700;}
     2e2:	84 ea       	ldi	r24, 0xA4	; 164
     2e4:	96 e0       	ldi	r25, 0x06	; 6
     2e6:	90 93 16 01 	sts	0x0116, r25
     2ea:	80 93 15 01 	sts	0x0115, r24
     sum = 1800;}
if(sum == 1860){
     sum = 1900;}
   if(sum == 1960){
     sum = 2000;}
if(sum == 2060){
     2ee:	8c 30       	cpi	r24, 0x0C	; 12
     2f0:	28 e0       	ldi	r18, 0x08	; 8
     2f2:	92 07       	cpc	r25, r18
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <adjust_time+0x188>
     2f6:	bd cf       	rjmp	.-134    	; 0x272 <adjust_time+0x102>
     sum = 2100;}
     2f8:	84 e3       	ldi	r24, 0x34	; 52
     2fa:	98 e0       	ldi	r25, 0x08	; 8
     2fc:	90 93 16 01 	sts	0x0116, r25
     300:	80 93 15 01 	sts	0x0115, r24
     304:	08 95       	ret
     sum = 100;}
   if(sum == 160){
     sum = 200;}
if(sum == 260){
     sum = 300;}
   if(sum == 360){
     306:	88 36       	cpi	r24, 0x68	; 104
     308:	21 e0       	ldi	r18, 0x01	; 1
     30a:	92 07       	cpc	r25, r18
     30c:	21 f6       	brne	.-120    	; 0x296 <adjust_time+0x126>
     sum = 400;}
     30e:	80 e9       	ldi	r24, 0x90	; 144
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	90 93 16 01 	sts	0x0116, r25
     316:	80 93 15 01 	sts	0x0115, r24
     sum = 500;}
   if(sum == 560){
     sum = 600;}
if(sum == 660){
     sum = 700;}
   if(sum == 760){
     31a:	88 3f       	cpi	r24, 0xF8	; 248
     31c:	22 e0       	ldi	r18, 0x02	; 2
     31e:	92 07       	cpc	r25, r18
     320:	29 f6       	brne	.-118    	; 0x2ac <adjust_time+0x13c>
     sum = 800;}
     322:	80 e2       	ldi	r24, 0x20	; 32
     324:	93 e0       	ldi	r25, 0x03	; 3
     326:	90 93 16 01 	sts	0x0116, r25
     32a:	80 93 15 01 	sts	0x0115, r24
     sum = 900;}
   if(sum == 960){
     sum = 1000;}
if(sum == 1060){
     sum = 1100;}
   if(sum == 1160){
     32e:	88 38       	cpi	r24, 0x88	; 136
     330:	24 e0       	ldi	r18, 0x04	; 4
     332:	92 07       	cpc	r25, r18
     334:	31 f6       	brne	.-116    	; 0x2c2 <adjust_time+0x152>
     sum = 1200;}
     336:	80 eb       	ldi	r24, 0xB0	; 176
     338:	94 e0       	ldi	r25, 0x04	; 4
     33a:	90 93 16 01 	sts	0x0116, r25
     33e:	80 93 15 01 	sts	0x0115, r24
     sum = 1300;}
   if(sum == 1360){
     sum = 1400;}
if(sum == 1460){
     sum = 1500;}
   if(sum == 1560){
     342:	88 31       	cpi	r24, 0x18	; 24
     344:	26 e0       	ldi	r18, 0x06	; 6
     346:	92 07       	cpc	r25, r18
     348:	39 f6       	brne	.-114    	; 0x2d8 <adjust_time+0x168>
     sum = 1600;}
     34a:	80 e4       	ldi	r24, 0x40	; 64
     34c:	96 e0       	ldi	r25, 0x06	; 6
     34e:	90 93 16 01 	sts	0x0116, r25
     352:	80 93 15 01 	sts	0x0115, r24
     sum = 1700;}
   if(sum == 1760){
     sum = 1800;}
if(sum == 1860){
     sum = 1900;}
   if(sum == 1960){
     356:	88 3a       	cpi	r24, 0xA8	; 168
     358:	27 e0       	ldi	r18, 0x07	; 7
     35a:	92 07       	cpc	r25, r18
     35c:	41 f6       	brne	.-112    	; 0x2ee <adjust_time+0x17e>
     sum = 2000;}
     35e:	80 ed       	ldi	r24, 0xD0	; 208
     360:	97 e0       	ldi	r25, 0x07	; 7
     362:	90 93 16 01 	sts	0x0116, r25
     366:	80 93 15 01 	sts	0x0115, r24
     sum = 2100;}
   if(sum == 2160){
     sum = 2200;}
if(sum == 2260){
     sum = 2300;}
   if(sum == 2360){
     36a:	88 33       	cpi	r24, 0x38	; 56
     36c:	99 40       	sbci	r25, 0x09	; 9
     36e:	21 f4       	brne	.+8      	; 0x378 <adjust_time+0x208>
     sum = 0;}
     370:	10 92 16 01 	sts	0x0116, r1
     374:	10 92 15 01 	sts	0x0115, r1
     378:	08 95       	ret

0000037a <chk_buttons>:
//push so a debounce and toggle function can be implemented at the same time.  
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
     37a:	48 2f       	mov	r20, r24

  static uint16_t state[8] ={0x00}; //holds present state
  state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
     37c:	e8 2f       	mov	r30, r24
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	99 b3       	in	r25, 0x19	; 25
     382:	ee 0f       	add	r30, r30
     384:	ff 1f       	adc	r31, r31
     386:	e0 5d       	subi	r30, 0xD0	; 208
     388:	fd 4f       	sbci	r31, 0xFD	; 253
     38a:	20 81       	ld	r18, Z
     38c:	31 81       	ldd	r19, Z+1	; 0x01
     38e:	22 0f       	add	r18, r18
     390:	33 1f       	adc	r19, r19
     392:	30 6e       	ori	r19, 0xE0	; 224
     394:	89 2f       	mov	r24, r25
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	02 c0       	rjmp	.+4      	; 0x39e <chk_buttons+0x24>
     39a:	95 95       	asr	r25
     39c:	87 95       	ror	r24
     39e:	4a 95       	dec	r20
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <chk_buttons+0x20>
     3a2:	81 70       	andi	r24, 0x01	; 1
     3a4:	99 27       	eor	r25, r25
     3a6:	28 2b       	or	r18, r24
     3a8:	39 2b       	or	r19, r25
     3aa:	31 83       	std	Z+1, r19	; 0x01
     3ac:	20 83       	st	Z, r18
  if (state[button] == 0xF000) return 1;
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	21 15       	cp	r18, r1
     3b2:	30 4f       	sbci	r19, 0xF0	; 240
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <chk_buttons+0x3e>
     3b6:	80 e0       	ldi	r24, 0x00	; 0
  return 0;

}
     3b8:	08 95       	ret

000003ba <spi_init>:
//*********************************************************************
                                //SPI initialize
//*********************************************************************
void spi_init()
{
        DDRF  |= 0x08;  //port F bit 3 is enable for LCD
     3ba:	e1 e6       	ldi	r30, 0x61	; 97
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	80 81       	ld	r24, Z
     3c0:	88 60       	ori	r24, 0x08	; 8
     3c2:	80 83       	st	Z, r24
        PORTF &= 0xF7;  //port F bit 3 is initially low
     3c4:	e2 e6       	ldi	r30, 0x62	; 98
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	87 7f       	andi	r24, 0xF7	; 247
     3cc:	80 83       	st	Z, r24
	DDRB = 0xF7;    // set ss_n, sck, mosi
     3ce:	87 ef       	ldi	r24, 0xF7	; 247
     3d0:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE) | (1<<MSTR);// master mode
     3d2:	8d b1       	in	r24, 0x0d	; 13
     3d4:	80 65       	ori	r24, 0x50	; 80
     3d6:	8d b9       	out	0x0d, r24	; 13
	SPSR |= (1<<SPI2X);// double speed operation
     3d8:	70 9a       	sbi	0x0e, 0	; 14
     3da:	08 95       	ret

000003dc <segsum>:
//***********************************************************************************
//                                   segment_sum                                    
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(sum) {
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	ec 01       	movw	r28, r24
uint8_t tens;  
uint8_t hundreds;  
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
tens = (sum/10)%10;
hundreds = (sum/100)%10;
     3e6:	64 e6       	ldi	r22, 0x64	; 100
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divmodhi4>
     3ee:	cb 01       	movw	r24, r22
     3f0:	0a e0       	ldi	r16, 0x0A	; 10
     3f2:	10 e0       	ldi	r17, 0x00	; 0
     3f4:	b8 01       	movw	r22, r16
     3f6:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divmodhi4>
     3fa:	fc 01       	movw	r30, r24
thousands = (sum/1000)%10;
     3fc:	ce 01       	movw	r24, r28
     3fe:	68 ee       	ldi	r22, 0xE8	; 232
     400:	73 e0       	ldi	r23, 0x03	; 3
     402:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divmodhi4>
     406:	cb 01       	movw	r24, r22
     408:	b8 01       	movw	r22, r16
     40a:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divmodhi4>
     40e:	9c 01       	movw	r18, r24
void segsum(sum) {
uint8_t ones;  
uint8_t tens;  
uint8_t hundreds;  
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
     410:	ce 01       	movw	r24, r28
     412:	b8 01       	movw	r22, r16
     414:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divmodhi4>
tens = (sum/10)%10;
hundreds = (sum/100)%10;
thousands = (sum/1000)%10;
segment_data[0] = dec_to_7seg[ones];
     418:	dc 01       	movw	r26, r24
     41a:	bb 27       	eor	r27, r27
     41c:	a0 50       	subi	r26, 0x00	; 0
     41e:	bf 4f       	sbci	r27, 0xFF	; 255
     420:	8c 91       	ld	r24, X
     422:	80 93 a8 02 	sts	0x02A8, r24
uint8_t ones;  
uint8_t tens;  
uint8_t hundreds;  
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
tens = (sum/10)%10;
     426:	cb 01       	movw	r24, r22
     428:	b8 01       	movw	r22, r16
     42a:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divmodhi4>
hundreds = (sum/100)%10;
thousands = (sum/1000)%10;
segment_data[0] = dec_to_7seg[ones];
segment_data[1] = dec_to_7seg[tens];
     42e:	dc 01       	movw	r26, r24
     430:	bb 27       	eor	r27, r27
     432:	a0 50       	subi	r26, 0x00	; 0
     434:	bf 4f       	sbci	r27, 0xFF	; 255
     436:	8c 91       	ld	r24, X
     438:	80 93 a9 02 	sts	0x02A9, r24
if((seconds % 2) == 0){segment_data[2] = dec_to_7seg[10];}
     43c:	80 91 25 02 	lds	r24, 0x0225
     440:	80 fd       	sbrc	r24, 0
     442:	22 c0       	rjmp	.+68     	; 0x488 <segsum+0xac>
     444:	80 91 0a 01 	lds	r24, 0x010A
     448:	80 93 aa 02 	sts	0x02AA, r24
else segment_data[2] = dec_to_7seg[11];
segment_data[3] = dec_to_7seg[hundreds];
     44c:	ff 27       	eor	r31, r31
     44e:	e0 50       	subi	r30, 0x00	; 0
     450:	ff 4f       	sbci	r31, 0xFF	; 255
     452:	80 81       	ld	r24, Z
     454:	80 93 ab 02 	sts	0x02AB, r24
segment_data[4] = dec_to_7seg[thousands];
     458:	33 27       	eor	r19, r19
     45a:	f9 01       	movw	r30, r18
     45c:	e0 50       	subi	r30, 0x00	; 0
     45e:	ff 4f       	sbci	r31, 0xFF	; 255
     460:	80 81       	ld	r24, Z
     462:	80 93 ac 02 	sts	0x02AC, r24
if(sum<10){           //blancking leading 0s
     466:	ca 30       	cpi	r28, 0x0A	; 10
     468:	d1 05       	cpc	r29, r1
     46a:	ec f0       	brlt	.+58     	; 0x4a6 <segsum+0xca>
  segment_data[1] = 0xFF;
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<100){
     46c:	c4 36       	cpi	r28, 0x64	; 100
     46e:	d1 05       	cpc	r29, r1
     470:	84 f0       	brlt	.+32     	; 0x492 <segsum+0xb6>
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<1000){
     472:	c8 3e       	cpi	r28, 0xE8	; 232
     474:	d3 40       	sbci	r29, 0x03	; 3
     476:	1c f4       	brge	.+6      	; 0x47e <segsum+0xa2>
  segment_data[4] = 0xFF;}
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	80 93 ac 02 	sts	0x02AC, r24

}
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	1f 91       	pop	r17
     484:	0f 91       	pop	r16
     486:	08 95       	ret
hundreds = (sum/100)%10;
thousands = (sum/1000)%10;
segment_data[0] = dec_to_7seg[ones];
segment_data[1] = dec_to_7seg[tens];
if((seconds % 2) == 0){segment_data[2] = dec_to_7seg[10];}
else segment_data[2] = dec_to_7seg[11];
     488:	80 91 0b 01 	lds	r24, 0x010B
     48c:	80 93 aa 02 	sts	0x02AA, r24
     490:	dd cf       	rjmp	.-70     	; 0x44c <segsum+0x70>
if(sum<10){           //blancking leading 0s
  segment_data[1] = 0xFF;
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<100){
  segment_data[3] = 0xFF;
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	80 93 ab 02 	sts	0x02AB, r24
  segment_data[4] = 0xFF;}
     498:	80 93 ac 02 	sts	0x02AC, r24
else if(sum<1000){
  segment_data[4] = 0xFF;}

}
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	08 95       	ret
if((seconds % 2) == 0){segment_data[2] = dec_to_7seg[10];}
else segment_data[2] = dec_to_7seg[11];
segment_data[3] = dec_to_7seg[hundreds];
segment_data[4] = dec_to_7seg[thousands];
if(sum<10){           //blancking leading 0s
  segment_data[1] = 0xFF;
     4a6:	8f ef       	ldi	r24, 0xFF	; 255
     4a8:	80 93 a9 02 	sts	0x02A9, r24
  segment_data[3] = 0xFF;
     4ac:	80 93 ab 02 	sts	0x02AB, r24
  segment_data[4] = 0xFF;}
     4b0:	80 93 ac 02 	sts	0x02AC, r24
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<1000){
  segment_data[4] = 0xFF;}

}
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	1f 91       	pop	r17
     4ba:	0f 91       	pop	r16
     4bc:	08 95       	ret

000004be <encoder>:
void encoder(){

 static uint8_t a_past = 0x00; // holds last value
 static uint8_t b_past = 0x00; // holds last value for 

 DDRE = 0xFF;                  //set port E to output
     4be:	8f ef       	ldi	r24, 0xFF	; 255
     4c0:	82 b9       	out	0x02, r24	; 2
 PORTE |= 0x20 ;               // inhibitor high
     4c2:	1d 9a       	sbi	0x03, 5	; 3
 asm("nop");
     4c4:	00 00       	nop
 asm("nop");
     4c6:	00 00       	nop
 PORTE &= ~(0x40);             //SH_LD/ low
     4c8:	1e 98       	cbi	0x03, 6	; 3
 asm("nop");
     4ca:	00 00       	nop
 asm("nop");
     4cc:	00 00       	nop
 PORTE |= 0x40;               //SH/LD_n high
     4ce:	1e 9a       	sbi	0x03, 6	; 3
 PORTE &= ~(0x20);            //inhibitor low
     4d0:	1d 98       	cbi	0x03, 5	; 3
 uint8_t dat = data&0x03;     // mask data
     4d2:	90 91 20 02 	lds	r25, 0x0220
 uint8_t dat1 = data&0x0C;    // mask data1

if((state & 0x03) == 1){
     4d6:	80 91 22 02 	lds	r24, 0x0222
     4da:	83 70       	andi	r24, 0x03	; 3
     4dc:	81 30       	cpi	r24, 0x01	; 1
     4de:	b1 f0       	breq	.+44     	; 0x50c <encoder+0x4e>
                  	break;
		}
	
    }
 }
if((state & 0x03) == 2){
     4e0:	82 30       	cpi	r24, 0x02	; 2
     4e2:	09 f0       	breq	.+2      	; 0x4e6 <encoder+0x28>
     4e4:	08 95       	ret
 asm("nop");
 asm("nop");
 PORTE |= 0x40;               //SH/LD_n high
 PORTE &= ~(0x20);            //inhibitor low
 uint8_t dat = data&0x03;     // mask data
 uint8_t dat1 = data&0x0C;    // mask data1
     4e6:	9c 70       	andi	r25, 0x0C	; 12
		}
	
    }
 }
if((state & 0x03) == 2){
switch(b_past)                 //inc and dec count according to direction of encoder for second encoder
     4e8:	80 91 2e 02 	lds	r24, 0x022E
     4ec:	84 30       	cpi	r24, 0x04	; 4
     4ee:	01 f1       	breq	.+64     	; 0x530 <encoder+0x72>
     4f0:	c8 f0       	brcs	.+50     	; 0x524 <encoder+0x66>
     4f2:	88 30       	cpi	r24, 0x08	; 8
     4f4:	11 f0       	breq	.+4      	; 0x4fa <encoder+0x3c>
     4f6:	8c 30       	cpi	r24, 0x0C	; 12
     4f8:	11 f4       	brne	.+4      	; 0x4fe <encoder+0x40>
                }
        case 0x08:
                {
                        if(dat1==0x00){}
                        else if(dat1==0x0C){}
                        b_past = dat1;
     4fa:	90 93 2e 02 	sts	0x022E, r25
     4fe:	20 91 15 01 	lds	r18, 0x0115
     502:	30 91 16 01 	lds	r19, 0x0116
                        break;
                }

    }
  segsum(sum);               //display increment setting of real time clock
     506:	c9 01       	movw	r24, r18
     508:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <segsum>
 PORTE &= ~(0x40);             //SH_LD/ low
 asm("nop");
 asm("nop");
 PORTE |= 0x40;               //SH/LD_n high
 PORTE &= ~(0x20);            //inhibitor low
 uint8_t dat = data&0x03;     // mask data
     50c:	29 2f       	mov	r18, r25
     50e:	23 70       	andi	r18, 0x03	; 3
 uint8_t dat1 = data&0x0C;    // mask data1

if((state & 0x03) == 1){
	switch(a_past)        // inc & dec according to direction of encoder for encoder 1
     510:	80 91 2f 02 	lds	r24, 0x022F
     514:	81 30       	cpi	r24, 0x01	; 1
     516:	b9 f0       	breq	.+46     	; 0x546 <encoder+0x88>
     518:	40 f0       	brcs	.+16     	; 0x52a <encoder+0x6c>
     51a:	82 30       	cpi	r24, 0x02	; 2
     51c:	31 f0       	breq	.+12     	; 0x52a <encoder+0x6c>
     51e:	83 30       	cpi	r24, 0x03	; 3
     520:	21 f0       	breq	.+8      	; 0x52a <encoder+0x6c>
     522:	08 95       	ret
		}
	
    }
 }
if((state & 0x03) == 2){
switch(b_past)                 //inc and dec count according to direction of encoder for second encoder
     524:	88 23       	and	r24, r24
     526:	49 f3       	breq	.-46     	; 0x4fa <encoder+0x3c>
     528:	ea cf       	rjmp	.-44     	; 0x4fe <encoder+0x40>
		}
        case 0x02:
		{
			if(dat==0x00){}
                  	else if(dat==0x03){}
			a_past = dat;
     52a:	20 93 2f 02 	sts	0x022F, r18
                  	break;
     52e:	08 95       	ret
                        break;
                }

        case 0x04:
                {
                        if(dat1==0x0C){sum = sum + counter_value;}      // inc count
     530:	9c 30       	cpi	r25, 0x0C	; 12
     532:	99 f1       	breq	.+102    	; 0x59a <encoder+0xdc>
                        else if(dat1==0x00){sum = sum - counter_value;} // dec count
     534:	99 23       	and	r25, r25
     536:	71 f0       	breq	.+28     	; 0x554 <encoder+0x96>
     538:	20 91 15 01 	lds	r18, 0x0115
     53c:	30 91 16 01 	lds	r19, 0x0116
                        b_past = dat1;
     540:	90 93 2e 02 	sts	0x022E, r25
                        break;
     544:	e0 cf       	rjmp	.-64     	; 0x506 <encoder+0x48>
                  	break;
		}

        case 0x01:
		{
		  if(dat==0x03){total = total + counter_value;
     546:	23 30       	cpi	r18, 0x03	; 3
     548:	91 f0       	breq	.+36     	; 0x56e <encoder+0xb0>
                                        _delay_ms(2);}           // inc count
                  else if(dat==0x00){total = total - counter_value;
     54a:	22 23       	and	r18, r18
     54c:	99 f1       	breq	.+102    	; 0x5b4 <encoder+0xf6>
                                           _delay_ms(2);}        // dec count
			a_past = dat;
     54e:	20 93 2f 02 	sts	0x022F, r18
                  	break;
     552:	c6 cf       	rjmp	.-116    	; 0x4e0 <encoder+0x22>
                }

        case 0x04:
                {
                        if(dat1==0x0C){sum = sum + counter_value;}      // inc count
                        else if(dat1==0x00){sum = sum - counter_value;} // dec count
     554:	80 91 21 02 	lds	r24, 0x0221
     558:	20 91 15 01 	lds	r18, 0x0115
     55c:	30 91 16 01 	lds	r19, 0x0116
     560:	28 1b       	sub	r18, r24
     562:	31 09       	sbc	r19, r1
     564:	30 93 16 01 	sts	0x0116, r19
     568:	20 93 15 01 	sts	0x0115, r18
     56c:	e9 cf       	rjmp	.-46     	; 0x540 <encoder+0x82>
                  	break;
		}

        case 0x01:
		{
		  if(dat==0x03){total = total + counter_value;
     56e:	80 91 21 02 	lds	r24, 0x0221
     572:	40 91 13 01 	lds	r20, 0x0113
     576:	50 91 14 01 	lds	r21, 0x0114
     57a:	48 0f       	add	r20, r24
     57c:	51 1d       	adc	r21, r1
                                        _delay_ms(2);}           // inc count
                  else if(dat==0x00){total = total - counter_value;
     57e:	50 93 14 01 	sts	0x0114, r21
     582:	40 93 13 01 	sts	0x0113, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     586:	ef e3       	ldi	r30, 0x3F	; 63
     588:	ff e1       	ldi	r31, 0x1F	; 31
     58a:	31 97       	sbiw	r30, 0x01	; 1
     58c:	f1 f7       	brne	.-4      	; 0x58a <encoder+0xcc>
     58e:	00 c0       	rjmp	.+0      	; 0x590 <encoder+0xd2>
     590:	00 00       	nop
     592:	80 91 22 02 	lds	r24, 0x0222
     596:	83 70       	andi	r24, 0x03	; 3
     598:	da cf       	rjmp	.-76     	; 0x54e <encoder+0x90>
                        break;
                }

        case 0x04:
                {
                        if(dat1==0x0C){sum = sum + counter_value;}      // inc count
     59a:	80 91 21 02 	lds	r24, 0x0221
     59e:	20 91 15 01 	lds	r18, 0x0115
     5a2:	30 91 16 01 	lds	r19, 0x0116
     5a6:	28 0f       	add	r18, r24
     5a8:	31 1d       	adc	r19, r1
     5aa:	30 93 16 01 	sts	0x0116, r19
     5ae:	20 93 15 01 	sts	0x0115, r18
     5b2:	c6 cf       	rjmp	.-116    	; 0x540 <encoder+0x82>

        case 0x01:
		{
		  if(dat==0x03){total = total + counter_value;
                                        _delay_ms(2);}           // inc count
                  else if(dat==0x00){total = total - counter_value;
     5b4:	80 91 21 02 	lds	r24, 0x0221
     5b8:	40 91 13 01 	lds	r20, 0x0113
     5bc:	50 91 14 01 	lds	r21, 0x0114
     5c0:	48 1b       	sub	r20, r24
     5c2:	51 09       	sbc	r21, r1
     5c4:	dc cf       	rjmp	.-72     	; 0x57e <encoder+0xc0>

000005c6 <set_freq>:
void set_freq(){      //tune different frequencies using encoder

 static uint8_t a_past = 0x00; // holds last value
 static uint8_t b_past = 0x00; // holds last value for 

 DDRE = 0xFF;                  //set port E to output
     5c6:	8f ef       	ldi	r24, 0xFF	; 255
     5c8:	82 b9       	out	0x02, r24	; 2
 PORTE |= 0x20 ;               // inhibitor high
     5ca:	1d 9a       	sbi	0x03, 5	; 3
 asm("nop");
     5cc:	00 00       	nop
 asm("nop");
     5ce:	00 00       	nop
 PORTE &= ~(0x40);             //SH_LD/ low
     5d0:	1e 98       	cbi	0x03, 6	; 3
 asm("nop");
     5d2:	00 00       	nop
 asm("nop");
     5d4:	00 00       	nop
 PORTE |= 0x40;               //SH/LD_n high
     5d6:	1e 9a       	sbi	0x03, 6	; 3
 PORTE &= ~(0x20);            //inhibitor low
     5d8:	1d 98       	cbi	0x03, 5	; 3
 uint8_t dat = data&0x03;     // mask data
     5da:	90 91 20 02 	lds	r25, 0x0220
     5de:	29 2f       	mov	r18, r25
     5e0:	23 70       	andi	r18, 0x03	; 3
 uint8_t dat1 = data&0x0C;    // mask data1


	switch(a_past)        // inc & dec according to direction of encoder for encoder 1
     5e2:	80 91 2d 02 	lds	r24, 0x022D
     5e6:	81 30       	cpi	r24, 0x01	; 1
     5e8:	01 f1       	breq	.+64     	; 0x62a <set_freq+0x64>
     5ea:	20 f0       	brcs	.+8      	; 0x5f4 <set_freq+0x2e>
     5ec:	82 30       	cpi	r24, 0x02	; 2
     5ee:	11 f0       	breq	.+4      	; 0x5f4 <set_freq+0x2e>
     5f0:	83 30       	cpi	r24, 0x03	; 3
     5f2:	11 f4       	brne	.+4      	; 0x5f8 <set_freq+0x32>
		}
        case 0x02:
		{
			if(dat==0x00){}
                  	else if(dat==0x03){}
			a_past = dat;
     5f4:	20 93 2d 02 	sts	0x022D, r18
                  	break;
		}
	
    }
if((state & 0x03) == 2){
     5f8:	80 91 22 02 	lds	r24, 0x0222
     5fc:	83 70       	andi	r24, 0x03	; 3
     5fe:	82 30       	cpi	r24, 0x02	; 2
     600:	09 f0       	breq	.+2      	; 0x604 <set_freq+0x3e>
     602:	08 95       	ret
 asm("nop");
 asm("nop");
 PORTE |= 0x40;               //SH/LD_n high
 PORTE &= ~(0x20);            //inhibitor low
 uint8_t dat = data&0x03;     // mask data
 uint8_t dat1 = data&0x0C;    // mask data1
     604:	9c 70       	andi	r25, 0x0C	; 12
                  	break;
		}
	
    }
if((state & 0x03) == 2){
switch(b_past)                 //inc and dec count according to direction of encoder for second encoder
     606:	80 91 2c 02 	lds	r24, 0x022C
     60a:	84 30       	cpi	r24, 0x04	; 4
     60c:	31 f1       	breq	.+76     	; 0x65a <set_freq+0x94>
     60e:	10 f1       	brcs	.+68     	; 0x654 <set_freq+0x8e>
     610:	88 30       	cpi	r24, 0x08	; 8
     612:	11 f0       	breq	.+4      	; 0x618 <set_freq+0x52>
     614:	8c 30       	cpi	r24, 0x0C	; 12
     616:	11 f4       	brne	.+4      	; 0x61c <set_freq+0x56>
                }
        case 0x08:
                {
                        if(dat1==0x00){}
                        else if(dat1==0x0C){}
                        b_past = dat1;
     618:	90 93 2c 02 	sts	0x022C, r25
     61c:	20 91 15 01 	lds	r18, 0x0115
     620:	30 91 16 01 	lds	r19, 0x0116
                        break;
                }

    }
  segsum(sum);               //display increment setting of real time clock
     624:	c9 01       	movw	r24, r18
     626:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <segsum>
                  	break;
		}

        case 0x01:
		{
		  if(dat==0x03){current_fm_freq = current_fm_freq + 20;
     62a:	23 30       	cpi	r18, 0x03	; 3
     62c:	09 f1       	breq	.+66     	; 0x670 <set_freq+0xaa>
                                        _delay_ms(2);}           // inc count
                  else if(dat==0x00){current_fm_freq = current_fm_freq - 20;
     62e:	21 11       	cpse	r18, r1
     630:	e1 cf       	rjmp	.-62     	; 0x5f4 <set_freq+0x2e>
     632:	40 91 17 01 	lds	r20, 0x0117
     636:	50 91 18 01 	lds	r21, 0x0118
     63a:	44 51       	subi	r20, 0x14	; 20
     63c:	51 09       	sbc	r21, r1
     63e:	50 93 18 01 	sts	0x0118, r21
     642:	40 93 17 01 	sts	0x0117, r20
     646:	ef e3       	ldi	r30, 0x3F	; 63
     648:	ff e1       	ldi	r31, 0x1F	; 31
     64a:	31 97       	sbiw	r30, 0x01	; 1
     64c:	f1 f7       	brne	.-4      	; 0x64a <set_freq+0x84>
     64e:	00 c0       	rjmp	.+0      	; 0x650 <set_freq+0x8a>
     650:	00 00       	nop
     652:	d0 cf       	rjmp	.-96     	; 0x5f4 <set_freq+0x2e>
                  	break;
		}
	
    }
if((state & 0x03) == 2){
switch(b_past)                 //inc and dec count according to direction of encoder for second encoder
     654:	88 23       	and	r24, r24
     656:	01 f3       	breq	.-64     	; 0x618 <set_freq+0x52>
     658:	e1 cf       	rjmp	.-62     	; 0x61c <set_freq+0x56>
                        break;
                }

        case 0x04:
                {
                        if(dat1==0x0C){sum = sum + counter_value;}      // inc count
     65a:	9c 30       	cpi	r25, 0x0C	; 12
     65c:	39 f1       	breq	.+78     	; 0x6ac <set_freq+0xe6>
                        else if(dat1==0x00){sum = sum - counter_value;} // dec count
     65e:	99 23       	and	r25, r25
     660:	c1 f0       	breq	.+48     	; 0x692 <set_freq+0xcc>
     662:	20 91 15 01 	lds	r18, 0x0115
     666:	30 91 16 01 	lds	r19, 0x0116
                        b_past = dat1;
     66a:	90 93 2c 02 	sts	0x022C, r25
                        break;
     66e:	da cf       	rjmp	.-76     	; 0x624 <set_freq+0x5e>
                  	break;
		}

        case 0x01:
		{
		  if(dat==0x03){current_fm_freq = current_fm_freq + 20;
     670:	40 91 17 01 	lds	r20, 0x0117
     674:	50 91 18 01 	lds	r21, 0x0118
     678:	4c 5e       	subi	r20, 0xEC	; 236
     67a:	5f 4f       	sbci	r21, 0xFF	; 255
     67c:	50 93 18 01 	sts	0x0118, r21
     680:	40 93 17 01 	sts	0x0117, r20
     684:	ef e3       	ldi	r30, 0x3F	; 63
     686:	ff e1       	ldi	r31, 0x1F	; 31
     688:	31 97       	sbiw	r30, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <set_freq+0xc2>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <set_freq+0xc8>
     68e:	00 00       	nop
     690:	b1 cf       	rjmp	.-158    	; 0x5f4 <set_freq+0x2e>
                }

        case 0x04:
                {
                        if(dat1==0x0C){sum = sum + counter_value;}      // inc count
                        else if(dat1==0x00){sum = sum - counter_value;} // dec count
     692:	80 91 21 02 	lds	r24, 0x0221
     696:	20 91 15 01 	lds	r18, 0x0115
     69a:	30 91 16 01 	lds	r19, 0x0116
     69e:	28 1b       	sub	r18, r24
     6a0:	31 09       	sbc	r19, r1
     6a2:	30 93 16 01 	sts	0x0116, r19
     6a6:	20 93 15 01 	sts	0x0115, r18
     6aa:	df cf       	rjmp	.-66     	; 0x66a <set_freq+0xa4>
                        break;
                }

        case 0x04:
                {
                        if(dat1==0x0C){sum = sum + counter_value;}      // inc count
     6ac:	80 91 21 02 	lds	r24, 0x0221
     6b0:	20 91 15 01 	lds	r18, 0x0115
     6b4:	30 91 16 01 	lds	r19, 0x0116
     6b8:	28 0f       	add	r18, r24
     6ba:	31 1d       	adc	r19, r1
     6bc:	30 93 16 01 	sts	0x0116, r19
     6c0:	20 93 15 01 	sts	0x0115, r18
     6c4:	d2 cf       	rjmp	.-92     	; 0x66a <set_freq+0xa4>

000006c6 <volume_control>:
void volume_control(){  //volume control using encoder

 static uint8_t a_past = 0x00; // holds last value
 static uint8_t b_past = 0x00; // holds last value for 

 DDRE = 0xFF;             //set port E to output
     6c6:	8f ef       	ldi	r24, 0xFF	; 255
     6c8:	82 b9       	out	0x02, r24	; 2
 PORTE |= 0x20 ;          // inhibitor high
     6ca:	1d 9a       	sbi	0x03, 5	; 3
 asm("nop");
     6cc:	00 00       	nop
 asm("nop");
     6ce:	00 00       	nop
 PORTE &= ~(0x40);        //SH_LD/ low
     6d0:	1e 98       	cbi	0x03, 6	; 3
 asm("nop");
     6d2:	00 00       	nop
 asm("nop");
     6d4:	00 00       	nop
 PORTE |= 0x40;           //SH/LD_n high
     6d6:	1e 9a       	sbi	0x03, 6	; 3
 PORTE &= ~(0x20);        //inhibitor low
     6d8:	1d 98       	cbi	0x03, 5	; 3
 uint8_t dat = data&0x03;  // mask data
     6da:	90 91 20 02 	lds	r25, 0x0220
     6de:	29 2f       	mov	r18, r25
     6e0:	23 70       	andi	r18, 0x03	; 3
 uint8_t dat1 = data&0x0C; // mask data1


	switch(a_past)  // inc & dec according to direction of encoder for encoder 1
     6e2:	80 91 2b 02 	lds	r24, 0x022B
     6e6:	81 30       	cpi	r24, 0x01	; 1
     6e8:	01 f1       	breq	.+64     	; 0x72a <volume_control+0x64>
     6ea:	20 f0       	brcs	.+8      	; 0x6f4 <volume_control+0x2e>
     6ec:	82 30       	cpi	r24, 0x02	; 2
     6ee:	11 f0       	breq	.+4      	; 0x6f4 <volume_control+0x2e>
     6f0:	83 30       	cpi	r24, 0x03	; 3
     6f2:	11 f4       	brne	.+4      	; 0x6f8 <volume_control+0x32>
		}
        case 0x02:
		{
			if(dat==0x00){}
                  	else if(dat==0x03){}
			a_past = dat;
     6f4:	20 93 2b 02 	sts	0x022B, r18
                  	break;
		}
	
    }
if((state & 0x03) == 2){
     6f8:	80 91 22 02 	lds	r24, 0x0222
     6fc:	83 70       	andi	r24, 0x03	; 3
     6fe:	82 30       	cpi	r24, 0x02	; 2
     700:	09 f0       	breq	.+2      	; 0x704 <volume_control+0x3e>
     702:	08 95       	ret
 asm("nop");
 asm("nop");
 PORTE |= 0x40;           //SH/LD_n high
 PORTE &= ~(0x20);        //inhibitor low
 uint8_t dat = data&0x03;  // mask data
 uint8_t dat1 = data&0x0C; // mask data1
     704:	9c 70       	andi	r25, 0x0C	; 12
                  	break;
		}
	
    }
if((state & 0x03) == 2){
switch(b_past)  //inc dec count according to direction of encoder for second encoder
     706:	80 91 2a 02 	lds	r24, 0x022A
     70a:	84 30       	cpi	r24, 0x04	; 4
     70c:	29 f1       	breq	.+74     	; 0x758 <volume_control+0x92>
     70e:	08 f1       	brcs	.+66     	; 0x752 <volume_control+0x8c>
     710:	88 30       	cpi	r24, 0x08	; 8
     712:	11 f0       	breq	.+4      	; 0x718 <volume_control+0x52>
     714:	8c 30       	cpi	r24, 0x0C	; 12
     716:	11 f4       	brne	.+4      	; 0x71c <volume_control+0x56>
                }
        case 0x08:
                {
                        if(dat1==0x00){}
                        else if(dat1==0x0C){}
                        b_past = dat1;
     718:	90 93 2a 02 	sts	0x022A, r25
     71c:	20 91 15 01 	lds	r18, 0x0115
     720:	30 91 16 01 	lds	r19, 0x0116
                        break;
                }

    }
  segsum(sum);       //display increment setting of real time clock
     724:	c9 01       	movw	r24, r18
     726:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <segsum>
                  	break;
		}

        case 0x01:
		{
		  if(dat==0x03){OCR3A = OCR3A - 0x0200;
     72a:	23 30       	cpi	r18, 0x03	; 3
     72c:	01 f1       	breq	.+64     	; 0x76e <volume_control+0xa8>
                                        _delay_ms(2);}// inc count
                  else if(dat==0x00){OCR3A = OCR3A + 0x0200;
     72e:	21 11       	cpse	r18, r1
     730:	e1 cf       	rjmp	.-62     	; 0x6f4 <volume_control+0x2e>
     732:	40 91 86 00 	lds	r20, 0x0086
     736:	50 91 87 00 	lds	r21, 0x0087
     73a:	5e 5f       	subi	r21, 0xFE	; 254
     73c:	50 93 87 00 	sts	0x0087, r21
     740:	40 93 86 00 	sts	0x0086, r20
     744:	ef e3       	ldi	r30, 0x3F	; 63
     746:	ff e1       	ldi	r31, 0x1F	; 31
     748:	31 97       	sbiw	r30, 0x01	; 1
     74a:	f1 f7       	brne	.-4      	; 0x748 <volume_control+0x82>
     74c:	00 c0       	rjmp	.+0      	; 0x74e <volume_control+0x88>
     74e:	00 00       	nop
     750:	d1 cf       	rjmp	.-94     	; 0x6f4 <volume_control+0x2e>
                  	break;
		}
	
    }
if((state & 0x03) == 2){
switch(b_past)  //inc dec count according to direction of encoder for second encoder
     752:	88 23       	and	r24, r24
     754:	09 f3       	breq	.-62     	; 0x718 <volume_control+0x52>
     756:	e2 cf       	rjmp	.-60     	; 0x71c <volume_control+0x56>
                        break;
                }

        case 0x04:
                {
                        if(dat1==0x0C){sum = sum + counter_value;} // inc count
     758:	9c 30       	cpi	r25, 0x0C	; 12
     75a:	31 f1       	breq	.+76     	; 0x7a8 <volume_control+0xe2>
                        else if(dat1==0x00){sum = sum - counter_value;} // dec count
     75c:	99 23       	and	r25, r25
     75e:	b9 f0       	breq	.+46     	; 0x78e <volume_control+0xc8>
     760:	20 91 15 01 	lds	r18, 0x0115
     764:	30 91 16 01 	lds	r19, 0x0116
                        b_past = dat1;
     768:	90 93 2a 02 	sts	0x022A, r25
                        break;
     76c:	db cf       	rjmp	.-74     	; 0x724 <volume_control+0x5e>
                  	break;
		}

        case 0x01:
		{
		  if(dat==0x03){OCR3A = OCR3A - 0x0200;
     76e:	40 91 86 00 	lds	r20, 0x0086
     772:	50 91 87 00 	lds	r21, 0x0087
     776:	52 50       	subi	r21, 0x02	; 2
     778:	50 93 87 00 	sts	0x0087, r21
     77c:	40 93 86 00 	sts	0x0086, r20
     780:	ef e3       	ldi	r30, 0x3F	; 63
     782:	ff e1       	ldi	r31, 0x1F	; 31
     784:	31 97       	sbiw	r30, 0x01	; 1
     786:	f1 f7       	brne	.-4      	; 0x784 <volume_control+0xbe>
     788:	00 c0       	rjmp	.+0      	; 0x78a <volume_control+0xc4>
     78a:	00 00       	nop
     78c:	b3 cf       	rjmp	.-154    	; 0x6f4 <volume_control+0x2e>
                }

        case 0x04:
                {
                        if(dat1==0x0C){sum = sum + counter_value;} // inc count
                        else if(dat1==0x00){sum = sum - counter_value;} // dec count
     78e:	80 91 21 02 	lds	r24, 0x0221
     792:	20 91 15 01 	lds	r18, 0x0115
     796:	30 91 16 01 	lds	r19, 0x0116
     79a:	28 1b       	sub	r18, r24
     79c:	31 09       	sbc	r19, r1
     79e:	30 93 16 01 	sts	0x0116, r19
     7a2:	20 93 15 01 	sts	0x0115, r18
     7a6:	e0 cf       	rjmp	.-64     	; 0x768 <volume_control+0xa2>
                        break;
                }

        case 0x04:
                {
                        if(dat1==0x0C){sum = sum + counter_value;} // inc count
     7a8:	80 91 21 02 	lds	r24, 0x0221
     7ac:	20 91 15 01 	lds	r18, 0x0115
     7b0:	30 91 16 01 	lds	r19, 0x0116
     7b4:	28 0f       	add	r18, r24
     7b6:	31 1d       	adc	r19, r1
     7b8:	30 93 16 01 	sts	0x0116, r19
     7bc:	20 93 15 01 	sts	0x0115, r18
     7c0:	d3 cf       	rjmp	.-90     	; 0x768 <volume_control+0xa2>

000007c2 <button_process>:
//******************************************************************//
                           //button process
//******************************************************************//

uint8_t button_process(void)
  {
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     uint8_t i=1;
     PORTB |= 0x70;                           // ENABLE TRISTATE BUFFER
     7cc:	88 b3       	in	r24, 0x18	; 24
     7ce:	80 67       	ori	r24, 0x70	; 112
     7d0:	88 bb       	out	0x18, r24	; 24
     7d2:	00 e3       	ldi	r16, 0x30	; 48
     7d4:	12 e0       	ldi	r17, 0x02	; 2
     7d6:	c0 e0       	ldi	r28, 0x00	; 0
     7d8:	d0 e0       	ldi	r29, 0x00	; 0
 
          if((state & 0x07) == 1) {counter_value = 1;} //if first button is pressed

          if((state & 0x07) == 2) 
           {
             counter_value = 1;
     7da:	ff 24       	eor	r15, r15
     7dc:	f3 94       	inc	r15
     7de:	15 c0       	rjmp	.+42     	; 0x80a <button_process+0x48>
     7e0:	80 91 22 02 	lds	r24, 0x0222
          if(chk_buttons(i-1) == 1)              // if its pushed
           {
             state ^= i;                         //state holds value of push buttons
           }

          if((state & 0x03) == 0) {sei();}           //if no button pressed then enable global interrupt
     7e4:	98 2f       	mov	r25, r24
     7e6:	93 70       	andi	r25, 0x03	; 3
     7e8:	19 f4       	brne	.+6      	; 0x7f0 <button_process+0x2e>
     7ea:	78 94       	sei
     7ec:	80 91 22 02 	lds	r24, 0x0222
 
          if((state & 0x07) == 1) {counter_value = 1;} //if first button is pressed
     7f0:	87 70       	andi	r24, 0x07	; 7
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <button_process+0x36>
     7f6:	57 c0       	rjmp	.+174    	; 0x8a6 <button_process+0xe4>

          if((state & 0x07) == 2) 
     7f8:	82 30       	cpi	r24, 0x02	; 2
     7fa:	e1 f1       	breq	.+120    	; 0x874 <button_process+0xb2>
           {
             counter_value = 1;
             seconds = 0;            //if second button is pressed
           }
         if((state & 0x07) == 4)     //mode for controlling volume 
     7fc:	84 30       	cpi	r24, 0x04	; 4
     7fe:	09 f4       	brne	.+2      	; 0x802 <button_process+0x40>
     800:	55 c0       	rjmp	.+170    	; 0x8ac <button_process+0xea>
     802:	21 96       	adiw	r28, 0x01	; 1
uint8_t button_process(void)
  {
     uint8_t i=1;
     PORTB |= 0x70;                           // ENABLE TRISTATE BUFFER

      for(i=1;i<9;i++)                       //counter for push buttons
     804:	c8 30       	cpi	r28, 0x08	; 8
     806:	d1 05       	cpc	r29, r1
     808:	e9 f1       	breq	.+122    	; 0x884 <button_process+0xc2>
     80a:	4c 2f       	mov	r20, r28
     80c:	4f 5f       	subi	r20, 0xFF	; 255
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {

  static uint16_t state[8] ={0x00}; //holds present state
  state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
     80e:	99 b3       	in	r25, 0x19	; 25
     810:	f8 01       	movw	r30, r16
     812:	20 81       	ld	r18, Z
     814:	31 81       	ldd	r19, Z+1	; 0x01
     816:	22 0f       	add	r18, r18
     818:	33 1f       	adc	r19, r19
     81a:	30 6e       	ori	r19, 0xE0	; 224
     81c:	89 2f       	mov	r24, r25
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0c 2e       	mov	r0, r28
     822:	02 c0       	rjmp	.+4      	; 0x828 <button_process+0x66>
     824:	95 95       	asr	r25
     826:	87 95       	ror	r24
     828:	0a 94       	dec	r0
     82a:	e2 f7       	brpl	.-8      	; 0x824 <button_process+0x62>
     82c:	81 70       	andi	r24, 0x01	; 1
     82e:	99 27       	eor	r25, r25
     830:	28 2b       	or	r18, r24
     832:	39 2b       	or	r19, r25
     834:	f8 01       	movw	r30, r16
     836:	31 83       	std	Z+1, r19	; 0x01
     838:	20 83       	st	Z, r18
     83a:	89 b3       	in	r24, 0x19	; 25
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0c 2e       	mov	r0, r28
     840:	02 c0       	rjmp	.+4      	; 0x846 <button_process+0x84>
     842:	95 95       	asr	r25
     844:	87 95       	ror	r24
     846:	0a 94       	dec	r0
     848:	e2 f7       	brpl	.-8      	; 0x842 <button_process+0x80>
     84a:	81 70       	andi	r24, 0x01	; 1
     84c:	99 27       	eor	r25, r25
     84e:	90 6e       	ori	r25, 0xE0	; 224
     850:	22 0f       	add	r18, r18
     852:	33 1f       	adc	r19, r19
     854:	82 2b       	or	r24, r18
     856:	93 2b       	or	r25, r19
     858:	f8 01       	movw	r30, r16
     85a:	81 93       	st	Z+, r24
     85c:	91 93       	st	Z+, r25
     85e:	8f 01       	movw	r16, r30
  if (state[button] == 0xF000) return 1;
     860:	81 15       	cp	r24, r1
     862:	90 4f       	sbci	r25, 0xF0	; 240
     864:	09 f0       	breq	.+2      	; 0x868 <button_process+0xa6>
     866:	bc cf       	rjmp	.-136    	; 0x7e0 <button_process+0x1e>
       {                       
         chk_buttons(i-1);                       // call chk_cuttons

          if(chk_buttons(i-1) == 1)              // if its pushed
           {
             state ^= i;                         //state holds value of push buttons
     868:	80 91 22 02 	lds	r24, 0x0222
     86c:	84 27       	eor	r24, r20
     86e:	80 93 22 02 	sts	0x0222, r24
     872:	b8 cf       	rjmp	.-144    	; 0x7e4 <button_process+0x22>
 
          if((state & 0x07) == 1) {counter_value = 1;} //if first button is pressed

          if((state & 0x07) == 2) 
           {
             counter_value = 1;
     874:	f0 92 21 02 	sts	0x0221, r15
             seconds = 0;            //if second button is pressed
     878:	10 92 25 02 	sts	0x0225, r1
     87c:	21 96       	adiw	r28, 0x01	; 1
uint8_t button_process(void)
  {
     uint8_t i=1;
     PORTB |= 0x70;                           // ENABLE TRISTATE BUFFER

      for(i=1;i<9;i++)                       //counter for push buttons
     87e:	c8 30       	cpi	r28, 0x08	; 8
     880:	d1 05       	cpc	r29, r1
     882:	19 f6       	brne	.-122    	; 0x80a <button_process+0x48>
           }

            
       } //for

  PORTB |= 0x00;                                //disable tristate buffer
     884:	88 b3       	in	r24, 0x18	; 24
     886:	88 bb       	out	0x18, r24	; 24
  SPDR = state;                                  // send data to bargraph
     888:	80 91 22 02 	lds	r24, 0x0222
     88c:	8f b9       	out	0x0f, r24	; 15
  while(bit_is_clear(SPSR,SPIF)){}            // wait for 8 cycles
     88e:	77 9b       	sbis	0x0e, 7	; 14
     890:	fe cf       	rjmp	.-4      	; 0x88e <button_process+0xcc>
  data = SPDR;                                 //receive  data form encoder
     892:	8f b1       	in	r24, 0x0f	; 15
     894:	80 93 20 02 	sts	0x0220, r24
 }
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	ff 90       	pop	r15
     8a4:	08 95       	ret
             state ^= i;                         //state holds value of push buttons
           }

          if((state & 0x03) == 0) {sei();}           //if no button pressed then enable global interrupt
 
          if((state & 0x07) == 1) {counter_value = 1;} //if first button is pressed
     8a6:	80 93 21 02 	sts	0x0221, r24
     8aa:	ab cf       	rjmp	.-170    	; 0x802 <button_process+0x40>
             counter_value = 1;
             seconds = 0;            //if second button is pressed
           }
         if((state & 0x07) == 4)     //mode for controlling volume 
           {
             volume_control();        
     8ac:	0e 94 63 03 	call	0x6c6	; 0x6c6 <volume_control>
     8b0:	a8 cf       	rjmp	.-176    	; 0x802 <button_process+0x40>

000008b2 <segsum1>:

}



void segsum1(sum1) {
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
uint8_t tens1;
uint8_t hundreds1;
uint8_t thousands1;  //determine how many digits there are 
ones1 = sum1%10;
tens1 = (sum1/10)%10;
hundreds1 = (sum1/100)%10;
     8bc:	64 e6       	ldi	r22, 0x64	; 100
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divmodhi4>
     8c4:	cb 01       	movw	r24, r22
     8c6:	0a e0       	ldi	r16, 0x0A	; 10
     8c8:	10 e0       	ldi	r17, 0x00	; 0
     8ca:	b8 01       	movw	r22, r16
     8cc:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divmodhi4>
     8d0:	fc 01       	movw	r30, r24
thousands1 = (sum1/1000)%10;
     8d2:	ce 01       	movw	r24, r28
     8d4:	68 ee       	ldi	r22, 0xE8	; 232
     8d6:	73 e0       	ldi	r23, 0x03	; 3
     8d8:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divmodhi4>
     8dc:	cb 01       	movw	r24, r22
     8de:	b8 01       	movw	r22, r16
     8e0:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divmodhi4>
     8e4:	9c 01       	movw	r18, r24
void segsum1(sum1) {
uint8_t ones1;
uint8_t tens1;
uint8_t hundreds1;
uint8_t thousands1;  //determine how many digits there are 
ones1 = sum1%10;
     8e6:	ce 01       	movw	r24, r28
     8e8:	b8 01       	movw	r22, r16
     8ea:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divmodhi4>
tens1 = (sum1/10)%10;
hundreds1 = (sum1/100)%10;
thousands1 = (sum1/1000)%10;
segment_data1[0] = dec_to_7seg[ones1];
     8ee:	dc 01       	movw	r26, r24
     8f0:	bb 27       	eor	r27, r27
     8f2:	a0 50       	subi	r26, 0x00	; 0
     8f4:	bf 4f       	sbci	r27, 0xFF	; 255
     8f6:	8c 91       	ld	r24, X
     8f8:	80 93 6e 02 	sts	0x026E, r24
uint8_t ones1;
uint8_t tens1;
uint8_t hundreds1;
uint8_t thousands1;  //determine how many digits there are 
ones1 = sum1%10;
tens1 = (sum1/10)%10;
     8fc:	cb 01       	movw	r24, r22
     8fe:	b8 01       	movw	r22, r16
     900:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divmodhi4>
hundreds1 = (sum1/100)%10;
thousands1 = (sum1/1000)%10;
segment_data1[0] = dec_to_7seg[ones1];
segment_data1[1] = dec_to_7seg[tens1];
     904:	dc 01       	movw	r26, r24
     906:	bb 27       	eor	r27, r27
     908:	a0 50       	subi	r26, 0x00	; 0
     90a:	bf 4f       	sbci	r27, 0xFF	; 255
     90c:	8c 91       	ld	r24, X
     90e:	80 93 6f 02 	sts	0x026F, r24
if((seconds % 2) == 0){segment_data[2] = dec_to_7seg[12];}
     912:	80 91 25 02 	lds	r24, 0x0225
     916:	80 fd       	sbrc	r24, 0
     918:	25 c0       	rjmp	.+74     	; 0x964 <segsum1+0xb2>
     91a:	80 91 0c 01 	lds	r24, 0x010C
     91e:	80 93 aa 02 	sts	0x02AA, r24
else segment_data[2] = dec_to_7seg[11];
segment_data1[3] = dec_to_7seg[hundreds1];
     922:	ff 27       	eor	r31, r31
     924:	e0 50       	subi	r30, 0x00	; 0
     926:	ff 4f       	sbci	r31, 0xFF	; 255
     928:	80 81       	ld	r24, Z
     92a:	80 93 71 02 	sts	0x0271, r24
segment_data1[4] = dec_to_7seg[thousands1];
     92e:	33 27       	eor	r19, r19
     930:	f9 01       	movw	r30, r18
     932:	e0 50       	subi	r30, 0x00	; 0
     934:	ff 4f       	sbci	r31, 0xFF	; 255
     936:	80 81       	ld	r24, Z
     938:	80 93 72 02 	sts	0x0272, r24
if(sum<10){           //blancking leading 0s
     93c:	80 91 15 01 	lds	r24, 0x0115
     940:	90 91 16 01 	lds	r25, 0x0116
     944:	0a 97       	sbiw	r24, 0x0a	; 10
     946:	e8 f0       	brcs	.+58     	; 0x982 <segsum1+0xd0>
  segment_data1[1] = 0xFF;
  segment_data1[3] = 0xFF;
  segment_data1[4] = 0xFF;}
else if(sum1<100){
     948:	c4 36       	cpi	r28, 0x64	; 100
     94a:	d1 05       	cpc	r29, r1
     94c:	84 f0       	brlt	.+32     	; 0x96e <segsum1+0xbc>
  segment_data1[3] = 0xFF;
  segment_data1[4] = 0xFF;}
else if(sum1<1000){
     94e:	c8 3e       	cpi	r28, 0xE8	; 232
     950:	d3 40       	sbci	r29, 0x03	; 3
     952:	1c f4       	brge	.+6      	; 0x95a <segsum1+0xa8>
  segment_data1[4] = 0xFF;}
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	80 93 72 02 	sts	0x0272, r24

}
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	08 95       	ret
hundreds1 = (sum1/100)%10;
thousands1 = (sum1/1000)%10;
segment_data1[0] = dec_to_7seg[ones1];
segment_data1[1] = dec_to_7seg[tens1];
if((seconds % 2) == 0){segment_data[2] = dec_to_7seg[12];}
else segment_data[2] = dec_to_7seg[11];
     964:	80 91 0b 01 	lds	r24, 0x010B
     968:	80 93 aa 02 	sts	0x02AA, r24
     96c:	da cf       	rjmp	.-76     	; 0x922 <segsum1+0x70>
if(sum<10){           //blancking leading 0s
  segment_data1[1] = 0xFF;
  segment_data1[3] = 0xFF;
  segment_data1[4] = 0xFF;}
else if(sum1<100){
  segment_data1[3] = 0xFF;
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	80 93 71 02 	sts	0x0271, r24
  segment_data1[4] = 0xFF;}
     974:	80 93 72 02 	sts	0x0272, r24
else if(sum1<1000){
  segment_data1[4] = 0xFF;}

}
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	08 95       	ret
if((seconds % 2) == 0){segment_data[2] = dec_to_7seg[12];}
else segment_data[2] = dec_to_7seg[11];
segment_data1[3] = dec_to_7seg[hundreds1];
segment_data1[4] = dec_to_7seg[thousands1];
if(sum<10){           //blancking leading 0s
  segment_data1[1] = 0xFF;
     982:	8f ef       	ldi	r24, 0xFF	; 255
     984:	80 93 6f 02 	sts	0x026F, r24
  segment_data1[3] = 0xFF;
     988:	80 93 71 02 	sts	0x0271, r24
  segment_data1[4] = 0xFF;}
     98c:	80 93 72 02 	sts	0x0272, r24
  segment_data1[3] = 0xFF;
  segment_data1[4] = 0xFF;}
else if(sum1<1000){
  segment_data1[4] = 0xFF;}

}
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	08 95       	ret

0000099a <segsum2>:

void segsum2(uint16_t sum) {
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	ec 01       	movw	r28, r24
uint8_t ones;  
uint8_t tens;  
uint8_t hundreds;  
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
     9a0:	9c 01       	movw	r18, r24
     9a2:	ad ec       	ldi	r26, 0xCD	; 205
     9a4:	bc ec       	ldi	r27, 0xCC	; 204
     9a6:	0e 94 36 10 	call	0x206c	; 0x206c <__umulhisi3>
     9aa:	ac 01       	movw	r20, r24
     9ac:	56 95       	lsr	r21
     9ae:	47 95       	ror	r20
     9b0:	56 95       	lsr	r21
     9b2:	47 95       	ror	r20
     9b4:	56 95       	lsr	r21
     9b6:	47 95       	ror	r20
     9b8:	9a 01       	movw	r18, r20
     9ba:	22 0f       	add	r18, r18
     9bc:	33 1f       	adc	r19, r19
     9be:	ca 01       	movw	r24, r20
     9c0:	88 0f       	add	r24, r24
     9c2:	99 1f       	adc	r25, r25
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	88 0f       	add	r24, r24
     9ca:	99 1f       	adc	r25, r25
     9cc:	82 0f       	add	r24, r18
     9ce:	93 1f       	adc	r25, r19
     9d0:	fe 01       	movw	r30, r28
     9d2:	e8 1b       	sub	r30, r24
     9d4:	f9 0b       	sbc	r31, r25
tens = (sum/10)%10;
hundreds = (sum/100)%10;
thousands = (sum/1000)%10;
segment_data[0] = dec_to_7seg[ones];
     9d6:	e0 50       	subi	r30, 0x00	; 0
     9d8:	ff 4f       	sbci	r31, 0xFF	; 255
     9da:	80 81       	ld	r24, Z
     9dc:	80 93 a8 02 	sts	0x02A8, r24
uint8_t ones;  
uint8_t tens;  
uint8_t hundreds;  
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
tens = (sum/10)%10;
     9e0:	9a 01       	movw	r18, r20
     9e2:	0e 94 36 10 	call	0x206c	; 0x206c <__umulhisi3>
     9e6:	96 95       	lsr	r25
     9e8:	87 95       	ror	r24
     9ea:	96 95       	lsr	r25
     9ec:	87 95       	ror	r24
     9ee:	96 95       	lsr	r25
     9f0:	87 95       	ror	r24
     9f2:	9c 01       	movw	r18, r24
     9f4:	22 0f       	add	r18, r18
     9f6:	33 1f       	adc	r19, r19
     9f8:	88 0f       	add	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	88 0f       	add	r24, r24
     9fe:	99 1f       	adc	r25, r25
     a00:	88 0f       	add	r24, r24
     a02:	99 1f       	adc	r25, r25
     a04:	82 0f       	add	r24, r18
     a06:	93 1f       	adc	r25, r19
     a08:	48 1b       	sub	r20, r24
     a0a:	59 0b       	sbc	r21, r25
hundreds = (sum/100)%10;
thousands = (sum/1000)%10;
segment_data[0] = dec_to_7seg[ones];
segment_data[1] = dec_to_7seg[tens];
     a0c:	fa 01       	movw	r30, r20
     a0e:	e0 50       	subi	r30, 0x00	; 0
     a10:	ff 4f       	sbci	r31, 0xFF	; 255
     a12:	80 81       	ld	r24, Z
     a14:	80 93 a9 02 	sts	0x02A9, r24
segment_data[2] = dec_to_7seg[10];
     a18:	80 91 0a 01 	lds	r24, 0x010A
     a1c:	80 93 aa 02 	sts	0x02AA, r24
uint8_t tens;  
uint8_t hundreds;  
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
tens = (sum/10)%10;
hundreds = (sum/100)%10;
     a20:	9e 01       	movw	r18, r28
     a22:	36 95       	lsr	r19
     a24:	27 95       	ror	r18
     a26:	36 95       	lsr	r19
     a28:	27 95       	ror	r18
     a2a:	ab e7       	ldi	r26, 0x7B	; 123
     a2c:	b4 e1       	ldi	r27, 0x14	; 20
     a2e:	0e 94 36 10 	call	0x206c	; 0x206c <__umulhisi3>
     a32:	ac 01       	movw	r20, r24
     a34:	56 95       	lsr	r21
     a36:	47 95       	ror	r20
     a38:	9a 01       	movw	r18, r20
     a3a:	ad ec       	ldi	r26, 0xCD	; 205
     a3c:	bc ec       	ldi	r27, 0xCC	; 204
     a3e:	0e 94 36 10 	call	0x206c	; 0x206c <__umulhisi3>
     a42:	96 95       	lsr	r25
     a44:	87 95       	ror	r24
     a46:	96 95       	lsr	r25
     a48:	87 95       	ror	r24
     a4a:	96 95       	lsr	r25
     a4c:	87 95       	ror	r24
     a4e:	9c 01       	movw	r18, r24
     a50:	22 0f       	add	r18, r18
     a52:	33 1f       	adc	r19, r19
     a54:	88 0f       	add	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	88 0f       	add	r24, r24
     a5e:	99 1f       	adc	r25, r25
     a60:	82 0f       	add	r24, r18
     a62:	93 1f       	adc	r25, r19
     a64:	48 1b       	sub	r20, r24
     a66:	59 0b       	sbc	r21, r25
thousands = (sum/1000)%10;
segment_data[0] = dec_to_7seg[ones];
segment_data[1] = dec_to_7seg[tens];
segment_data[2] = dec_to_7seg[10];
segment_data[3] = dec_to_7seg[hundreds];
     a68:	fa 01       	movw	r30, r20
     a6a:	e0 50       	subi	r30, 0x00	; 0
     a6c:	ff 4f       	sbci	r31, 0xFF	; 255
     a6e:	80 81       	ld	r24, Z
     a70:	80 93 ab 02 	sts	0x02AB, r24
uint8_t hundreds;  
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
tens = (sum/10)%10;
hundreds = (sum/100)%10;
thousands = (sum/1000)%10;
     a74:	9e 01       	movw	r18, r28
     a76:	36 95       	lsr	r19
     a78:	27 95       	ror	r18
     a7a:	36 95       	lsr	r19
     a7c:	27 95       	ror	r18
     a7e:	36 95       	lsr	r19
     a80:	27 95       	ror	r18
     a82:	a5 ec       	ldi	r26, 0xC5	; 197
     a84:	b0 e2       	ldi	r27, 0x20	; 32
     a86:	0e 94 36 10 	call	0x206c	; 0x206c <__umulhisi3>
     a8a:	ac 01       	movw	r20, r24
     a8c:	52 95       	swap	r21
     a8e:	42 95       	swap	r20
     a90:	4f 70       	andi	r20, 0x0F	; 15
     a92:	45 27       	eor	r20, r21
     a94:	5f 70       	andi	r21, 0x0F	; 15
     a96:	45 27       	eor	r20, r21
     a98:	9a 01       	movw	r18, r20
     a9a:	ad ec       	ldi	r26, 0xCD	; 205
     a9c:	bc ec       	ldi	r27, 0xCC	; 204
     a9e:	0e 94 36 10 	call	0x206c	; 0x206c <__umulhisi3>
     aa2:	96 95       	lsr	r25
     aa4:	87 95       	ror	r24
     aa6:	96 95       	lsr	r25
     aa8:	87 95       	ror	r24
     aaa:	96 95       	lsr	r25
     aac:	87 95       	ror	r24
     aae:	9c 01       	movw	r18, r24
     ab0:	22 0f       	add	r18, r18
     ab2:	33 1f       	adc	r19, r19
     ab4:	88 0f       	add	r24, r24
     ab6:	99 1f       	adc	r25, r25
     ab8:	88 0f       	add	r24, r24
     aba:	99 1f       	adc	r25, r25
     abc:	88 0f       	add	r24, r24
     abe:	99 1f       	adc	r25, r25
     ac0:	82 0f       	add	r24, r18
     ac2:	93 1f       	adc	r25, r19
     ac4:	48 1b       	sub	r20, r24
     ac6:	59 0b       	sbc	r21, r25
segment_data[0] = dec_to_7seg[ones];
segment_data[1] = dec_to_7seg[tens];
segment_data[2] = dec_to_7seg[10];
segment_data[3] = dec_to_7seg[hundreds];
segment_data[4] = dec_to_7seg[thousands];
     ac8:	fa 01       	movw	r30, r20
     aca:	e0 50       	subi	r30, 0x00	; 0
     acc:	ff 4f       	sbci	r31, 0xFF	; 255
     ace:	80 81       	ld	r24, Z
     ad0:	80 93 ac 02 	sts	0x02AC, r24
if(sum<10){           //blancking leading 0s
     ad4:	ca 30       	cpi	r28, 0x0A	; 10
     ad6:	d1 05       	cpc	r29, r1
     ad8:	a0 f0       	brcs	.+40     	; 0xb02 <segsum2+0x168>
  segment_data[1] = 0xFF;
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<100){
     ada:	c4 36       	cpi	r28, 0x64	; 100
     adc:	d1 05       	cpc	r29, r1
     ade:	48 f0       	brcs	.+18     	; 0xaf2 <segsum2+0x158>
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<1000){
     ae0:	c8 3e       	cpi	r28, 0xE8	; 232
     ae2:	d3 40       	sbci	r29, 0x03	; 3
     ae4:	18 f4       	brcc	.+6      	; 0xaec <segsum2+0x152>
  segment_data[4] = 0xFF;}
     ae6:	8f ef       	ldi	r24, 0xFF	; 255
     ae8:	80 93 ac 02 	sts	0x02AC, r24

}
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	08 95       	ret
if(sum<10){           //blancking leading 0s
  segment_data[1] = 0xFF;
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<100){
  segment_data[3] = 0xFF;
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	80 93 ab 02 	sts	0x02AB, r24
  segment_data[4] = 0xFF;}
     af8:	80 93 ac 02 	sts	0x02AC, r24
else if(sum<1000){
  segment_data[4] = 0xFF;}

}
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	08 95       	ret
segment_data[1] = dec_to_7seg[tens];
segment_data[2] = dec_to_7seg[10];
segment_data[3] = dec_to_7seg[hundreds];
segment_data[4] = dec_to_7seg[thousands];
if(sum<10){           //blancking leading 0s
  segment_data[1] = 0xFF;
     b02:	8f ef       	ldi	r24, 0xFF	; 255
     b04:	80 93 a9 02 	sts	0x02A9, r24
  segment_data[3] = 0xFF;
     b08:	80 93 ab 02 	sts	0x02AB, r24
  segment_data[4] = 0xFF;}
     b0c:	80 93 ac 02 	sts	0x02AC, r24
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<1000){
  segment_data[4] = 0xFF;}

}
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <segsum3>:

void segsum3(uint16_t sum) {
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	ec 01       	movw	r28, r24
uint8_t ones;
uint8_t tens;
uint8_t hundreds;
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
     b1c:	9c 01       	movw	r18, r24
     b1e:	ad ec       	ldi	r26, 0xCD	; 205
     b20:	bc ec       	ldi	r27, 0xCC	; 204
     b22:	0e 94 36 10 	call	0x206c	; 0x206c <__umulhisi3>
     b26:	ac 01       	movw	r20, r24
     b28:	56 95       	lsr	r21
     b2a:	47 95       	ror	r20
     b2c:	56 95       	lsr	r21
     b2e:	47 95       	ror	r20
     b30:	56 95       	lsr	r21
     b32:	47 95       	ror	r20
     b34:	9a 01       	movw	r18, r20
     b36:	22 0f       	add	r18, r18
     b38:	33 1f       	adc	r19, r19
     b3a:	ca 01       	movw	r24, r20
     b3c:	88 0f       	add	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	88 0f       	add	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	82 0f       	add	r24, r18
     b4a:	93 1f       	adc	r25, r19
     b4c:	fe 01       	movw	r30, r28
     b4e:	e8 1b       	sub	r30, r24
     b50:	f9 0b       	sbc	r31, r25
tens = (sum/10)%10;
hundreds = (sum/100)%10;
thousands = (sum/1000)%10;
segment_data[0] = dec_to_7seg[ones];
     b52:	e0 50       	subi	r30, 0x00	; 0
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	80 81       	ld	r24, Z
     b58:	80 93 a8 02 	sts	0x02A8, r24
uint8_t ones;
uint8_t tens;
uint8_t hundreds;
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
tens = (sum/10)%10;
     b5c:	9a 01       	movw	r18, r20
     b5e:	0e 94 36 10 	call	0x206c	; 0x206c <__umulhisi3>
     b62:	96 95       	lsr	r25
     b64:	87 95       	ror	r24
     b66:	96 95       	lsr	r25
     b68:	87 95       	ror	r24
     b6a:	96 95       	lsr	r25
     b6c:	87 95       	ror	r24
     b6e:	9c 01       	movw	r18, r24
     b70:	22 0f       	add	r18, r18
     b72:	33 1f       	adc	r19, r19
     b74:	88 0f       	add	r24, r24
     b76:	99 1f       	adc	r25, r25
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	82 0f       	add	r24, r18
     b82:	93 1f       	adc	r25, r19
     b84:	48 1b       	sub	r20, r24
     b86:	59 0b       	sbc	r21, r25
hundreds = (sum/100)%10;
thousands = (sum/1000)%10;
segment_data[0] = dec_to_7seg[ones];
segment_data[1] = dec_to_7seg[tens];
     b88:	fa 01       	movw	r30, r20
     b8a:	e0 50       	subi	r30, 0x00	; 0
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	80 81       	ld	r24, Z
     b90:	80 93 a9 02 	sts	0x02A9, r24
segment_data[2] = dec_to_7seg[13];
     b94:	80 91 0d 01 	lds	r24, 0x010D
     b98:	80 93 aa 02 	sts	0x02AA, r24
uint8_t tens;
uint8_t hundreds;
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
tens = (sum/10)%10;
hundreds = (sum/100)%10;
     b9c:	9e 01       	movw	r18, r28
     b9e:	36 95       	lsr	r19
     ba0:	27 95       	ror	r18
     ba2:	36 95       	lsr	r19
     ba4:	27 95       	ror	r18
     ba6:	ab e7       	ldi	r26, 0x7B	; 123
     ba8:	b4 e1       	ldi	r27, 0x14	; 20
     baa:	0e 94 36 10 	call	0x206c	; 0x206c <__umulhisi3>
     bae:	ac 01       	movw	r20, r24
     bb0:	56 95       	lsr	r21
     bb2:	47 95       	ror	r20
     bb4:	9a 01       	movw	r18, r20
     bb6:	ad ec       	ldi	r26, 0xCD	; 205
     bb8:	bc ec       	ldi	r27, 0xCC	; 204
     bba:	0e 94 36 10 	call	0x206c	; 0x206c <__umulhisi3>
     bbe:	96 95       	lsr	r25
     bc0:	87 95       	ror	r24
     bc2:	96 95       	lsr	r25
     bc4:	87 95       	ror	r24
     bc6:	96 95       	lsr	r25
     bc8:	87 95       	ror	r24
     bca:	9c 01       	movw	r18, r24
     bcc:	22 0f       	add	r18, r18
     bce:	33 1f       	adc	r19, r19
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	82 0f       	add	r24, r18
     bde:	93 1f       	adc	r25, r19
     be0:	48 1b       	sub	r20, r24
     be2:	59 0b       	sbc	r21, r25
thousands = (sum/1000)%10;
segment_data[0] = dec_to_7seg[ones];
segment_data[1] = dec_to_7seg[tens];
segment_data[2] = dec_to_7seg[13];
segment_data[3] = dec_to_7seg[hundreds];
     be4:	fa 01       	movw	r30, r20
     be6:	e0 50       	subi	r30, 0x00	; 0
     be8:	ff 4f       	sbci	r31, 0xFF	; 255
     bea:	80 81       	ld	r24, Z
     bec:	80 93 ab 02 	sts	0x02AB, r24
uint8_t hundreds;
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
tens = (sum/10)%10;
hundreds = (sum/100)%10;
thousands = (sum/1000)%10;
     bf0:	9e 01       	movw	r18, r28
     bf2:	36 95       	lsr	r19
     bf4:	27 95       	ror	r18
     bf6:	36 95       	lsr	r19
     bf8:	27 95       	ror	r18
     bfa:	36 95       	lsr	r19
     bfc:	27 95       	ror	r18
     bfe:	a5 ec       	ldi	r26, 0xC5	; 197
     c00:	b0 e2       	ldi	r27, 0x20	; 32
     c02:	0e 94 36 10 	call	0x206c	; 0x206c <__umulhisi3>
     c06:	ac 01       	movw	r20, r24
     c08:	52 95       	swap	r21
     c0a:	42 95       	swap	r20
     c0c:	4f 70       	andi	r20, 0x0F	; 15
     c0e:	45 27       	eor	r20, r21
     c10:	5f 70       	andi	r21, 0x0F	; 15
     c12:	45 27       	eor	r20, r21
     c14:	9a 01       	movw	r18, r20
     c16:	ad ec       	ldi	r26, 0xCD	; 205
     c18:	bc ec       	ldi	r27, 0xCC	; 204
     c1a:	0e 94 36 10 	call	0x206c	; 0x206c <__umulhisi3>
     c1e:	96 95       	lsr	r25
     c20:	87 95       	ror	r24
     c22:	96 95       	lsr	r25
     c24:	87 95       	ror	r24
     c26:	96 95       	lsr	r25
     c28:	87 95       	ror	r24
     c2a:	9c 01       	movw	r18, r24
     c2c:	22 0f       	add	r18, r18
     c2e:	33 1f       	adc	r19, r19
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	82 0f       	add	r24, r18
     c3e:	93 1f       	adc	r25, r19
     c40:	48 1b       	sub	r20, r24
     c42:	59 0b       	sbc	r21, r25
segment_data[0] = dec_to_7seg[ones];
segment_data[1] = dec_to_7seg[tens];
segment_data[2] = dec_to_7seg[13];
segment_data[3] = dec_to_7seg[hundreds];
segment_data[4] = dec_to_7seg[thousands];
     c44:	fa 01       	movw	r30, r20
     c46:	e0 50       	subi	r30, 0x00	; 0
     c48:	ff 4f       	sbci	r31, 0xFF	; 255
     c4a:	80 81       	ld	r24, Z
     c4c:	80 93 ac 02 	sts	0x02AC, r24
if(sum<10){           //blancking leading 0s
     c50:	ca 30       	cpi	r28, 0x0A	; 10
     c52:	d1 05       	cpc	r29, r1
     c54:	a0 f0       	brcs	.+40     	; 0xc7e <segsum3+0x168>
  segment_data[1] = 0xFF;
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<100){ 
     c56:	c4 36       	cpi	r28, 0x64	; 100
     c58:	d1 05       	cpc	r29, r1
     c5a:	48 f0       	brcs	.+18     	; 0xc6e <segsum3+0x158>
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<1000){
     c5c:	c8 3e       	cpi	r28, 0xE8	; 232
     c5e:	d3 40       	sbci	r29, 0x03	; 3
     c60:	18 f4       	brcc	.+6      	; 0xc68 <segsum3+0x152>
  segment_data[4] = 0xFF;}
     c62:	8f ef       	ldi	r24, 0xFF	; 255
     c64:	80 93 ac 02 	sts	0x02AC, r24

}
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret
if(sum<10){           //blancking leading 0s
  segment_data[1] = 0xFF;
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<100){ 
  segment_data[3] = 0xFF;
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	80 93 ab 02 	sts	0x02AB, r24
  segment_data[4] = 0xFF;}
     c74:	80 93 ac 02 	sts	0x02AC, r24
else if(sum<1000){
  segment_data[4] = 0xFF;}

}
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	08 95       	ret
segment_data[1] = dec_to_7seg[tens];
segment_data[2] = dec_to_7seg[13];
segment_data[3] = dec_to_7seg[hundreds];
segment_data[4] = dec_to_7seg[thousands];
if(sum<10){           //blancking leading 0s
  segment_data[1] = 0xFF;
     c7e:	8f ef       	ldi	r24, 0xFF	; 255
     c80:	80 93 a9 02 	sts	0x02A9, r24
  segment_data[3] = 0xFF;
     c84:	80 93 ab 02 	sts	0x02AB, r24
  segment_data[4] = 0xFF;}
     c88:	80 93 ac 02 	sts	0x02AC, r24
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<1000){
  segment_data[4] = 0xFF;}

}
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	08 95       	ret

00000c92 <tcnt0_init>:


void tcnt0_init(void)   //initializing timer/counter0 for real time clock
 {
   ASSR |= (1<<AS0);
     c92:	80 b7       	in	r24, 0x30	; 48
     c94:	88 60       	ori	r24, 0x08	; 8
     c96:	80 bf       	out	0x30, r24	; 48

  //Enable coutner in normal mode with no prescaler
  TCCR0 = (0<<CS02) | (0<<CS01) | (1<<CS00);
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	83 bf       	out	0x33, r24	; 51

  //Wait for all ascynch warning bits to clear
  while(bit_is_set(ASSR, TCN0UB));
     c9c:	00 b6       	in	r0, 0x30	; 48
     c9e:	02 fc       	sbrc	r0, 2
     ca0:	fd cf       	rjmp	.-6      	; 0xc9c <tcnt0_init+0xa>
  while(bit_is_set(ASSR, OCR0UB));
     ca2:	00 b6       	in	r0, 0x30	; 48
     ca4:	01 fc       	sbrc	r0, 1
     ca6:	fd cf       	rjmp	.-6      	; 0xca2 <tcnt0_init+0x10>
  while(bit_is_set(ASSR, TCR0UB));
     ca8:	00 b6       	in	r0, 0x30	; 48
     caa:	00 fc       	sbrc	r0, 0
     cac:	fd cf       	rjmp	.-6      	; 0xca8 <tcnt0_init+0x16>

  //Enable overflow interrupts for T/C 0
  TIMSK |= (1<<TOIE0);
     cae:	87 b7       	in	r24, 0x37	; 55
     cb0:	81 60       	ori	r24, 0x01	; 1
     cb2:	87 bf       	out	0x37, r24	; 55
     cb4:	08 95       	ret

00000cb6 <__vector_18>:
 }


ISR(USART0_RX_vect)
 {
     cb6:	1f 92       	push	r1
     cb8:	0f 92       	push	r0
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	0f 92       	push	r0
     cbe:	11 24       	eor	r1, r1
     cc0:	0b b6       	in	r0, 0x3b	; 59
     cc2:	0f 92       	push	r0
     cc4:	2f 93       	push	r18
     cc6:	3f 93       	push	r19
     cc8:	4f 93       	push	r20
     cca:	5f 93       	push	r21
     ccc:	6f 93       	push	r22
     cce:	7f 93       	push	r23
     cd0:	8f 93       	push	r24
     cd2:	9f 93       	push	r25
     cd4:	af 93       	push	r26
     cd6:	bf 93       	push	r27
     cd8:	ef 93       	push	r30
     cda:	ff 93       	push	r31
   rx_char = UDR0;              //get remote temperature
     cdc:	8c b1       	in	r24, 0x0c	; 12
     cde:	80 93 a7 02 	sts	0x02A7, r24

   if(state == 5)
     ce2:	90 91 22 02 	lds	r25, 0x0222
     ce6:	95 30       	cpi	r25, 0x05	; 5
     ce8:	99 f0       	breq	.+38     	; 0xd10 <__vector_18+0x5a>
      {
        char2lcd(rx_char);
      }
 } 
     cea:	ff 91       	pop	r31
     cec:	ef 91       	pop	r30
     cee:	bf 91       	pop	r27
     cf0:	af 91       	pop	r26
     cf2:	9f 91       	pop	r25
     cf4:	8f 91       	pop	r24
     cf6:	7f 91       	pop	r23
     cf8:	6f 91       	pop	r22
     cfa:	5f 91       	pop	r21
     cfc:	4f 91       	pop	r20
     cfe:	3f 91       	pop	r19
     d00:	2f 91       	pop	r18
     d02:	0f 90       	pop	r0
     d04:	0b be       	out	0x3b, r0	; 59
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti
 {
   rx_char = UDR0;              //get remote temperature

   if(state == 5)
      {
        char2lcd(rx_char);
     d10:	0e 94 13 0c 	call	0x1826	; 0x1826 <char2lcd>
     d14:	ea cf       	rjmp	.-44     	; 0xcea <__vector_18+0x34>

00000d16 <__vector_16>:
      }
 } 


ISR(TIMER0_OVF_vect)           //ISR for real time clock and snooze
 {
     d16:	1f 92       	push	r1
     d18:	0f 92       	push	r0
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	0f 92       	push	r0
     d1e:	11 24       	eor	r1, r1
     d20:	8f 93       	push	r24
     d22:	9f 93       	push	r25
   static uint8_t count = 0;         
   count ++;
     d24:	80 91 29 02 	lds	r24, 0x0229
     d28:	8f 5f       	subi	r24, 0xFF	; 255
     d2a:	80 93 29 02 	sts	0x0229, r24

     if((count % 128) == 0)    //complete 1 sec
     d2e:	8f 77       	andi	r24, 0x7F	; 127
     d30:	59 f4       	brne	.+22     	; 0xd48 <__vector_16+0x32>
       {
         seconds = seconds + 1;//increment second
     d32:	80 91 25 02 	lds	r24, 0x0225
     d36:	8f 5f       	subi	r24, 0xFF	; 255
     d38:	80 93 25 02 	sts	0x0225, r24

            if(seconds == 60)
     d3c:	8c 33       	cpi	r24, 0x3C	; 60
     d3e:	b9 f0       	breq	.+46     	; 0xd6e <__vector_16+0x58>
                sum = sum + 1; //increment sum after every min
                seconds = 0;
              }
       }

       if(state == 3)         //snooze mode
     d40:	80 91 22 02 	lds	r24, 0x0222
     d44:	83 30       	cpi	r24, 0x03	; 3
     d46:	39 f0       	breq	.+14     	; 0xd56 <__vector_16+0x40>
           if((count % 128) == 0)
             { 
                seconds1 = seconds1 + 1;  //increment seconds1 every second 
             }
         }
 }
     d48:	9f 91       	pop	r25
     d4a:	8f 91       	pop	r24
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	0f 90       	pop	r0
     d52:	1f 90       	pop	r1
     d54:	18 95       	reti

       if(state == 3)         //snooze mode
         {
           if((count % 128) == 0)
             { 
                seconds1 = seconds1 + 1;  //increment seconds1 every second 
     d56:	80 91 24 02 	lds	r24, 0x0224
     d5a:	8f 5f       	subi	r24, 0xFF	; 255
     d5c:	80 93 24 02 	sts	0x0224, r24
             }
         }
 }
     d60:	9f 91       	pop	r25
     d62:	8f 91       	pop	r24
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	0f 90       	pop	r0
     d6a:	1f 90       	pop	r1
     d6c:	18 95       	reti
       {
         seconds = seconds + 1;//increment second

            if(seconds == 60)
              {           
                sum = sum + 1; //increment sum after every min
     d6e:	80 91 15 01 	lds	r24, 0x0115
     d72:	90 91 16 01 	lds	r25, 0x0116
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	90 93 16 01 	sts	0x0116, r25
     d7c:	80 93 15 01 	sts	0x0115, r24
                seconds = 0;
     d80:	10 92 25 02 	sts	0x0225, r1
              }
       }

       if(state == 3)         //snooze mode
     d84:	80 91 22 02 	lds	r24, 0x0222
     d88:	83 30       	cpi	r24, 0x03	; 3
     d8a:	f1 f6       	brne	.-68     	; 0xd48 <__vector_16+0x32>
     d8c:	e4 cf       	rjmp	.-56     	; 0xd56 <__vector_16+0x40>

00000d8e <bargraph>:
         }
 }


void bargraph(){
  PORTB |= 0x01; //rising edge to rgclk
     d8e:	c0 9a       	sbi	0x18, 0	; 24
  PORTB &= ~0x01;//falling edge to rgclk
     d90:	c0 98       	cbi	0x18, 0	; 24
     d92:	08 95       	ret

00000d94 <tcnt2_init>:
/**********************************************************************************
 initializing timer/counter2 in different configuration for controlling brightness
**********************************************************************************/

tcnt2_init(){                                //initializing timer/counter2 in different  
TCCR2 |= (1<<WGM20) | (1<<COM21) | (1<<CS20);//configurtion for controling
     d94:	85 b5       	in	r24, 0x25	; 37
     d96:	81 66       	ori	r24, 0x61	; 97
     d98:	85 bd       	out	0x25, r24	; 37
OCR2 = 0x00;                                 //brightness 
     d9a:	13 bc       	out	0x23, r1	; 35
}
     d9c:	08 95       	ret

00000d9e <tcnt21_init>:

tcnt21_init(){
TCCR2 |= (1<<WGM20) | (1<<COM21) | (1<<CS20);
     d9e:	85 b5       	in	r24, 0x25	; 37
     da0:	81 66       	ori	r24, 0x61	; 97
     da2:	85 bd       	out	0x25, r24	; 37
OCR2 = 0x2B;
     da4:	8b e2       	ldi	r24, 0x2B	; 43
     da6:	83 bd       	out	0x23, r24	; 35
}
     da8:	08 95       	ret

00000daa <tcnt22_init>:

tcnt22_init(){
TCCR2 |= (1<<WGM20) | (1<<COM21) | (1<<CS20);
     daa:	85 b5       	in	r24, 0x25	; 37
     dac:	81 66       	ori	r24, 0x61	; 97
     dae:	85 bd       	out	0x25, r24	; 37
OCR2 = 0x56;
     db0:	86 e5       	ldi	r24, 0x56	; 86
     db2:	83 bd       	out	0x23, r24	; 35
}
     db4:	08 95       	ret

00000db6 <tcnt23_init>:

tcnt23_init(){
TCCR2 |= (1<<WGM20) | (1<<COM21) | (1<<CS20);
     db6:	85 b5       	in	r24, 0x25	; 37
     db8:	81 66       	ori	r24, 0x61	; 97
     dba:	85 bd       	out	0x25, r24	; 37
OCR2 = 0x81;
     dbc:	81 e8       	ldi	r24, 0x81	; 129
     dbe:	83 bd       	out	0x23, r24	; 35
}
     dc0:	08 95       	ret

00000dc2 <tcnt24_init>:
tcnt24_init(){
TCCR2 |= (1<<WGM20) | (1<<COM21) | (1<<CS20);
     dc2:	85 b5       	in	r24, 0x25	; 37
     dc4:	81 66       	ori	r24, 0x61	; 97
     dc6:	85 bd       	out	0x25, r24	; 37
OCR2 = 0xAC;
     dc8:	8c ea       	ldi	r24, 0xAC	; 172
     dca:	83 bd       	out	0x23, r24	; 35
}
     dcc:	08 95       	ret

00000dce <tcnt25_init>:

tcnt25_init(){
TCCR2 |= (1<<WGM20) | (1<<COM21) | (1<<CS20);
     dce:	85 b5       	in	r24, 0x25	; 37
     dd0:	81 66       	ori	r24, 0x61	; 97
     dd2:	85 bd       	out	0x25, r24	; 37
OCR2 = 0xD7;
     dd4:	87 ed       	ldi	r24, 0xD7	; 215
     dd6:	83 bd       	out	0x23, r24	; 35
}
     dd8:	08 95       	ret

00000dda <tcnt26_init>:

tcnt26_init(){
TCCR2 |= (1<<WGM20) | (1<<COM21) | (1<<CS20);
     dda:	85 b5       	in	r24, 0x25	; 37
     ddc:	81 66       	ori	r24, 0x61	; 97
     dde:	85 bd       	out	0x25, r24	; 37
OCR2 = 0xE0;
     de0:	80 ee       	ldi	r24, 0xE0	; 224
     de2:	83 bd       	out	0x23, r24	; 35
}
     de4:	08 95       	ret

00000de6 <tcnt1_init>:
 // initializing timer/counter1 in pwm mode for annoying beep
/*************************************************************************************/

void tcnt1_init()              //initializing timer/counter1 in pwm mode
 {
   TCCR1A = 0x00;                  //for annoying beep
     de6:	1f bc       	out	0x2f, r1	; 47
   TCCR1B = (1<<WGM12) | (1<<CS11);
     de8:	8a e0       	ldi	r24, 0x0A	; 10
     dea:	8e bd       	out	0x2e, r24	; 46
   TCCR1C = 0x00;
     dec:	10 92 7a 00 	sts	0x007A, r1
   OCR1A = 0x0200;
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	92 e0       	ldi	r25, 0x02	; 2
     df4:	9b bd       	out	0x2b, r25	; 43
     df6:	8a bd       	out	0x2a, r24	; 42
   TIMSK |= (1<<OCIE1A);
     df8:	87 b7       	in	r24, 0x37	; 55
     dfa:	80 61       	ori	r24, 0x10	; 16
     dfc:	87 bf       	out	0x37, r24	; 55
     dfe:	08 95       	ret

00000e00 <__vector_12>:
 }
 

ISR(TIMER1_COMPA_vect)
 {
     e00:	1f 92       	push	r1
     e02:	0f 92       	push	r0
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	0f 92       	push	r0
     e08:	11 24       	eor	r1, r1
     e0a:	2f 93       	push	r18
     e0c:	3f 93       	push	r19
     e0e:	8f 93       	push	r24
     e10:	9f 93       	push	r25
   if((sum == total) && (state & 0x03) ==0){    
     e12:	20 91 13 01 	lds	r18, 0x0113
     e16:	30 91 14 01 	lds	r19, 0x0114
     e1a:	80 91 15 01 	lds	r24, 0x0115
     e1e:	90 91 16 01 	lds	r25, 0x0116
     e22:	28 17       	cp	r18, r24
     e24:	39 07       	cpc	r19, r25
     e26:	81 f0       	breq	.+32     	; 0xe48 <__vector_12+0x48>
   PORTD ^= 0x80;}                              // RING alarm
   if((sum == total) && (state & 0x03) == 3){}  //if its snooze mode then dont play alarm
                                                  
     if(seconds1 >= 10)                         //after 10secs snooze play alarm
     e28:	80 91 24 02 	lds	r24, 0x0224
     e2c:	8a 30       	cpi	r24, 0x0A	; 10
     e2e:	18 f0       	brcs	.+6      	; 0xe36 <__vector_12+0x36>
       {
         PORTD ^= 0x80;
     e30:	82 b3       	in	r24, 0x12	; 18
     e32:	80 58       	subi	r24, 0x80	; 128
     e34:	82 bb       	out	0x12, r24	; 18
       }
if(sum != total){}                        

  }//ISR
     e36:	9f 91       	pop	r25
     e38:	8f 91       	pop	r24
     e3a:	3f 91       	pop	r19
     e3c:	2f 91       	pop	r18
     e3e:	0f 90       	pop	r0
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	0f 90       	pop	r0
     e44:	1f 90       	pop	r1
     e46:	18 95       	reti
 }
 

ISR(TIMER1_COMPA_vect)
 {
   if((sum == total) && (state & 0x03) ==0){    
     e48:	80 91 22 02 	lds	r24, 0x0222
     e4c:	83 70       	andi	r24, 0x03	; 3
     e4e:	61 f7       	brne	.-40     	; 0xe28 <__vector_12+0x28>
   PORTD ^= 0x80;}                              // RING alarm
     e50:	82 b3       	in	r24, 0x12	; 18
     e52:	80 58       	subi	r24, 0x80	; 128
     e54:	82 bb       	out	0x12, r24	; 18
     e56:	e8 cf       	rjmp	.-48     	; 0xe28 <__vector_12+0x28>

00000e58 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
     e58:	1f 92       	push	r1
     e5a:	0f 92       	push	r0
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	0f 92       	push	r0
     e60:	11 24       	eor	r1, r1
     e62:	0b b6       	in	r0, 0x3b	; 59
     e64:	0f 92       	push	r0
     e66:	2f 93       	push	r18
     e68:	3f 93       	push	r19
     e6a:	8f 93       	push	r24
     e6c:	9f 93       	push	r25
     e6e:	af 93       	push	r26
     e70:	bf 93       	push	r27
     e72:	ef 93       	push	r30
     e74:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
     e76:	e0 91 71 00 	lds	r30, 0x0071
     e7a:	8e 2f       	mov	r24, r30
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	fc 01       	movw	r30, r24
     e80:	38 97       	sbiw	r30, 0x08	; 8
     e82:	e1 35       	cpi	r30, 0x51	; 81
     e84:	f1 05       	cpc	r31, r1
     e86:	b0 f0       	brcs	.+44     	; 0xeb4 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
     e88:	80 91 71 00 	lds	r24, 0x0071
     e8c:	80 93 ad 02 	sts	0x02AD, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
     e90:	84 e0       	ldi	r24, 0x04	; 4
     e92:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
     e96:	ff 91       	pop	r31
     e98:	ef 91       	pop	r30
     e9a:	bf 91       	pop	r27
     e9c:	af 91       	pop	r26
     e9e:	9f 91       	pop	r25
     ea0:	8f 91       	pop	r24
     ea2:	3f 91       	pop	r19
     ea4:	2f 91       	pop	r18
     ea6:	0f 90       	pop	r0
     ea8:	0b be       	out	0x3b, r0	; 59
     eaa:	0f 90       	pop	r0
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	0f 90       	pop	r0
     eb0:	1f 90       	pop	r1
     eb2:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
     eb4:	ea 5b       	subi	r30, 0xBA	; 186
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
     ebc:	80 91 40 02 	lds	r24, 0x0240
     ec0:	e0 91 ae 02 	lds	r30, 0x02AE
     ec4:	f0 91 af 02 	lds	r31, 0x02AF
     ec8:	e8 0f       	add	r30, r24
     eca:	f1 1d       	adc	r31, r1
     ecc:	80 91 73 00 	lds	r24, 0x0073
     ed0:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
     ed2:	84 e9       	ldi	r24, 0x94	; 148
     ed4:	80 93 74 00 	sts	0x0074, r24
      break;      
     ed8:	de cf       	rjmp	.-68     	; 0xe96 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
     eda:	80 91 b0 02 	lds	r24, 0x02B0
     ede:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
     ee2:	10 92 40 02 	sts	0x0240, r1
      TWCR = TWCR_SEND;     //send SLA+RW
     ee6:	85 e8       	ldi	r24, 0x85	; 133
     ee8:	80 93 74 00 	sts	0x0074, r24
      break;
     eec:	d4 cf       	rjmp	.-88     	; 0xe96 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
     eee:	80 91 40 02 	lds	r24, 0x0240
     ef2:	90 91 b1 02 	lds	r25, 0x02B1
     ef6:	89 17       	cp	r24, r25
     ef8:	60 f7       	brcc	.-40     	; 0xed2 <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
     efa:	e0 91 ae 02 	lds	r30, 0x02AE
     efe:	f0 91 af 02 	lds	r31, 0x02AF
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	98 0f       	add	r25, r24
     f06:	90 93 40 02 	sts	0x0240, r25
     f0a:	e8 0f       	add	r30, r24
     f0c:	f1 1d       	adc	r31, r1
     f0e:	80 81       	ld	r24, Z
     f10:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
     f14:	85 e8       	ldi	r24, 0x85	; 133
     f16:	80 93 74 00 	sts	0x0074, r24
     f1a:	bd cf       	rjmp	.-134    	; 0xe96 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
     f1c:	85 ea       	ldi	r24, 0xA5	; 165
     f1e:	80 93 74 00 	sts	0x0074, r24
      break;
     f22:	b9 cf       	rjmp	.-142    	; 0xe96 <__vector_33+0x3e>
     f24:	20 91 40 02 	lds	r18, 0x0240
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
     f28:	80 91 b1 02 	lds	r24, 0x02B1
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	28 17       	cp	r18, r24
     f34:	39 07       	cpc	r19, r25
     f36:	dc f4       	brge	.+54     	; 0xf6e <__vector_33+0x116>
     f38:	85 ec       	ldi	r24, 0xC5	; 197
     f3a:	80 93 74 00 	sts	0x0074, r24
     f3e:	ab cf       	rjmp	.-170    	; 0xe96 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
     f40:	e0 91 ae 02 	lds	r30, 0x02AE
     f44:	f0 91 af 02 	lds	r31, 0x02AF
     f48:	80 91 40 02 	lds	r24, 0x0240
     f4c:	21 e0       	ldi	r18, 0x01	; 1
     f4e:	28 0f       	add	r18, r24
     f50:	20 93 40 02 	sts	0x0240, r18
     f54:	e8 0f       	add	r30, r24
     f56:	f1 1d       	adc	r31, r1
     f58:	80 91 73 00 	lds	r24, 0x0073
     f5c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
     f5e:	80 91 b1 02 	lds	r24, 0x02B1
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	28 17       	cp	r18, r24
     f6a:	39 07       	cpc	r19, r25
     f6c:	2c f3       	brlt	.-54     	; 0xf38 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
     f6e:	85 e8       	ldi	r24, 0x85	; 133
     f70:	80 93 74 00 	sts	0x0074, r24
     f74:	90 cf       	rjmp	.-224    	; 0xe96 <__vector_33+0x3e>

00000f76 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     f76:	80 91 74 00 	lds	r24, 0x0074
}
     f7a:	81 70       	andi	r24, 0x01	; 1
     f7c:	08 95       	ret

00000f7e <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     f7e:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
     f82:	90 fd       	sbrc	r25, 0
     f84:	fc cf       	rjmp	.-8      	; 0xf7e <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
     f86:	8e 7f       	andi	r24, 0xFE	; 254
     f88:	80 93 b0 02 	sts	0x02B0, r24
  twi_buf = twi_data;                   //load pointer to write buffer
     f8c:	70 93 af 02 	sts	0x02AF, r23
     f90:	60 93 ae 02 	sts	0x02AE, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
     f94:	40 93 b1 02 	sts	0x02B1, r20
  TWCR = TWCR_START;                    //initiate START
     f98:	85 ea       	ldi	r24, 0xA5	; 165
     f9a:	80 93 74 00 	sts	0x0074, r24
     f9e:	08 95       	ret

00000fa0 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     fa0:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
     fa4:	90 fd       	sbrc	r25, 0
     fa6:	fc cf       	rjmp	.-8      	; 0xfa0 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
     fa8:	81 60       	ori	r24, 0x01	; 1
     faa:	80 93 b0 02 	sts	0x02B0, r24
  twi_buf = twi_data;                  //load pointer to write buffer
     fae:	70 93 af 02 	sts	0x02AF, r23
     fb2:	60 93 ae 02 	sts	0x02AE, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
     fb6:	40 93 b1 02 	sts	0x02B1, r20
  TWCR = TWCR_START;                   //initiate START
     fba:	85 ea       	ldi	r24, 0xA5	; 165
     fbc:	80 93 74 00 	sts	0x0074, r24
     fc0:	08 95       	ret

00000fc2 <init_twi>:
//10K pullups are present on the board
//For the alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
     fc8:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
     fcc:	8c e0       	ldi	r24, 0x0C	; 12
     fce:	80 93 70 00 	sts	0x0070, r24
     fd2:	08 95       	ret

00000fd4 <get_int_status>:
//
//TODO: update for interrupts
// 
uint8_t get_int_status(){

    si4734_wr_buf[0] = GET_INT_STATUS;              
     fd4:	84 e1       	ldi	r24, 0x14	; 20
     fd6:	80 93 b2 02 	sts	0x02B2, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
     fda:	41 e0       	ldi	r20, 0x01	; 1
     fdc:	62 eb       	ldi	r22, 0xB2	; 178
     fde:	72 e0       	ldi	r23, 0x02	; 2
     fe0:	82 e2       	ldi	r24, 0x22	; 34
     fe2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
     fe6:	0e 94 bb 07 	call	0xf76	; 0xf76 <twi_busy>
     fea:	81 11       	cpse	r24, r1
     fec:	fc cf       	rjmp	.-8      	; 0xfe6 <get_int_status+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fee:	8f ea       	ldi	r24, 0xAF	; 175
     ff0:	94 e0       	ldi	r25, 0x04	; 4
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <get_int_status+0x1e>
     ff6:	00 c0       	rjmp	.+0      	; 0xff8 <get_int_status+0x24>
     ff8:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status 
     ffa:	41 e0       	ldi	r20, 0x01	; 1
     ffc:	64 ed       	ldi	r22, 0xD4	; 212
     ffe:	72 e0       	ldi	r23, 0x02	; 2
    1000:	82 e2       	ldi	r24, 0x22	; 34
    1002:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    1006:	0e 94 bb 07 	call	0xf76	; 0xf76 <twi_busy>
    100a:	81 11       	cpse	r24, r1
    100c:	fc cf       	rjmp	.-8      	; 0x1006 <get_int_status+0x32>
    return(si4734_rd_buf[0]);
}
    100e:	80 91 d4 02 	lds	r24, 0x02D4
    1012:	08 95       	ret

00001014 <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  si4734_wr_buf[0] = 0x20;  //fm tune command
    1014:	e2 eb       	ldi	r30, 0xB2	; 178
    1016:	f2 e0       	ldi	r31, 0x02	; 2
    1018:	80 e2       	ldi	r24, 0x20	; 32
    101a:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
    101c:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
    101e:	80 91 17 01 	lds	r24, 0x0117
    1022:	90 91 18 01 	lds	r25, 0x0118
    1026:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
    1028:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
    102a:	14 82       	std	Z+4, r1	; 0x04
  //send fm tune command
  STC_interrupt = FALSE;
    102c:	10 92 d3 02 	sts	0x02D3, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
    1030:	45 e0       	ldi	r20, 0x05	; 5
    1032:	bf 01       	movw	r22, r30
    1034:	82 e2       	ldi	r24, 0x22	; 34
    1036:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <twi_start_wr>

0000103a <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq(){
  si4734_wr_buf[0] = AM_TUNE_FREQ; //am tune command
    103a:	80 e4       	ldi	r24, 0x40	; 64
    103c:	80 93 b2 02 	sts	0x02B2, r24
  si4734_wr_buf[1] = 0x00;         //no FAST tune
    1040:	10 92 b3 02 	sts	0x02B3, r1
  si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
    1044:	80 91 79 02 	lds	r24, 0x0279
    1048:	90 91 7a 02 	lds	r25, 0x027A
    104c:	90 93 b4 02 	sts	0x02B4, r25
  si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
    1050:	80 93 b5 02 	sts	0x02B5, r24
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    1054:	10 92 b6 02 	sts	0x02B6, r1
  si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
    1058:	10 92 b7 02 	sts	0x02B7, r1
  //send am tune command
  STC_interrupt = FALSE;
    105c:	10 92 d3 02 	sts	0x02D3, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    1060:	46 e0       	ldi	r20, 0x06	; 6
    1062:	62 eb       	ldi	r22, 0xB2	; 178
    1064:	72 e0       	ldi	r23, 0x02	; 2
    1066:	82 e2       	ldi	r24, 0x22	; 34
    1068:	0e 94 bf 07 	call	0xf7e	; 0xf7e <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
    106c:	80 91 d3 02 	lds	r24, 0x02D3
    1070:	88 23       	and	r24, r24
    1072:	e1 f3       	breq	.-8      	; 0x106c <am_tune_freq+0x32>
}
    1074:	08 95       	ret

00001076 <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq(){
  si4734_wr_buf[0] = 0x40;  //am tune command
    1076:	e2 eb       	ldi	r30, 0xB2	; 178
    1078:	f2 e0       	ldi	r31, 0x02	; 2
    107a:	80 e4       	ldi	r24, 0x40	; 64
    107c:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FAST tune
    107e:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
    1080:	80 91 a3 02 	lds	r24, 0x02A3
    1084:	90 91 a4 02 	lds	r25, 0x02A4
    1088:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
    108a:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    108c:	14 82       	std	Z+4, r1	; 0x04
  si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte 
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	85 83       	std	Z+5, r24	; 0x05
  //send am tune command
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    1092:	46 e0       	ldi	r20, 0x06	; 6
    1094:	bf 01       	movw	r22, r30
    1096:	82 e2       	ldi	r24, 0x22	; 34
    1098:	0e 94 bf 07 	call	0xf7e	; 0xf7e <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    109c:	2f ef       	ldi	r18, 0xFF	; 255
    109e:	87 ee       	ldi	r24, 0xE7	; 231
    10a0:	93 e0       	ldi	r25, 0x03	; 3
    10a2:	21 50       	subi	r18, 0x01	; 1
    10a4:	80 40       	sbci	r24, 0x00	; 0
    10a6:	90 40       	sbci	r25, 0x00	; 0
    10a8:	e1 f7       	brne	.-8      	; 0x10a2 <sw_tune_freq+0x2c>
    10aa:	00 c0       	rjmp	.+0      	; 0x10ac <sw_tune_freq+0x36>
    10ac:	00 00       	nop
    10ae:	08 95       	ret

000010b0 <radio_pwr_dwn>:
//

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
    10b0:	80 91 27 02 	lds	r24, 0x0227
    10b4:	90 91 28 02 	lds	r25, 0x0228
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	91 05       	cpc	r25, r1
    10bc:	19 f1       	breq	.+70     	; 0x1104 <__stack+0x5>
    10be:	c8 f0       	brcs	.+50     	; 0x10f2 <radio_pwr_dwn+0x42>
    10c0:	02 97       	sbiw	r24, 0x02	; 2
    10c2:	41 f4       	brne	.+16     	; 0x10d4 <radio_pwr_dwn+0x24>
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
  case(SW) : eeprom_write_word(&eeprom_sw_freq, current_sw_freq); break;
    10c4:	60 91 a3 02 	lds	r22, 0x02A3
    10c8:	70 91 a4 02 	lds	r23, 0x02A4
    10cc:	85 ea       	ldi	r24, 0xA5	; 165
    10ce:	92 e0       	ldi	r25, 0x02	; 2
    10d0:	0e 94 cb 10 	call	0x2196	; 0x2196 <eeprom_write_word>
  default  : break;
}//switch      

  eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
    10d4:	60 91 78 02 	lds	r22, 0x0278
    10d8:	82 e4       	ldi	r24, 0x42	; 66
    10da:	92 e0       	ldi	r25, 0x02	; 2
    10dc:	0e 94 be 10 	call	0x217c	; 0x217c <eeprom_write_byte>

//send fm power down command
    si4734_wr_buf[0] = 0x11;
    10e0:	81 e1       	ldi	r24, 0x11	; 17
    10e2:	80 93 b2 02 	sts	0x02B2, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    10e6:	41 e0       	ldi	r20, 0x01	; 1
    10e8:	62 eb       	ldi	r22, 0xB2	; 178
    10ea:	72 e0       	ldi	r23, 0x02	; 2
    10ec:	82 e2       	ldi	r24, 0x22	; 34
    10ee:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <twi_start_wr>

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
    10f2:	60 91 17 01 	lds	r22, 0x0117
    10f6:	70 91 18 01 	lds	r23, 0x0118
    10fa:	83 e4       	ldi	r24, 0x43	; 67
    10fc:	92 e0       	ldi	r25, 0x02	; 2
    10fe:	0e 94 cb 10 	call	0x2196	; 0x2196 <eeprom_write_word>
    1102:	e8 cf       	rjmp	.-48     	; 0x10d4 <radio_pwr_dwn+0x24>
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
    1104:	60 91 79 02 	lds	r22, 0x0279
    1108:	70 91 7a 02 	lds	r23, 0x027A
    110c:	86 e7       	ldi	r24, 0x76	; 118
    110e:	92 e0       	ldi	r25, 0x02	; 2
    1110:	0e 94 cb 10 	call	0x2196	; 0x2196 <eeprom_write_word>
    1114:	df cf       	rjmp	.-66     	; 0x10d4 <radio_pwr_dwn+0x24>

00001116 <fm_rsq_status>:
//inside the chip. 
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
    1116:	83 e2       	ldi	r24, 0x23	; 35
    1118:	80 93 b2 02 	sts	0x02B2, r24
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	80 93 b3 02 	sts	0x02B3, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1122:	42 e0       	ldi	r20, 0x02	; 2
    1124:	62 eb       	ldi	r22, 0xB2	; 178
    1126:	72 e0       	ldi	r23, 0x02	; 2
    1128:	82 e2       	ldi	r24, 0x22	; 34
    112a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    112e:	0e 94 bb 07 	call	0xf76	; 0xf76 <twi_busy>
    1132:	81 11       	cpse	r24, r1
    1134:	fc cf       	rjmp	.-8      	; 0x112e <fm_rsq_status+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1136:	8f ea       	ldi	r24, 0xAF	; 175
    1138:	94 e0       	ldi	r25, 0x04	; 4
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	f1 f7       	brne	.-4      	; 0x113a <fm_rsq_status+0x24>
    113e:	00 c0       	rjmp	.+0      	; 0x1140 <fm_rsq_status+0x2a>
    1140:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you 
    //when the command is received and has been processed.
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1142:	48 e0       	ldi	r20, 0x08	; 8
    1144:	6b eb       	ldi	r22, 0xBB	; 187
    1146:	72 e0       	ldi	r23, 0x02	; 2
    1148:	82 e2       	ldi	r24, 0x22	; 34
    114a:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    114e:	0e 94 bb 07 	call	0xf76	; 0xf76 <twi_busy>
    1152:	81 11       	cpse	r24, r1
    1154:	fc cf       	rjmp	.-8      	; 0x114e <fm_rsq_status+0x38>
}
    1156:	08 95       	ret

00001158 <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
    1158:	82 e2       	ldi	r24, 0x22	; 34
    115a:	80 93 b2 02 	sts	0x02B2, r24
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	80 93 b3 02 	sts	0x02B3, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1164:	42 e0       	ldi	r20, 0x02	; 2
    1166:	62 eb       	ldi	r22, 0xB2	; 178
    1168:	72 e0       	ldi	r23, 0x02	; 2
    116a:	82 e2       	ldi	r24, 0x22	; 34
    116c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1170:	0e 94 bb 07 	call	0xf76	; 0xf76 <twi_busy>
    1174:	81 11       	cpse	r24, r1
    1176:	fc cf       	rjmp	.-8      	; 0x1170 <fm_tune_status+0x18>
    1178:	8f ea       	ldi	r24, 0xAF	; 175
    117a:	94 e0       	ldi	r25, 0x04	; 4
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <fm_tune_status+0x24>
    1180:	00 c0       	rjmp	.+0      	; 0x1182 <fm_tune_status+0x2a>
    1182:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1184:	48 e0       	ldi	r20, 0x08	; 8
    1186:	6b eb       	ldi	r22, 0xBB	; 187
    1188:	72 e0       	ldi	r23, 0x02	; 2
    118a:	82 e2       	ldi	r24, 0x22	; 34
    118c:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    1190:	0e 94 bb 07 	call	0xf76	; 0xf76 <twi_busy>
    1194:	81 11       	cpse	r24, r1
    1196:	fc cf       	rjmp	.-8      	; 0x1190 <fm_tune_status+0x38>
}
    1198:	08 95       	ret

0000119a <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){

    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
    119a:	82 e4       	ldi	r24, 0x42	; 66
    119c:	80 93 b2 02 	sts	0x02B2, r24
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	80 93 b3 02 	sts	0x02B3, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    11a6:	42 e0       	ldi	r20, 0x02	; 2
    11a8:	62 eb       	ldi	r22, 0xB2	; 178
    11aa:	72 e0       	ldi	r23, 0x02	; 2
    11ac:	82 e2       	ldi	r24, 0x22	; 34
    11ae:	0e 94 bf 07 	call	0xf7e	; 0xf7e <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    11b2:	0e 94 bb 07 	call	0xf76	; 0xf76 <twi_busy>
    11b6:	81 11       	cpse	r24, r1
    11b8:	fc cf       	rjmp	.-8      	; 0x11b2 <am_tune_status+0x18>
    11ba:	8f ea       	ldi	r24, 0xAF	; 175
    11bc:	94 e0       	ldi	r25, 0x04	; 4
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	f1 f7       	brne	.-4      	; 0x11be <am_tune_status+0x24>
    11c2:	00 c0       	rjmp	.+0      	; 0x11c4 <am_tune_status+0x2a>
    11c4:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    11c6:	48 e0       	ldi	r20, 0x08	; 8
    11c8:	6b eb       	ldi	r22, 0xBB	; 187
    11ca:	72 e0       	ldi	r23, 0x02	; 2
    11cc:	82 e2       	ldi	r24, 0x22	; 34
    11ce:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <twi_start_rd>

000011d2 <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){

    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
    11d2:	83 e4       	ldi	r24, 0x43	; 67
    11d4:	80 93 b2 02 	sts	0x02B2, r24
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	80 93 b3 02 	sts	0x02B3, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    11de:	42 e0       	ldi	r20, 0x02	; 2
    11e0:	62 eb       	ldi	r22, 0xB2	; 178
    11e2:	72 e0       	ldi	r23, 0x02	; 2
    11e4:	82 e2       	ldi	r24, 0x22	; 34
    11e6:	0e 94 bf 07 	call	0xf7e	; 0xf7e <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    11ea:	0e 94 bb 07 	call	0xf76	; 0xf76 <twi_busy>
    11ee:	81 11       	cpse	r24, r1
    11f0:	fc cf       	rjmp	.-8      	; 0x11ea <am_rsq_status+0x18>
    11f2:	8f ea       	ldi	r24, 0xAF	; 175
    11f4:	94 e0       	ldi	r25, 0x04	; 4
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <am_rsq_status+0x24>
    11fa:	00 c0       	rjmp	.+0      	; 0x11fc <am_rsq_status+0x2a>
    11fc:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    11fe:	48 e0       	ldi	r20, 0x08	; 8
    1200:	6b eb       	ldi	r22, 0xBB	; 187
    1202:	72 e0       	ldi	r23, 0x02	; 2
    1204:	82 e2       	ldi	r24, 0x22	; 34
    1206:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <twi_start_rd>

0000120a <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms. 
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
    120a:	e2 eb       	ldi	r30, 0xB2	; 178
    120c:	f2 e0       	ldi	r31, 0x02	; 2
    120e:	22 e1       	ldi	r18, 0x12	; 18
    1210:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
    1212:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
    1214:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
    1216:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
    1218:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
    121a:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    121c:	46 e0       	ldi	r20, 0x06	; 6
    121e:	bf 01       	movw	r22, r30
    1220:	82 e2       	ldi	r24, 0x22	; 34
    1222:	0e 94 bf 07 	call	0xf7e	; 0xf7e <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1226:	8f e3       	ldi	r24, 0x3F	; 63
    1228:	9c e9       	ldi	r25, 0x9C	; 156
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	f1 f7       	brne	.-4      	; 0x122a <set_property+0x20>
    122e:	00 c0       	rjmp	.+0      	; 0x1230 <set_property+0x26>
    1230:	00 00       	nop
    1232:	08 95       	ret

00001234 <fm_pwr_up>:
//********************************************************************************
//                            fm_pwr_up()
//
void fm_pwr_up(){
//restore the previous fm frequency  
 current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work 
    1234:	83 e4       	ldi	r24, 0x43	; 67
    1236:	92 e0       	ldi	r25, 0x02	; 2
    1238:	0e 94 b8 10 	call	0x2170	; 0x2170 <eeprom_read_word>
    123c:	90 93 18 01 	sts	0x0118, r25
    1240:	80 93 17 01 	sts	0x0117, r24
 current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    1244:	82 e4       	ldi	r24, 0x42	; 66
    1246:	92 e0       	ldi	r25, 0x02	; 2
    1248:	0e 94 b0 10 	call	0x2160	; 0x2160 <eeprom_read_byte>
    124c:	80 93 78 02 	sts	0x0278, r24

//send fm power up command
  si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
    1250:	e2 eb       	ldi	r30, 0xB2	; 178
    1252:	f2 e0       	ldi	r31, 0x02	; 2
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
    1258:	80 e5       	ldi	r24, 0x50	; 80
    125a:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
    125c:	85 e0       	ldi	r24, 0x05	; 5
    125e:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1260:	43 e0       	ldi	r20, 0x03	; 3
    1262:	bf 01       	movw	r22, r30
    1264:	82 e2       	ldi	r24, 0x22	; 34
    1266:	0e 94 bf 07 	call	0xf7e	; 0xf7e <twi_start_wr>
    126a:	2f ef       	ldi	r18, 0xFF	; 255
    126c:	8b ed       	ldi	r24, 0xDB	; 219
    126e:	95 e0       	ldi	r25, 0x05	; 5
    1270:	21 50       	subi	r18, 0x01	; 1
    1272:	80 40       	sbci	r24, 0x00	; 0
    1274:	90 40       	sbci	r25, 0x00	; 0
    1276:	e1 f7       	brne	.-8      	; 0x1270 <fm_pwr_up+0x3c>
    1278:	00 c0       	rjmp	.+0      	; 0x127a <fm_pwr_up+0x46>
    127a:	00 00       	nop
  _delay_ms(120);               //startup delay as specified 
  //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
  //low pulse will be output from GPIO2/INT when tune or seek is completed.
  set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
    127c:	61 e0       	ldi	r22, 0x01	; 1
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	0c 94 05 09 	jmp	0x120a	; 0x120a <set_property>

00001288 <am_pwr_up>:
//********************************************************************************
//                            am_pwr_up()
//
void am_pwr_up(){
//restore the previous am frequency  
  current_am_freq = eeprom_read_word(&eeprom_am_freq);
    1288:	86 e7       	ldi	r24, 0x76	; 118
    128a:	92 e0       	ldi	r25, 0x02	; 2
    128c:	0e 94 b8 10 	call	0x2170	; 0x2170 <eeprom_read_word>
    1290:	90 93 7a 02 	sts	0x027A, r25
    1294:	80 93 79 02 	sts	0x0279, r24
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    1298:	82 e4       	ldi	r24, 0x42	; 66
    129a:	92 e0       	ldi	r25, 0x02	; 2
    129c:	0e 94 b0 10 	call	0x2160	; 0x2160 <eeprom_read_byte>
    12a0:	80 93 78 02 	sts	0x0278, r24

//send am power up command
  si4734_wr_buf[0] = AM_PWR_UP;
    12a4:	e2 eb       	ldi	r30, 0xB2	; 178
    12a6:	f2 e0       	ldi	r31, 0x02	; 2
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
    12ac:	81 e5       	ldi	r24, 0x51	; 81
    12ae:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;
    12b0:	85 e0       	ldi	r24, 0x05	; 5
    12b2:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    12b4:	43 e0       	ldi	r20, 0x03	; 3
    12b6:	bf 01       	movw	r22, r30
    12b8:	82 e2       	ldi	r24, 0x22	; 34
    12ba:	0e 94 bf 07 	call	0xf7e	; 0xf7e <twi_start_wr>
    12be:	2f ef       	ldi	r18, 0xFF	; 255
    12c0:	8b ed       	ldi	r24, 0xDB	; 219
    12c2:	95 e0       	ldi	r25, 0x05	; 5
    12c4:	21 50       	subi	r18, 0x01	; 1
    12c6:	80 40       	sbci	r24, 0x00	; 0
    12c8:	90 40       	sbci	r25, 0x00	; 0
    12ca:	e1 f7       	brne	.-8      	; 0x12c4 <am_pwr_up+0x3c>
    12cc:	00 c0       	rjmp	.+0      	; 0x12ce <am_pwr_up+0x46>
    12ce:	00 00       	nop
  _delay_ms(120);   
  set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
    12d0:	61 e0       	ldi	r22, 0x01	; 1
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0c 94 05 09 	jmp	0x120a	; 0x120a <set_property>

000012dc <sw_pwr_up>:
//                            sw_pwr_up()
//

void sw_pwr_up(){
//restore the previous sw frequency  
  current_sw_freq = eeprom_read_word(&eeprom_sw_freq);
    12dc:	85 ea       	ldi	r24, 0xA5	; 165
    12de:	92 e0       	ldi	r25, 0x02	; 2
    12e0:	0e 94 b8 10 	call	0x2170	; 0x2170 <eeprom_read_word>
    12e4:	90 93 a4 02 	sts	0x02A4, r25
    12e8:	80 93 a3 02 	sts	0x02A3, r24
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    12ec:	82 e4       	ldi	r24, 0x42	; 66
    12ee:	92 e0       	ldi	r25, 0x02	; 2
    12f0:	0e 94 b0 10 	call	0x2160	; 0x2160 <eeprom_read_byte>
    12f4:	80 93 78 02 	sts	0x0278, r24

//send sw power up command (same as am, only tuning rate is different)
    si4734_wr_buf[0] = AM_PWR_UP; //same cmd as for AM
    12f8:	e2 eb       	ldi	r30, 0xB2	; 178
    12fa:	f2 e0       	ldi	r31, 0x02	; 2
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x51;
    1300:	81 e5       	ldi	r24, 0x51	; 81
    1302:	81 83       	std	Z+1, r24	; 0x01
    si4734_wr_buf[2] = 0x05;
    1304:	85 e0       	ldi	r24, 0x05	; 5
    1306:	82 83       	std	Z+2, r24	; 0x02
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1308:	43 e0       	ldi	r20, 0x03	; 3
    130a:	bf 01       	movw	r22, r30
    130c:	82 e2       	ldi	r24, 0x22	; 34
    130e:	0e 94 bf 07 	call	0xf7e	; 0xf7e <twi_start_wr>
    1312:	2f ef       	ldi	r18, 0xFF	; 255
    1314:	8b ed       	ldi	r24, 0xDB	; 219
    1316:	95 e0       	ldi	r25, 0x05	; 5
    1318:	21 50       	subi	r18, 0x01	; 1
    131a:	80 40       	sbci	r24, 0x00	; 0
    131c:	90 40       	sbci	r25, 0x00	; 0
    131e:	e1 f7       	brne	.-8      	; 0x1318 <sw_pwr_up+0x3c>
    1320:	00 c0       	rjmp	.+0      	; 0x1322 <sw_pwr_up+0x46>
    1322:	00 00       	nop
    _delay_ms(120);   //start up delay

  //set property to disable soft muting for shortwave broadcasts
  set_property(AM_SOFT_MUTE_MAX_ATTENUATION, 0x0000); //cut off soft mute  
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	93 e3       	ldi	r25, 0x33	; 51
    132c:	0e 94 05 09 	call	0x120a	; 0x120a <set_property>
  //select 4khz filter BW and engage power line filter
  set_property(AM_CHANNEL_FILTER, (AM_CHFILT_4KHZ | AM_PWR_LINE_NOISE_REJT_FILTER)); 
    1330:	61 e0       	ldi	r22, 0x01	; 1
    1332:	71 e0       	ldi	r23, 0x01	; 1
    1334:	82 e0       	ldi	r24, 0x02	; 2
    1336:	91 e3       	ldi	r25, 0x31	; 49
    1338:	0e 94 05 09 	call	0x120a	; 0x120a <set_property>
  set_property(GPO_IEN, GPO_IEN_STCIEN); //Seek/Tune Complete interrupt
    133c:	61 e0       	ldi	r22, 0x01	; 1
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0c 94 05 09 	jmp	0x120a	; 0x120a <set_property>

00001348 <get_rev>:
//TODO: UNTESTED!
//Report the chip revision info via uart1. UART1 be setup and connected to 
//a dumb terminal. e.g.: screen /dev/cu.usbserial-A800fh27 9600
//
void get_rev(){
    si4734_wr_buf[0] = GET_REV;                   //get rev command 
    1348:	80 e1       	ldi	r24, 0x10	; 16
    134a:	80 93 b2 02 	sts	0x02B2, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    134e:	41 e0       	ldi	r20, 0x01	; 1
    1350:	62 eb       	ldi	r22, 0xB2	; 178
    1352:	72 e0       	ldi	r23, 0x02	; 2
    1354:	82 e2       	ldi	r24, 0x22	; 34
    1356:	0e 94 bf 07 	call	0xf7e	; 0xf7e <twi_start_wr>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    135a:	0e 94 bb 07 	call	0xf76	; 0xf76 <twi_busy>
    135e:	81 11       	cpse	r24, r1
    1360:	fc cf       	rjmp	.-8      	; 0x135a <get_rev+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1362:	8f ea       	ldi	r24, 0xAF	; 175
    1364:	94 e0       	ldi	r25, 0x04	; 4
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	f1 f7       	brne	.-4      	; 0x1366 <get_rev+0x1e>
    136a:	00 c0       	rjmp	.+0      	; 0x136c <get_rev+0x24>
    136c:	00 00       	nop
    _delay_us(300);        //wait for processing delay
//get the revision info  
    twi_start_rd(SI4734_ADDRESS, si4734_revision_buf, 8);
    136e:	48 e0       	ldi	r20, 0x08	; 8
    1370:	63 ec       	ldi	r22, 0xC3	; 195
    1372:	72 e0       	ldi	r23, 0x02	; 2
    1374:	82 e2       	ldi	r24, 0x22	; 34
    1376:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    137a:	0e 94 bb 07 	call	0xf76	; 0xf76 <twi_busy>
    137e:	81 11       	cpse	r24, r1
    1380:	fc cf       	rjmp	.-8      	; 0x137a <get_rev+0x32>
//use TABs instead?
    uart1_puts("Si4734 Rev:  last 2 digits of part no.   chip rev     \n\r");
    1382:	81 e2       	ldi	r24, 0x21	; 33
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
    uart1_puts("             -------------------------   --------     \n\r");
    138a:	8a e5       	ldi	r24, 0x5A	; 90
    138c:	91 e0       	ldi	r25, 0x01	; 1
    138e:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
    uart1_puts("                          "); itoa((int)si4734_revision_buf[1], uart1_tx_buf, 10); uart1_puts(uart1_tx_buf); 
    1392:	83 e9       	ldi	r24, 0x93	; 147
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
    139a:	80 91 c4 02 	lds	r24, 0x02C4
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    139e:	4a e0       	ldi	r20, 0x0A	; 10
    13a0:	66 e4       	ldi	r22, 0x46	; 70
    13a2:	72 e0       	ldi	r23, 0x02	; 2
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__itoa_ncheck>
    13aa:	86 e4       	ldi	r24, 0x46	; 70
    13ac:	92 e0       	ldi	r25, 0x02	; 2
    13ae:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
    uart1_puts("             "); itoa((int)si4734_revision_buf[2], uart1_tx_buf, 10); uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    13b2:	80 ea       	ldi	r24, 0xA0	; 160
    13b4:	91 e0       	ldi	r25, 0x01	; 1
    13b6:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
    13ba:	80 91 c5 02 	lds	r24, 0x02C5
    13be:	4a e0       	ldi	r20, 0x0A	; 10
    13c0:	66 e4       	ldi	r22, 0x46	; 70
    13c2:	72 e0       	ldi	r23, 0x02	; 2
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__itoa_ncheck>
    13ca:	86 e4       	ldi	r24, 0x46	; 70
    13cc:	92 e0       	ldi	r25, 0x02	; 2
    13ce:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
    13d2:	80 e9       	ldi	r24, 0x90	; 144
    13d4:	91 e0       	ldi	r25, 0x01	; 1
    13d6:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <uart1_puts>

000013da <get_fm_rsq_status>:
// TODO: UNTESTED!
//Report the fm rsq status via uart1. Requires that UART1 be setup and connected to 
//a terminal. e.g.: screen /dev/cu.usbserial-A800fh27 9600
//Also requires that a fm_tune_status has been previously called.

void get_fm_rsq_status(){
    13da:	ff 92       	push	r15
    13dc:	0f 93       	push	r16
    13de:	1f 93       	push	r17
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	a8 97       	sbiw	r28, 0x28	; 40
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
  uint8_t disp_freq;  //temp holding variable
  char    str[40];    //temp for building strings

  uart1_puts("FM_RSQ_STATUS: ");
    13f4:	8e ea       	ldi	r24, 0xAE	; 174
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
  uart1_puts("status byte   :");   itoa((int)si4734_tune_status_buf[0], uart1_tx_buf, 16);   uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    13fc:	8e eb       	ldi	r24, 0xBE	; 190
    13fe:	91 e0       	ldi	r25, 0x01	; 1
    1400:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
    1404:	0b eb       	ldi	r16, 0xBB	; 187
    1406:	12 e0       	ldi	r17, 0x02	; 2
    1408:	f8 01       	movw	r30, r16
    140a:	80 81       	ld	r24, Z
    140c:	40 e1       	ldi	r20, 0x10	; 16
    140e:	66 e4       	ldi	r22, 0x46	; 70
    1410:	72 e0       	ldi	r23, 0x02	; 2
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__itoa_ncheck>
    1418:	86 e4       	ldi	r24, 0x46	; 70
    141a:	92 e0       	ldi	r25, 0x02	; 2
    141c:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
    1420:	80 e9       	ldi	r24, 0x90	; 144
    1422:	91 e0       	ldi	r25, 0x01	; 1
    1424:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
  uart1_puts("resp1         :");   itoa((int)si4734_tune_status_buf[1], uart1_tx_buf, 10);   uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    1428:	8e ec       	ldi	r24, 0xCE	; 206
    142a:	91 e0       	ldi	r25, 0x01	; 1
    142c:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
    1430:	f8 01       	movw	r30, r16
    1432:	81 81       	ldd	r24, Z+1	; 0x01
    1434:	4a e0       	ldi	r20, 0x0A	; 10
    1436:	66 e4       	ldi	r22, 0x46	; 70
    1438:	72 e0       	ldi	r23, 0x02	; 2
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__itoa_ncheck>
    1440:	86 e4       	ldi	r24, 0x46	; 70
    1442:	92 e0       	ldi	r25, 0x02	; 2
    1444:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
    1448:	80 e9       	ldi	r24, 0x90	; 144
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
  disp_freq = si4734_tune_status_buf[2];      //load high frequency byte
  disp_freq = (disp_freq << 8); //shift upper byte to upper 8 bits
  disp_freq |= si4734_tune_status_buf[3];     //load low high frequency byte
    1450:	f8 01       	movw	r30, r16
    1452:	f3 80       	ldd	r15, Z+3	; 0x03
  uart1_puts("freq          :");   itoa(disp_freq, uart1_tx_buf, 10);   uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    1454:	8e ed       	ldi	r24, 0xDE	; 222
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
    145c:	4a e0       	ldi	r20, 0x0A	; 10
    145e:	66 e4       	ldi	r22, 0x46	; 70
    1460:	72 e0       	ldi	r23, 0x02	; 2
    1462:	8f 2d       	mov	r24, r15
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__itoa_ncheck>
    146a:	86 e4       	ldi	r24, 0x46	; 70
    146c:	92 e0       	ldi	r25, 0x02	; 2
    146e:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
    1472:	80 e9       	ldi	r24, 0x90	; 144
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
  uart1_puts("freq high     :");   itoa((int)si4734_tune_status_buf[2], str, 16);   uart1_puts(str); uart1_puts("\n\r");
    147a:	8e ee       	ldi	r24, 0xEE	; 238
    147c:	91 e0       	ldi	r25, 0x01	; 1
    147e:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
    1482:	f8 01       	movw	r30, r16
    1484:	82 81       	ldd	r24, Z+2	; 0x02
    1486:	40 e1       	ldi	r20, 0x10	; 16
    1488:	be 01       	movw	r22, r28
    148a:	6f 5f       	subi	r22, 0xFF	; 255
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__itoa_ncheck>
    1494:	ce 01       	movw	r24, r28
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
    149c:	80 e9       	ldi	r24, 0x90	; 144
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
  uart1_puts("freq low      :");   itoa((int)si4734_tune_status_buf[3], str, 16);   uart1_puts(str); uart1_puts("\n\r");
    14a4:	8e ef       	ldi	r24, 0xFE	; 254
    14a6:	91 e0       	ldi	r25, 0x01	; 1
    14a8:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
    14ac:	f8 01       	movw	r30, r16
    14ae:	83 81       	ldd	r24, Z+3	; 0x03
    14b0:	40 e1       	ldi	r20, 0x10	; 16
    14b2:	be 01       	movw	r22, r28
    14b4:	6f 5f       	subi	r22, 0xFF	; 255
    14b6:	7f 4f       	sbci	r23, 0xFF	; 255
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__itoa_ncheck>
    14be:	ce 01       	movw	r24, r28
    14c0:	01 96       	adiw	r24, 0x01	; 1
    14c2:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
    14c6:	80 e9       	ldi	r24, 0x90	; 144
    14c8:	91 e0       	ldi	r25, 0x01	; 1
    14ca:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
  uart1_puts("rssi          :");   itoa((int)si4734_tune_status_buf[4], uart1_tx_buf, 16);   uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    14ce:	8e e0       	ldi	r24, 0x0E	; 14
    14d0:	92 e0       	ldi	r25, 0x02	; 2
    14d2:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
    14d6:	f8 01       	movw	r30, r16
    14d8:	84 81       	ldd	r24, Z+4	; 0x04
    14da:	40 e1       	ldi	r20, 0x10	; 16
    14dc:	66 e4       	ldi	r22, 0x46	; 70
    14de:	72 e0       	ldi	r23, 0x02	; 2
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__itoa_ncheck>
    14e6:	86 e4       	ldi	r24, 0x46	; 70
    14e8:	92 e0       	ldi	r25, 0x02	; 2
    14ea:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
    14ee:	80 e9       	ldi	r24, 0x90	; 144
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	0e 94 a6 0a 	call	0x154c	; 0x154c <uart1_puts>
}
    14f6:	a8 96       	adiw	r28, 0x28	; 40
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	ff 90       	pop	r15
    150c:	08 95       	ret

0000150e <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    150e:	5d 9b       	sbis	0x0b, 5	; 11
    1510:	fe cf       	rjmp	.-4      	; 0x150e <uart_putc>
    UDR0 = data;    // Send data byte
    1512:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1514:	5d 9b       	sbis	0x0b, 5	; 11
    1516:	fe cf       	rjmp	.-4      	; 0x1514 <uart_putc+0x6>
}
    1518:	08 95       	ret

0000151a <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    151a:	90 91 9b 00 	lds	r25, 0x009B
    151e:	95 ff       	sbrs	r25, 5
    1520:	fc cf       	rjmp	.-8      	; 0x151a <uart1_putc>
    UDR1 = data;    // Send data byte
    1522:	80 93 9c 00 	sts	0x009C, r24
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    1526:	80 91 9b 00 	lds	r24, 0x009B
    152a:	85 ff       	sbrs	r24, 5
    152c:	fc cf       	rjmp	.-8      	; 0x1526 <uart1_putc+0xc>
}
    152e:	08 95       	ret

00001530 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    1530:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    1532:	90 81       	ld	r25, Z
    1534:	99 23       	and	r25, r25
    1536:	49 f0       	breq	.+18     	; 0x154a <uart_puts+0x1a>
    1538:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    153a:	5d 9b       	sbis	0x0b, 5	; 11
    153c:	fe cf       	rjmp	.-4      	; 0x153a <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    153e:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1540:	5d 9b       	sbis	0x0b, 5	; 11
    1542:	fe cf       	rjmp	.-4      	; 0x1540 <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    1544:	91 91       	ld	r25, Z+
    1546:	91 11       	cpse	r25, r1
    1548:	f8 cf       	rjmp	.-16     	; 0x153a <uart_puts+0xa>
    154a:	08 95       	ret

0000154c <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    154c:	fc 01       	movw	r30, r24
    154e:	20 81       	ld	r18, Z
    1550:	22 23       	and	r18, r18
    1552:	71 f0       	breq	.+28     	; 0x1570 <uart1_puts+0x24>
    1554:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    1556:	90 91 9b 00 	lds	r25, 0x009B
    155a:	95 ff       	sbrs	r25, 5
    155c:	fc cf       	rjmp	.-8      	; 0x1556 <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
    155e:	20 93 9c 00 	sts	0x009C, r18
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    1562:	90 91 9b 00 	lds	r25, 0x009B
    1566:	95 ff       	sbrs	r25, 5
    1568:	fc cf       	rjmp	.-8      	; 0x1562 <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    156a:	21 91       	ld	r18, Z+
    156c:	21 11       	cpse	r18, r1
    156e:	f3 cf       	rjmp	.-26     	; 0x1556 <uart1_puts+0xa>
    1570:	08 95       	ret

00001572 <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    1572:	9c 01       	movw	r18, r24
    1574:	fc 01       	movw	r30, r24
    1576:	44 91       	lpm	r20, Z
    1578:	44 23       	and	r20, r20
    157a:	69 f0       	breq	.+26     	; 0x1596 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	f9 01       	movw	r30, r18
    1580:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1582:	5d 9b       	sbis	0x0b, 5	; 11
    1584:	fe cf       	rjmp	.-4      	; 0x1582 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    1586:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1588:	5d 9b       	sbis	0x0b, 5	; 11
    158a:	fe cf       	rjmp	.-4      	; 0x1588 <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    158c:	9c 01       	movw	r18, r24
    158e:	fc 01       	movw	r30, r24
    1590:	44 91       	lpm	r20, Z
    1592:	41 11       	cpse	r20, r1
    1594:	f3 cf       	rjmp	.-26     	; 0x157c <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    1596:	08 95       	ret

00001598 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
    1598:	8a b1       	in	r24, 0x0a	; 10
    159a:	88 69       	ori	r24, 0x98	; 152
    159c:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    159e:	e5 e9       	ldi	r30, 0x95	; 149
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	86 60       	ori	r24, 0x06	; 6
    15a6:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
    15a8:	10 92 90 00 	sts	0x0090, r1
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    15ac:	87 e6       	ldi	r24, 0x67	; 103
    15ae:	89 b9       	out	0x09, r24	; 9
    15b0:	08 95       	ret

000015b2 <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
    15b2:	ea e9       	ldi	r30, 0x9A	; 154
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	88 61       	ori	r24, 0x18	; 24
    15ba:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
    15bc:	ed e9       	ldi	r30, 0x9D	; 157
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	86 60       	ori	r24, 0x06	; 6
    15c4:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >>8 ); //load upper byte of the baud rate into UBRR 
    15c6:	10 92 98 00 	sts	0x0098, r1
  UBRR1L =  BAUDVALUE_1;       //load lower byte of the baud rate into UBRR 
    15ca:	87 e6       	ldi	r24, 0x67	; 103
    15cc:	80 93 99 00 	sts	0x0099, r24
    15d0:	08 95       	ret

000015d2 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    15d2:	80 e8       	ldi	r24, 0x80	; 128
    15d4:	9e e3       	ldi	r25, 0x3E	; 62
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <uart_getc+0xa>
    15d8:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    15da:	21 f0       	breq	.+8      	; 0x15e4 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    15dc:	5f 9b       	sbis	0x0b, 7	; 11
    15de:	fc cf       	rjmp	.-8      	; 0x15d8 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
    15e0:	8c b1       	in	r24, 0x0c	; 12
    15e2:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
    15e4:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
    15e6:	08 95       	ret

000015e8 <uart1_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
    15e8:	80 e8       	ldi	r24, 0x80	; 128
    15ea:	9e e3       	ldi	r25, 0x3E	; 62
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <uart1_getc+0xa>
    15ee:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    15f0:	39 f0       	breq	.+14     	; 0x1600 <uart1_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
    15f2:	20 91 9b 00 	lds	r18, 0x009B
    15f6:	27 ff       	sbrs	r18, 7
    15f8:	fa cf       	rjmp	.-12     	; 0x15ee <uart1_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
    15fa:	80 91 9c 00 	lds	r24, 0x009C
    15fe:	08 95       	ret
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
  timer++;
  if(timer >= 16000){ return(0);}
    1600:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
}
    1602:	08 95       	ret

00001604 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1604:	91 e0       	ldi	r25, 0x01	; 1
    1606:	81 11       	cpse	r24, r1
    1608:	01 c0       	rjmp	.+2      	; 0x160c <send_lcd+0x8>
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    160e:	77 9b       	sbis	0x0e, 7	; 14
    1610:	fe cf       	rjmp	.-4      	; 0x160e <send_lcd+0xa>
  SPDR = byte;                        //send payload
    1612:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1614:	77 9b       	sbis	0x0e, 7	; 14
    1616:	fe cf       	rjmp	.-4      	; 0x1614 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1618:	80 91 62 00 	lds	r24, 0x0062
    161c:	88 60       	ori	r24, 0x08	; 8
    161e:	80 93 62 00 	sts	0x0062, r24
    1622:	80 91 62 00 	lds	r24, 0x0062
    1626:	87 7f       	andi	r24, 0xF7	; 247
    1628:	80 93 62 00 	sts	0x0062, r24
    162c:	08 95       	ret

0000162e <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
    162e:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
    1630:	c0 91 41 02 	lds	r28, 0x0241
    1634:	8c 0f       	add	r24, r28
    1636:	91 1d       	adc	r25, r1
    1638:	fc 01       	movw	r30, r24
    163a:	60 81       	ld	r22, Z
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
 i++;   //increment to next character
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	8c 0f       	add	r24, r28
    1646:	80 93 41 02 	sts	0x0241, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
    164a:	80 31       	cpi	r24, 0x10	; 16
    164c:	81 f0       	breq	.+32     	; 0x166e <refresh_lcd+0x40>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
    164e:	80 32       	cpi	r24, 0x20	; 32
    1650:	11 f0       	breq	.+4      	; 0x1656 <refresh_lcd+0x28>
}//refresh_lcd
    1652:	cf 91       	pop	r28
    1654:	08 95       	ret
    1656:	85 ed       	ldi	r24, 0xD5	; 213
    1658:	8a 95       	dec	r24
    165a:	f1 f7       	brne	.-4      	; 0x1658 <refresh_lcd+0x2a>
    165c:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    165e:	60 e8       	ldi	r22, 0x80	; 128
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
    1666:	10 92 41 02 	sts	0x0241, r1
}//refresh_lcd
    166a:	cf 91       	pop	r28
    166c:	08 95       	ret
    166e:	f5 ed       	ldi	r31, 0xD5	; 213
    1670:	fa 95       	dec	r31
    1672:	f1 f7       	brne	.-4      	; 0x1670 <refresh_lcd+0x42>
    1674:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    1676:	60 ec       	ldi	r22, 0xC0	; 192
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
    167e:	80 91 41 02 	lds	r24, 0x0241
    1682:	e5 cf       	rjmp	.-54     	; 0x164e <refresh_lcd+0x20>

00001684 <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    1684:	ef 92       	push	r14
    1686:	ff 92       	push	r15
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	1f 92       	push	r1
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    1698:	66 0f       	add	r22, r22
    169a:	66 0f       	add	r22, r22
    169c:	66 0f       	add	r22, r22
    169e:	60 5c       	subi	r22, 0xC0	; 192
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	99 83       	std	Y+1, r25	; 0x01
    16a4:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
    16a8:	85 ed       	ldi	r24, 0xD5	; 213
    16aa:	8a 95       	dec	r24
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <set_custom_character+0x26>
    16ae:	00 00       	nop
    16b0:	e1 2e       	mov	r14, r17
    16b2:	99 81       	ldd	r25, Y+1	; 0x01
    16b4:	f9 2e       	mov	r15, r25
    16b6:	87 01       	movw	r16, r14
    16b8:	08 5f       	subi	r16, 0xF8	; 248
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    16bc:	f7 01       	movw	r30, r14
    16be:	61 91       	ld	r22, Z+
    16c0:	7f 01       	movw	r14, r30
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
    16c8:	f5 ed       	ldi	r31, 0xD5	; 213
    16ca:	fa 95       	dec	r31
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <set_custom_character+0x46>
    16ce:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
    16d0:	e0 16       	cp	r14, r16
    16d2:	f1 06       	cpc	r15, r17
    16d4:	99 f7       	brne	.-26     	; 0x16bc <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
    16d6:	0f 90       	pop	r0
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	08 95       	ret

000016e6 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
    16e6:	90 e4       	ldi	r25, 0x40	; 64
    16e8:	89 9f       	mul	r24, r25
    16ea:	60 0d       	add	r22, r0
    16ec:	11 24       	eor	r1, r1
    16ee:	60 5c       	subi	r22, 0xC0	; 192
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <send_lcd>

000016f6 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    16f6:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    16f8:	88 23       	and	r24, r24
    16fa:	b9 f1       	breq	.+110    	; 0x176a <uint2lcd+0x74>
    16fc:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    16fe:	84 36       	cpi	r24, 0x64	; 100
    1700:	98 f4       	brcc	.+38     	; 0x1728 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    1702:	8a 30       	cpi	r24, 0x0A	; 10
    1704:	d8 f4       	brcc	.+54     	; 0x173c <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    1706:	8d ec       	ldi	r24, 0xCD	; 205
    1708:	c8 9f       	mul	r28, r24
    170a:	81 2d       	mov	r24, r1
    170c:	11 24       	eor	r1, r1
    170e:	86 95       	lsr	r24
    1710:	86 95       	lsr	r24
    1712:	86 95       	lsr	r24
    1714:	6c 2f       	mov	r22, r28
    1716:	2a e0       	ldi	r18, 0x0A	; 10
    1718:	82 9f       	mul	r24, r18
    171a:	60 19       	sub	r22, r0
    171c:	11 24       	eor	r1, r1
    171e:	60 5d       	subi	r22, 0xD0	; 208
    1720:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    1722:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    1724:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    1728:	69 e2       	ldi	r22, 0x29	; 41
    172a:	86 9f       	mul	r24, r22
    172c:	61 2d       	mov	r22, r1
    172e:	11 24       	eor	r1, r1
    1730:	62 95       	swap	r22
    1732:	6f 70       	andi	r22, 0x0F	; 15
    1734:	60 5d       	subi	r22, 0xD0	; 208
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    173c:	89 e2       	ldi	r24, 0x29	; 41
    173e:	c8 9f       	mul	r28, r24
    1740:	81 2d       	mov	r24, r1
    1742:	11 24       	eor	r1, r1
    1744:	82 95       	swap	r24
    1746:	8f 70       	andi	r24, 0x0F	; 15
    1748:	9c 2f       	mov	r25, r28
    174a:	24 e6       	ldi	r18, 0x64	; 100
    174c:	82 9f       	mul	r24, r18
    174e:	90 19       	sub	r25, r0
    1750:	11 24       	eor	r1, r1
    1752:	6d ec       	ldi	r22, 0xCD	; 205
    1754:	96 9f       	mul	r25, r22
    1756:	61 2d       	mov	r22, r1
    1758:	11 24       	eor	r1, r1
    175a:	66 95       	lsr	r22
    175c:	66 95       	lsr	r22
    175e:	66 95       	lsr	r22
    1760:	60 5d       	subi	r22, 0xD0	; 208
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
    1768:	ce cf       	rjmp	.-100    	; 0x1706 <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    176a:	60 e3       	ldi	r22, 0x30	; 48
    176c:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
    176e:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    1770:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <send_lcd>

00001774 <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    1774:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    1776:	87 fd       	sbrc	r24, 7
    1778:	03 c0       	rjmp	.+6      	; 0x1780 <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
    177a:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
    177c:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <uint2lcd>
    1780:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    1782:	6d e2       	ldi	r22, 0x2D	; 45
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
    178a:	85 ed       	ldi	r24, 0xD5	; 213
    178c:	8a 95       	dec	r24
    178e:	f1 f7       	brne	.-4      	; 0x178c <int2lcd+0x18>
    1790:	00 00       	nop
    1792:	8c 2f       	mov	r24, r28
    1794:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
    1796:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    1798:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <uint2lcd>

0000179c <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
    179c:	6e e0       	ldi	r22, 0x0E	; 14
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <send_lcd>

000017a4 <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
    17a4:	6c e0       	ldi	r22, 0x0C	; 12
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <send_lcd>

000017ac <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
    17ac:	6e e1       	ldi	r22, 0x1E	; 30
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <send_lcd>

000017b4 <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
    17b4:	68 e1       	ldi	r22, 0x18	; 24
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <send_lcd>

000017bc <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    17bc:	e2 e6       	ldi	r30, 0x62	; 98
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	88 60       	ori	r24, 0x08	; 8
    17c4:	80 83       	st	Z, r24
    17c6:	80 81       	ld	r24, Z
    17c8:	87 7f       	andi	r24, 0xF7	; 247
    17ca:	80 83       	st	Z, r24
    17cc:	08 95       	ret

000017ce <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
    17ce:	61 e0       	ldi	r22, 0x01	; 1
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
    17d6:	8f e1       	ldi	r24, 0x1F	; 31
    17d8:	9c e1       	ldi	r25, 0x1C	; 28
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <clear_display+0xc>
    17de:	00 c0       	rjmp	.+0      	; 0x17e0 <clear_display+0x12>
    17e0:	00 00       	nop
    17e2:	08 95       	ret

000017e4 <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
    17e4:	62 e0       	ldi	r22, 0x02	; 2
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
    17ec:	8f e6       	ldi	r24, 0x6F	; 111
    17ee:	97 e1       	ldi	r25, 0x17	; 23
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <cursor_home+0xc>
    17f4:	00 c0       	rjmp	.+0      	; 0x17f6 <cursor_home+0x12>
    17f6:	00 00       	nop
    17f8:	08 95       	ret

000017fa <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    17fa:	60 ec       	ldi	r22, 0xC0	; 192
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <send_lcd>

00001802 <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    1802:	60 e8       	ldi	r22, 0x80	; 128
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <send_lcd>

0000180a <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
    180a:	cf 93       	push	r28
    180c:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
    180e:	60 e2       	ldi	r22, 0x20	; 32
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
    1816:	85 ed       	ldi	r24, 0xD5	; 213
    1818:	8a 95       	dec	r24
    181a:	f1 f7       	brne	.-4      	; 0x1818 <fill_spaces+0xe>
    181c:	00 00       	nop
    181e:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    1820:	b1 f7       	brne	.-20     	; 0x180e <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
    1822:	cf 91       	pop	r28
    1824:	08 95       	ret

00001826 <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
    1826:	68 2f       	mov	r22, r24
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <send_lcd>

0000182e <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
    182e:	0f 93       	push	r16
    1830:	1f 93       	push	r17
    1832:	cf 93       	push	r28
    1834:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    1836:	40 e0       	ldi	r20, 0x00	; 0
    1838:	50 e0       	ldi	r21, 0x00	; 0
    183a:	c0 e0       	ldi	r28, 0x00	; 0
    183c:	f8 01       	movw	r30, r16
    183e:	e4 0f       	add	r30, r20
    1840:	f5 1f       	adc	r31, r21
    1842:	60 81       	ld	r22, Z
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
    184a:	85 ed       	ldi	r24, 0xD5	; 213
    184c:	8a 95       	dec	r24
    184e:	f1 f7       	brne	.-4      	; 0x184c <string2lcd+0x1e>
    1850:	00 00       	nop
    1852:	cf 5f       	subi	r28, 0xFF	; 255
    1854:	4c 2f       	mov	r20, r28
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	f8 01       	movw	r30, r16
    185a:	01 90       	ld	r0, Z+
    185c:	00 20       	and	r0, r0
    185e:	e9 f7       	brne	.-6      	; 0x185a <string2lcd+0x2c>
    1860:	9f 01       	movw	r18, r30
    1862:	20 1b       	sub	r18, r16
    1864:	31 0b       	sbc	r19, r17
    1866:	22 50       	subi	r18, 0x02	; 2
    1868:	31 09       	sbc	r19, r1
    186a:	24 17       	cp	r18, r20
    186c:	35 07       	cpc	r19, r21
    186e:	30 f7       	brcc	.-52     	; 0x183c <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	08 95       	ret

00001878 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1878:	8f ef       	ldi	r24, 0xFF	; 255
    187a:	99 ef       	ldi	r25, 0xF9	; 249
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <lcd_init+0x4>
    1880:	00 c0       	rjmp	.+0      	; 0x1882 <lcd_init+0xa>
    1882:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    1884:	88 e0       	ldi	r24, 0x08	; 8
    1886:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
    188a:	60 e3       	ldi	r22, 0x30	; 48
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
    1892:	8f e5       	ldi	r24, 0x5F	; 95
    1894:	9d e6       	ldi	r25, 0x6D	; 109
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <lcd_init+0x1e>
    189a:	00 c0       	rjmp	.+0      	; 0x189c <lcd_init+0x24>
    189c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    189e:	60 e3       	ldi	r22, 0x30	; 48
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
    18a6:	8f e5       	ldi	r24, 0x5F	; 95
    18a8:	9d e6       	ldi	r25, 0x6D	; 109
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <lcd_init+0x32>
    18ae:	00 c0       	rjmp	.+0      	; 0x18b0 <lcd_init+0x38>
    18b0:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    18b2:	60 e3       	ldi	r22, 0x30	; 48
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
    18ba:	8f e5       	ldi	r24, 0x5F	; 95
    18bc:	9d e6       	ldi	r25, 0x6D	; 109
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <lcd_init+0x46>
    18c2:	00 c0       	rjmp	.+0      	; 0x18c4 <lcd_init+0x4c>
    18c4:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
    18c6:	68 e3       	ldi	r22, 0x38	; 56
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
    18ce:	8f e1       	ldi	r24, 0x1F	; 31
    18d0:	9e e4       	ldi	r25, 0x4E	; 78
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <lcd_init+0x5a>
    18d6:	00 c0       	rjmp	.+0      	; 0x18d8 <lcd_init+0x60>
    18d8:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
    18da:	68 e0       	ldi	r22, 0x08	; 8
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
    18e2:	8f e1       	ldi	r24, 0x1F	; 31
    18e4:	9e e4       	ldi	r25, 0x4E	; 78
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	f1 f7       	brne	.-4      	; 0x18e6 <lcd_init+0x6e>
    18ea:	00 c0       	rjmp	.+0      	; 0x18ec <lcd_init+0x74>
    18ec:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
    18ee:	61 e0       	ldi	r22, 0x01	; 1
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
    18f6:	8f e1       	ldi	r24, 0x1F	; 31
    18f8:	9e e4       	ldi	r25, 0x4E	; 78
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <lcd_init+0x82>
    18fe:	00 c0       	rjmp	.+0      	; 0x1900 <lcd_init+0x88>
    1900:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
    1902:	66 e0       	ldi	r22, 0x06	; 6
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
    190a:	8f e1       	ldi	r24, 0x1F	; 31
    190c:	9e e4       	ldi	r25, 0x4E	; 78
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <lcd_init+0x96>
    1912:	00 c0       	rjmp	.+0      	; 0x1914 <lcd_init+0x9c>
    1914:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
    1916:	6c e0       	ldi	r22, 0x0C	; 12
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
    191e:	8f e1       	ldi	r24, 0x1F	; 31
    1920:	9e e4       	ldi	r25, 0x4E	; 78
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <lcd_init+0xaa>
    1926:	00 c0       	rjmp	.+0      	; 0x1928 <lcd_init+0xb0>
    1928:	00 00       	nop
    192a:	08 95       	ret

0000192c <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    192c:	8f 92       	push	r8
    192e:	9f 92       	push	r9
    1930:	af 92       	push	r10
    1932:	bf 92       	push	r11
    1934:	cf 92       	push	r12
    1936:	df 92       	push	r13
    1938:	ef 92       	push	r14
    193a:	ff 92       	push	r15
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	69 97       	sbiw	r28, 0x19	; 25
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	f4 2e       	mov	r15, r20
    1956:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
    1958:	00 23       	and	r16, r16
    195a:	59 f0       	breq	.+22     	; 0x1972 <lcd_int32+0x46>
        bSigned = (qr.quot<0);
    195c:	4b 01       	movw	r8, r22
    195e:	5c 01       	movw	r10, r24
    1960:	88 24       	eor	r8, r8
    1962:	b7 fc       	sbrc	r11, 7
    1964:	83 94       	inc	r8
    1966:	99 24       	eor	r9, r9
    1968:	aa 24       	eor	r10, r10
    196a:	bb 24       	eor	r11, r11
    196c:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
    196e:	97 fd       	sbrc	r25, 7
    1970:	8f c0       	rjmp	.+286    	; 0x1a90 <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    1972:	11 23       	and	r17, r17
    1974:	09 f4       	brne	.+2      	; 0x1978 <lcd_int32+0x4c>
    1976:	84 c0       	rjmp	.+264    	; 0x1a80 <lcd_int32+0x154>
    1978:	9e 01       	movw	r18, r28
    197a:	2f 5f       	subi	r18, 0xFF	; 255
    197c:	3f 4f       	sbci	r19, 0xFF	; 255
    197e:	69 01       	movw	r12, r18
    1980:	59 01       	movw	r10, r18
    1982:	88 24       	eor	r8, r8
    1984:	8a 94       	dec	r8
    1986:	81 0e       	add	r8, r17
    1988:	91 2c       	mov	r9, r1
    198a:	3f ef       	ldi	r19, 0xFF	; 255
    198c:	83 1a       	sub	r8, r19
    198e:	93 0a       	sbc	r9, r19
    1990:	8c 0c       	add	r8, r12
    1992:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    1994:	2a e0       	ldi	r18, 0x0A	; 10
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e0       	ldi	r20, 0x00	; 0
    199a:	50 e0       	ldi	r21, 0x00	; 0
    199c:	0e 94 0e 10 	call	0x201c	; 0x201c <__divmodsi4>
    19a0:	e6 2f       	mov	r30, r22
    19a2:	2a 8b       	std	Y+18, r18	; 0x12
    19a4:	3b 8b       	std	Y+19, r19	; 0x13
    19a6:	4c 8b       	std	Y+20, r20	; 0x14
    19a8:	5d 8b       	std	Y+21, r21	; 0x15
    19aa:	6a 89       	ldd	r22, Y+18	; 0x12
    19ac:	7b 89       	ldd	r23, Y+19	; 0x13
    19ae:	8c 89       	ldd	r24, Y+20	; 0x14
    19b0:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    19b2:	20 e3       	ldi	r18, 0x30	; 48
    19b4:	2e 0f       	add	r18, r30
    19b6:	f5 01       	movw	r30, r10
    19b8:	21 93       	st	Z+, r18
    19ba:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    19bc:	e8 15       	cp	r30, r8
    19be:	f9 05       	cpc	r31, r9
    19c0:	49 f7       	brne	.-46     	; 0x1994 <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    19c2:	bb 24       	eor	r11, r11
    19c4:	b3 94       	inc	r11
    19c6:	b1 0e       	add	r11, r17
    19c8:	f6 01       	movw	r30, r12
    19ca:	e1 0f       	add	r30, r17
    19cc:	f1 1d       	adc	r31, r1
    19ce:	2e e2       	ldi	r18, 0x2E	; 46
    19d0:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    19d2:	2a e0       	ldi	r18, 0x0A	; 10
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e0       	ldi	r20, 0x00	; 0
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	0e 94 0e 10 	call	0x201c	; 0x201c <__divmodsi4>
    19de:	e6 2f       	mov	r30, r22
    19e0:	2a 8b       	std	Y+18, r18	; 0x12
    19e2:	3b 8b       	std	Y+19, r19	; 0x13
    19e4:	4c 8b       	std	Y+20, r20	; 0x14
    19e6:	5d 8b       	std	Y+21, r21	; 0x15
    19e8:	6e 8b       	std	Y+22, r22	; 0x16
    19ea:	7f 8b       	std	Y+23, r23	; 0x17
    19ec:	88 8f       	std	Y+24, r24	; 0x18
    19ee:	99 8f       	std	Y+25, r25	; 0x19
    19f0:	6a 89       	ldd	r22, Y+18	; 0x12
    19f2:	7b 89       	ldd	r23, Y+19	; 0x13
    19f4:	8c 89       	ldd	r24, Y+20	; 0x14
    19f6:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    19f8:	11 e0       	ldi	r17, 0x01	; 1
    19fa:	1b 0d       	add	r17, r11
    19fc:	d6 01       	movw	r26, r12
    19fe:	ab 0d       	add	r26, r11
    1a00:	b1 1d       	adc	r27, r1
    1a02:	e0 5d       	subi	r30, 0xD0	; 208
    1a04:	ec 93       	st	X, r30
    1a06:	b1 2e       	mov	r11, r17
        }while(qr.quot);
    1a08:	61 15       	cp	r22, r1
    1a0a:	71 05       	cpc	r23, r1
    1a0c:	81 05       	cpc	r24, r1
    1a0e:	91 05       	cpc	r25, r1
    1a10:	01 f7       	brne	.-64     	; 0x19d2 <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
    1a12:	ff 20       	and	r15, r15
    1a14:	61 f0       	breq	.+24     	; 0x1a2e <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1a16:	e1 10       	cpse	r14, r1
    1a18:	39 c0       	rjmp	.+114    	; 0x1a8c <lcd_int32+0x160>
    1a1a:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    1a1c:	1f 15       	cp	r17, r15
    1a1e:	38 f4       	brcc	.+14     	; 0x1a2e <lcd_int32+0x102>
    1a20:	f6 01       	movw	r30, r12
    1a22:	e1 0f       	add	r30, r17
    1a24:	f1 1d       	adc	r31, r1
    1a26:	80 83       	st	Z, r24
    1a28:	1f 5f       	subi	r17, 0xFF	; 255
    1a2a:	1f 11       	cpse	r17, r15
    1a2c:	f9 cf       	rjmp	.-14     	; 0x1a20 <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    1a2e:	00 23       	and	r16, r16
    1a30:	31 f0       	breq	.+12     	; 0x1a3e <lcd_int32+0x112>
    1a32:	f6 01       	movw	r30, r12
    1a34:	e1 0f       	add	r30, r17
    1a36:	f1 1d       	adc	r31, r1
    1a38:	8d e2       	ldi	r24, 0x2D	; 45
    1a3a:	80 83       	st	Z, r24
    1a3c:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1a3e:	11 50       	subi	r17, 0x01	; 1
    1a40:	f6 01       	movw	r30, r12
    1a42:	e1 0f       	add	r30, r17
    1a44:	f1 1d       	adc	r31, r1
    1a46:	60 81       	ld	r22, Z
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a4e:	35 ed       	ldi	r19, 0xD5	; 213
    1a50:	3a 95       	dec	r19
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <lcd_int32+0x124>
    1a54:	00 00       	nop
    1a56:	11 11       	cpse	r17, r1
    1a58:	f2 cf       	rjmp	.-28     	; 0x1a3e <lcd_int32+0x112>

}
    1a5a:	69 96       	adiw	r28, 0x19	; 25
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	1f 91       	pop	r17
    1a6c:	0f 91       	pop	r16
    1a6e:	ff 90       	pop	r15
    1a70:	ef 90       	pop	r14
    1a72:	df 90       	pop	r13
    1a74:	cf 90       	pop	r12
    1a76:	bf 90       	pop	r11
    1a78:	af 90       	pop	r10
    1a7a:	9f 90       	pop	r9
    1a7c:	8f 90       	pop	r8
    1a7e:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    1a80:	b1 2c       	mov	r11, r1
    1a82:	9e 01       	movw	r18, r28
    1a84:	2f 5f       	subi	r18, 0xFF	; 255
    1a86:	3f 4f       	sbci	r19, 0xFF	; 255
    1a88:	69 01       	movw	r12, r18
    1a8a:	a3 cf       	rjmp	.-186    	; 0x19d2 <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1a8c:	80 e3       	ldi	r24, 0x30	; 48
    1a8e:	c6 cf       	rjmp	.-116    	; 0x1a1c <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    1a90:	90 95       	com	r25
    1a92:	80 95       	com	r24
    1a94:	70 95       	com	r23
    1a96:	61 95       	neg	r22
    1a98:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9e:	69 cf       	rjmp	.-302    	; 0x1972 <lcd_int32+0x46>

00001aa0 <lcd_int16>:
    1aa0:	5f 92       	push	r5
    1aa2:	6f 92       	push	r6
    1aa4:	7f 92       	push	r7
    1aa6:	8f 92       	push	r8
    1aa8:	9f 92       	push	r9
    1aaa:	af 92       	push	r10
    1aac:	bf 92       	push	r11
    1aae:	cf 92       	push	r12
    1ab0:	df 92       	push	r13
    1ab2:	ef 92       	push	r14
    1ab4:	ff 92       	push	r15
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	61 97       	sbiw	r28, 0x11	; 17
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61
    1ace:	a6 2e       	mov	r10, r22
    1ad0:	54 2e       	mov	r5, r20
    1ad2:	62 2e       	mov	r6, r18
    1ad4:	79 2e       	mov	r7, r25
    1ad6:	77 1c       	adc	r7, r7
    1ad8:	77 24       	eor	r7, r7
    1ada:	77 1c       	adc	r7, r7
    1adc:	b7 2c       	mov	r11, r7
    1ade:	c7 2c       	mov	r12, r7
    1ae0:	d1 2c       	mov	r13, r1
    1ae2:	ee 27       	eor	r30, r30
    1ae4:	ff 27       	eor	r31, r31
    1ae6:	ec 19       	sub	r30, r12
    1ae8:	fd 09       	sbc	r31, r13
    1aea:	8e 27       	eor	r24, r30
    1aec:	9f 27       	eor	r25, r31
    1aee:	fc 01       	movw	r30, r24
    1af0:	ec 0d       	add	r30, r12
    1af2:	fd 1d       	adc	r31, r13
    1af4:	44 23       	and	r20, r20
    1af6:	09 f4       	brne	.+2      	; 0x1afa <lcd_int16+0x5a>
    1af8:	8e c0       	rjmp	.+284    	; 0x1c16 <lcd_int16+0x176>
    1afa:	ce 01       	movw	r24, r28
    1afc:	01 96       	adiw	r24, 0x01	; 1
    1afe:	7c 01       	movw	r14, r24
    1b00:	8c 01       	movw	r16, r24
    1b02:	88 24       	eor	r8, r8
    1b04:	8a 94       	dec	r8
    1b06:	84 0e       	add	r8, r20
    1b08:	91 2c       	mov	r9, r1
    1b0a:	9f ef       	ldi	r25, 0xFF	; 255
    1b0c:	89 1a       	sub	r8, r25
    1b0e:	99 0a       	sbc	r9, r25
    1b10:	8e 0c       	add	r8, r14
    1b12:	9f 1c       	adc	r9, r15
    1b14:	6a e0       	ldi	r22, 0x0A	; 10
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	cf 01       	movw	r24, r30
    1b1a:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divmodhi4>
    1b1e:	26 2f       	mov	r18, r22
    1b20:	e2 2f       	mov	r30, r18
    1b22:	f7 2f       	mov	r31, r23
    1b24:	80 5d       	subi	r24, 0xD0	; 208
    1b26:	d8 01       	movw	r26, r16
    1b28:	8d 93       	st	X+, r24
    1b2a:	8d 01       	movw	r16, r26
    1b2c:	a8 15       	cp	r26, r8
    1b2e:	b9 05       	cpc	r27, r9
    1b30:	89 f7       	brne	.-30     	; 0x1b14 <lcd_int16+0x74>
    1b32:	01 e0       	ldi	r16, 0x01	; 1
    1b34:	05 0d       	add	r16, r5
    1b36:	d7 01       	movw	r26, r14
    1b38:	a5 0d       	add	r26, r5
    1b3a:	b1 1d       	adc	r27, r1
    1b3c:	8e e2       	ldi	r24, 0x2E	; 46
    1b3e:	8c 93       	st	X, r24
    1b40:	6a e0       	ldi	r22, 0x0A	; 10
    1b42:	70 e0       	ldi	r23, 0x00	; 0
    1b44:	cf 01       	movw	r24, r30
    1b46:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divmodhi4>
    1b4a:	26 2f       	mov	r18, r22
    1b4c:	e2 2f       	mov	r30, r18
    1b4e:	f7 2f       	mov	r31, r23
    1b50:	11 e0       	ldi	r17, 0x01	; 1
    1b52:	10 0f       	add	r17, r16
    1b54:	d7 01       	movw	r26, r14
    1b56:	a0 0f       	add	r26, r16
    1b58:	b1 1d       	adc	r27, r1
    1b5a:	80 5d       	subi	r24, 0xD0	; 208
    1b5c:	8c 93       	st	X, r24
    1b5e:	01 2f       	mov	r16, r17
    1b60:	30 97       	sbiw	r30, 0x00	; 0
    1b62:	71 f7       	brne	.-36     	; 0x1b40 <lcd_int16+0xa0>
    1b64:	61 10       	cpse	r6, r1
    1b66:	15 c0       	rjmp	.+42     	; 0x1b92 <lcd_int16+0xf2>
    1b68:	77 20       	and	r7, r7
    1b6a:	39 f0       	breq	.+14     	; 0x1b7a <lcd_int16+0xda>
    1b6c:	11 e0       	ldi	r17, 0x01	; 1
    1b6e:	10 0f       	add	r17, r16
    1b70:	f7 01       	movw	r30, r14
    1b72:	e0 0f       	add	r30, r16
    1b74:	f1 1d       	adc	r31, r1
    1b76:	8d e2       	ldi	r24, 0x2D	; 45
    1b78:	80 83       	st	Z, r24
    1b7a:	aa 20       	and	r10, r10
    1b7c:	41 f1       	breq	.+80     	; 0x1bce <lcd_int16+0x12e>
    1b7e:	81 2f       	mov	r24, r17
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	2a 2d       	mov	r18, r10
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	82 17       	cp	r24, r18
    1b88:	93 07       	cpc	r25, r19
    1b8a:	0c f5       	brge	.+66     	; 0x1bce <lcd_int16+0x12e>
    1b8c:	b1 2c       	mov	r11, r1
    1b8e:	40 e2       	ldi	r20, 0x20	; 32
    1b90:	0c c0       	rjmp	.+24     	; 0x1baa <lcd_int16+0x10a>
    1b92:	aa 20       	and	r10, r10
    1b94:	a1 f0       	breq	.+40     	; 0x1bbe <lcd_int16+0x11e>
    1b96:	81 2f       	mov	r24, r17
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	2a 2d       	mov	r18, r10
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	2c 19       	sub	r18, r12
    1ba0:	3d 09       	sbc	r19, r13
    1ba2:	82 17       	cp	r24, r18
    1ba4:	93 07       	cpc	r25, r19
    1ba6:	5c f4       	brge	.+22     	; 0x1bbe <lcd_int16+0x11e>
    1ba8:	40 e3       	ldi	r20, 0x30	; 48
    1baa:	1f 5f       	subi	r17, 0xFF	; 255
    1bac:	f7 01       	movw	r30, r14
    1bae:	e8 0f       	add	r30, r24
    1bb0:	f9 1f       	adc	r31, r25
    1bb2:	40 83       	st	Z, r20
    1bb4:	81 2f       	mov	r24, r17
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	82 17       	cp	r24, r18
    1bba:	93 07       	cpc	r25, r19
    1bbc:	b4 f3       	brlt	.-20     	; 0x1baa <lcd_int16+0x10a>
    1bbe:	bb 20       	and	r11, r11
    1bc0:	31 f0       	breq	.+12     	; 0x1bce <lcd_int16+0x12e>
    1bc2:	f7 01       	movw	r30, r14
    1bc4:	e1 0f       	add	r30, r17
    1bc6:	f1 1d       	adc	r31, r1
    1bc8:	8d e2       	ldi	r24, 0x2D	; 45
    1bca:	80 83       	st	Z, r24
    1bcc:	1f 5f       	subi	r17, 0xFF	; 255
    1bce:	11 50       	subi	r17, 0x01	; 1
    1bd0:	f7 01       	movw	r30, r14
    1bd2:	e1 0f       	add	r30, r17
    1bd4:	f1 1d       	adc	r31, r1
    1bd6:	60 81       	ld	r22, Z
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	0e 94 02 0b 	call	0x1604	; 0x1604 <send_lcd>
    1bde:	95 ed       	ldi	r25, 0xD5	; 213
    1be0:	9a 95       	dec	r25
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <lcd_int16+0x140>
    1be4:	00 00       	nop
    1be6:	11 11       	cpse	r17, r1
    1be8:	f2 cf       	rjmp	.-28     	; 0x1bce <lcd_int16+0x12e>
    1bea:	61 96       	adiw	r28, 0x11	; 17
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	df 90       	pop	r13
    1c04:	cf 90       	pop	r12
    1c06:	bf 90       	pop	r11
    1c08:	af 90       	pop	r10
    1c0a:	9f 90       	pop	r9
    1c0c:	8f 90       	pop	r8
    1c0e:	7f 90       	pop	r7
    1c10:	6f 90       	pop	r6
    1c12:	5f 90       	pop	r5
    1c14:	08 95       	ret
    1c16:	00 e0       	ldi	r16, 0x00	; 0
    1c18:	ce 01       	movw	r24, r28
    1c1a:	01 96       	adiw	r24, 0x01	; 1
    1c1c:	7c 01       	movw	r14, r24
    1c1e:	90 cf       	rjmp	.-224    	; 0x1b40 <lcd_int16+0xa0>

00001c20 <main>:
    1c20:	80 91 61 00 	lds	r24, 0x0061
    1c24:	88 60       	ori	r24, 0x08	; 8
    1c26:	80 93 61 00 	sts	0x0061, r24
    1c2a:	81 e8       	ldi	r24, 0x81	; 129
    1c2c:	81 bb       	out	0x11, r24	; 17
    1c2e:	8f ef       	ldi	r24, 0xFF	; 255
    1c30:	82 b9       	out	0x02, r24	; 2
    1c32:	80 91 8b 00 	lds	r24, 0x008B
    1c36:	82 6c       	ori	r24, 0xC2	; 194
    1c38:	80 93 8b 00 	sts	0x008B, r24
    1c3c:	80 91 8a 00 	lds	r24, 0x008A
    1c40:	89 61       	ori	r24, 0x19	; 25
    1c42:	80 93 8a 00 	sts	0x008A, r24
    1c46:	10 92 8c 00 	sts	0x008C, r1
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e9       	ldi	r25, 0x90	; 144
    1c4e:	90 93 87 00 	sts	0x0087, r25
    1c52:	80 93 86 00 	sts	0x0086, r24
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 ef       	ldi	r25, 0xF0	; 240
    1c5a:	90 93 81 00 	sts	0x0081, r25
    1c5e:	80 93 80 00 	sts	0x0080, r24
    1c62:	0e 94 cc 0a 	call	0x1598	; 0x1598 <uart_init>
    1c66:	0e 94 dd 01 	call	0x3ba	; 0x3ba <spi_init>
    1c6a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <lcd_init>
    1c6e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <init_twi>
    1c72:	0e 94 49 06 	call	0xc92	; 0xc92 <tcnt0_init>
    1c76:	1f bc       	out	0x2f, r1	; 47
    1c78:	8a e0       	ldi	r24, 0x0A	; 10
    1c7a:	8e bd       	out	0x2e, r24	; 46
    1c7c:	10 92 7a 00 	sts	0x007A, r1
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	92 e0       	ldi	r25, 0x02	; 2
    1c84:	9b bd       	out	0x2b, r25	; 43
    1c86:	8a bd       	out	0x2a, r24	; 42
    1c88:	87 b7       	in	r24, 0x37	; 55
    1c8a:	80 61       	ori	r24, 0x10	; 16
    1c8c:	87 bf       	out	0x37, r24	; 55
    1c8e:	78 94       	sei
    1c90:	12 9a       	sbi	0x02, 2	; 2
    1c92:	1a 9a       	sbi	0x03, 2	; 3
    1c94:	1f 98       	cbi	0x03, 7	; 3
    1c96:	17 9a       	sbi	0x02, 7	; 2
    1c98:	1a 9a       	sbi	0x03, 2	; 3
    1c9a:	8f e1       	ldi	r24, 0x1F	; 31
    1c9c:	93 e0       	ldi	r25, 0x03	; 3
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <main+0x7e>
    1ca2:	00 c0       	rjmp	.+0      	; 0x1ca4 <main+0x84>
    1ca4:	00 00       	nop
    1ca6:	1a 98       	cbi	0x03, 2	; 3
    1ca8:	90 ea       	ldi	r25, 0xA0	; 160
    1caa:	9a 95       	dec	r25
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <main+0x8a>
    1cae:	17 98       	cbi	0x02, 7	; 2
    1cb0:	0e 94 1a 09 	call	0x1234	; 0x1234 <fm_pwr_up>
    1cb4:	86 eb       	ldi	r24, 0xB6	; 182
    1cb6:	96 e2       	ldi	r25, 0x26	; 38
    1cb8:	90 93 18 01 	sts	0x0118, r25
    1cbc:	80 93 17 01 	sts	0x0117, r24
    1cc0:	80 91 61 00 	lds	r24, 0x0061
    1cc4:	8f 77       	andi	r24, 0x7F	; 127
    1cc6:	80 93 61 00 	sts	0x0061, r24
    1cca:	80 91 62 00 	lds	r24, 0x0062
    1cce:	8f 77       	andi	r24, 0x7F	; 127
    1cd0:	80 93 62 00 	sts	0x0062, r24
    1cd4:	87 b1       	in	r24, 0x07	; 7
    1cd6:	87 64       	ori	r24, 0x47	; 71
    1cd8:	87 b9       	out	0x07, r24	; 7
    1cda:	86 b1       	in	r24, 0x06	; 6
    1cdc:	87 68       	ori	r24, 0x87	; 135
    1cde:	86 b9       	out	0x06, r24	; 6
    1ce0:	10 92 63 03 	sts	0x0363, r1
    1ce4:	41 e0       	ldi	r20, 0x01	; 1
    1ce6:	63 e6       	ldi	r22, 0x63	; 99
    1ce8:	73 e0       	ldi	r23, 0x03	; 3
    1cea:	80 e9       	ldi	r24, 0x90	; 144
    1cec:	0e 94 bf 07 	call	0xf7e	; 0xf7e <twi_start_wr>
    1cf0:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <clear_display>
    1cf4:	c1 e8       	ldi	r28, 0x81	; 129
    1cf6:	d0 e0       	ldi	r29, 0x00	; 0
    1cf8:	6b e2       	ldi	r22, 0x2B	; 43
    1cfa:	c6 2e       	mov	r12, r22
    1cfc:	76 e5       	ldi	r23, 0x56	; 86
    1cfe:	d7 2e       	mov	r13, r23
    1d00:	e1 e8       	ldi	r30, 0x81	; 129
    1d02:	ee 2e       	mov	r14, r30
    1d04:	fc ea       	ldi	r31, 0xAC	; 172
    1d06:	ff 2e       	mov	r15, r31
    1d08:	07 ed       	ldi	r16, 0xD7	; 215
    1d0a:	1f ef       	ldi	r17, 0xFF	; 255
    1d0c:	80 91 22 02 	lds	r24, 0x0222
    1d10:	85 30       	cpi	r24, 0x05	; 5
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <main+0xf6>
    1d14:	e3 c0       	rjmp	.+454    	; 0x1edc <main+0x2bc>
    1d16:	42 e0       	ldi	r20, 0x02	; 2
    1d18:	65 e6       	ldi	r22, 0x65	; 101
    1d1a:	73 e0       	ldi	r23, 0x03	; 3
    1d1c:	80 e9       	ldi	r24, 0x90	; 144
    1d1e:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <twi_start_rd>
    1d22:	80 91 65 03 	lds	r24, 0x0365
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	98 2f       	mov	r25, r24
    1d2a:	88 27       	eor	r24, r24
    1d2c:	20 91 66 03 	lds	r18, 0x0366
    1d30:	82 2b       	or	r24, r18
    1d32:	4a e0       	ldi	r20, 0x0A	; 10
    1d34:	63 e3       	ldi	r22, 0x33	; 51
    1d36:	73 e0       	ldi	r23, 0x03	; 3
    1d38:	88 0f       	add	r24, r24
    1d3a:	89 2f       	mov	r24, r25
    1d3c:	88 1f       	adc	r24, r24
    1d3e:	99 0b       	sbc	r25, r25
    1d40:	91 95       	neg	r25
    1d42:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__itoa_ncheck>
    1d46:	36 9a       	sbi	0x06, 6	; 6
    1d48:	34 9b       	sbis	0x06, 4	; 6
    1d4a:	fe cf       	rjmp	.-4      	; 0x1d48 <main+0x128>
    1d4c:	34 9a       	sbi	0x06, 4	; 6
    1d4e:	84 b1       	in	r24, 0x04	; 4
    1d50:	95 b1       	in	r25, 0x05	; 5
    1d52:	90 93 75 02 	sts	0x0275, r25
    1d56:	80 93 74 02 	sts	0x0274, r24
    1d5a:	9c 01       	movw	r18, r24
    1d5c:	25 5d       	subi	r18, 0xD5	; 213
    1d5e:	33 40       	sbci	r19, 0x03	; 3
    1d60:	2a 32       	cpi	r18, 0x2A	; 42
    1d62:	31 05       	cpc	r19, r1
    1d64:	40 f4       	brcc	.+16     	; 0x1d76 <main+0x156>
    1d66:	85 b5       	in	r24, 0x25	; 37
    1d68:	81 66       	ori	r24, 0x61	; 97
    1d6a:	85 bd       	out	0x25, r24	; 37
    1d6c:	13 bc       	out	0x23, r1	; 35
    1d6e:	80 91 74 02 	lds	r24, 0x0274
    1d72:	90 91 75 02 	lds	r25, 0x0275
    1d76:	9c 01       	movw	r18, r24
    1d78:	2a 5a       	subi	r18, 0xAA	; 170
    1d7a:	33 40       	sbci	r19, 0x03	; 3
    1d7c:	2a 32       	cpi	r18, 0x2A	; 42
    1d7e:	31 05       	cpc	r19, r1
    1d80:	40 f4       	brcc	.+16     	; 0x1d92 <main+0x172>
    1d82:	85 b5       	in	r24, 0x25	; 37
    1d84:	81 66       	ori	r24, 0x61	; 97
    1d86:	85 bd       	out	0x25, r24	; 37
    1d88:	c3 bc       	out	0x23, r12	; 35
    1d8a:	80 91 74 02 	lds	r24, 0x0274
    1d8e:	90 91 75 02 	lds	r25, 0x0275
    1d92:	9c 01       	movw	r18, r24
    1d94:	2a 57       	subi	r18, 0x7A	; 122
    1d96:	33 40       	sbci	r19, 0x03	; 3
    1d98:	2f 32       	cpi	r18, 0x2F	; 47
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	40 f4       	brcc	.+16     	; 0x1dae <main+0x18e>
    1d9e:	85 b5       	in	r24, 0x25	; 37
    1da0:	81 66       	ori	r24, 0x61	; 97
    1da2:	85 bd       	out	0x25, r24	; 37
    1da4:	d3 bc       	out	0x23, r13	; 35
    1da6:	80 91 74 02 	lds	r24, 0x0274
    1daa:	90 91 75 02 	lds	r25, 0x0275
    1dae:	9c 01       	movw	r18, r24
    1db0:	24 55       	subi	r18, 0x54	; 84
    1db2:	33 40       	sbci	r19, 0x03	; 3
    1db4:	25 32       	cpi	r18, 0x25	; 37
    1db6:	31 05       	cpc	r19, r1
    1db8:	40 f4       	brcc	.+16     	; 0x1dca <main+0x1aa>
    1dba:	85 b5       	in	r24, 0x25	; 37
    1dbc:	81 66       	ori	r24, 0x61	; 97
    1dbe:	85 bd       	out	0x25, r24	; 37
    1dc0:	e3 bc       	out	0x23, r14	; 35
    1dc2:	80 91 74 02 	lds	r24, 0x0274
    1dc6:	90 91 75 02 	lds	r25, 0x0275
    1dca:	9c 01       	movw	r18, r24
    1dcc:	29 52       	subi	r18, 0x29	; 41
    1dce:	33 40       	sbci	r19, 0x03	; 3
    1dd0:	2a 32       	cpi	r18, 0x2A	; 42
    1dd2:	31 05       	cpc	r19, r1
    1dd4:	40 f4       	brcc	.+16     	; 0x1de6 <main+0x1c6>
    1dd6:	85 b5       	in	r24, 0x25	; 37
    1dd8:	81 66       	ori	r24, 0x61	; 97
    1dda:	85 bd       	out	0x25, r24	; 37
    1ddc:	f3 bc       	out	0x23, r15	; 35
    1dde:	80 91 74 02 	lds	r24, 0x0274
    1de2:	90 91 75 02 	lds	r25, 0x0275
    1de6:	8e 5f       	subi	r24, 0xFE	; 254
    1de8:	92 40       	sbci	r25, 0x02	; 2
    1dea:	8a 97       	sbiw	r24, 0x2a	; 42
    1dec:	20 f4       	brcc	.+8      	; 0x1df6 <main+0x1d6>
    1dee:	85 b5       	in	r24, 0x25	; 37
    1df0:	81 66       	ori	r24, 0x61	; 97
    1df2:	85 bd       	out	0x25, r24	; 37
    1df4:	03 bd       	out	0x23, r16	; 35
    1df6:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <button_process>
    1dfa:	0e 94 5f 02 	call	0x4be	; 0x4be <encoder>
    1dfe:	0e 94 b8 00 	call	0x170	; 0x170 <adjust_time>
    1e02:	80 91 22 02 	lds	r24, 0x0222
    1e06:	83 70       	andi	r24, 0x03	; 3
    1e08:	81 30       	cpi	r24, 0x01	; 1
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <main+0x1ee>
    1e0c:	d7 c0       	rjmp	.+430    	; 0x1fbc <main+0x39c>
    1e0e:	c0 9a       	sbi	0x18, 0	; 24
    1e10:	c0 98       	cbi	0x18, 0	; 24
    1e12:	1a ba       	out	0x1a, r1	; 26
    1e14:	1b bb       	out	0x1b, r17	; 27
    1e16:	00 00       	nop
    1e18:	00 00       	nop
    1e1a:	80 91 22 02 	lds	r24, 0x0222
    1e1e:	98 2f       	mov	r25, r24
    1e20:	97 70       	andi	r25, 0x07	; 7
    1e22:	b9 f4       	brne	.+46     	; 0x1e52 <main+0x232>
    1e24:	90 91 24 02 	lds	r25, 0x0224
    1e28:	9a 30       	cpi	r25, 0x0A	; 10
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <main+0x20e>
    1e2c:	a8 c0       	rjmp	.+336    	; 0x1f7e <main+0x35e>
    1e2e:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <clear_display>
    1e32:	83 e3       	ldi	r24, 0x33	; 51
    1e34:	93 e0       	ldi	r25, 0x03	; 3
    1e36:	0e 94 17 0c 	call	0x182e	; 0x182e <string2lcd>
    1e3a:	80 91 15 01 	lds	r24, 0x0115
    1e3e:	90 91 16 01 	lds	r25, 0x0116
    1e42:	0e 94 ee 01 	call	0x3dc	; 0x3dc <segsum>
    1e46:	10 92 24 02 	sts	0x0224, r1
    1e4a:	80 91 22 02 	lds	r24, 0x0222
    1e4e:	98 2f       	mov	r25, r24
    1e50:	97 70       	andi	r25, 0x07	; 7
    1e52:	93 30       	cpi	r25, 0x03	; 3
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <main+0x238>
    1e56:	b9 c0       	rjmp	.+370    	; 0x1fca <main+0x3aa>
    1e58:	40 91 13 01 	lds	r20, 0x0113
    1e5c:	50 91 14 01 	lds	r21, 0x0114
    1e60:	20 91 15 01 	lds	r18, 0x0115
    1e64:	30 91 16 01 	lds	r19, 0x0116
    1e68:	42 17       	cp	r20, r18
    1e6a:	53 07       	cpc	r21, r19
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <main+0x250>
    1e6e:	93 c0       	rjmp	.+294    	; 0x1f96 <main+0x376>
    1e70:	90 91 24 02 	lds	r25, 0x0224
    1e74:	9a 30       	cpi	r25, 0x0A	; 10
    1e76:	28 f0       	brcs	.+10     	; 0x1e82 <main+0x262>
    1e78:	98 2f       	mov	r25, r24
    1e7a:	97 70       	andi	r25, 0x07	; 7
    1e7c:	93 30       	cpi	r25, 0x03	; 3
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <main+0x262>
    1e80:	b0 c0       	rjmp	.+352    	; 0x1fe2 <main+0x3c2>
    1e82:	83 fd       	sbrc	r24, 3
    1e84:	3c c0       	rjmp	.+120    	; 0x1efe <main+0x2de>
    1e86:	87 70       	andi	r24, 0x07	; 7
    1e88:	86 30       	cpi	r24, 0x06	; 6
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <main+0x26e>
    1e8c:	5b c0       	rjmp	.+182    	; 0x1f44 <main+0x324>
    1e8e:	87 30       	cpi	r24, 0x07	; 7
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <main+0x274>
    1e92:	6e c0       	rjmp	.+220    	; 0x1f70 <main+0x350>
    1e94:	1a bb       	out	0x1a, r17	; 26
    1e96:	00 00       	nop
    1e98:	00 00       	nop
    1e9a:	10 92 23 02 	sts	0x0223, r1
    1e9e:	e0 e0       	ldi	r30, 0x00	; 0
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	e2 5f       	subi	r30, 0xF2	; 242
    1ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea6:	80 81       	ld	r24, Z
    1ea8:	88 bb       	out	0x18, r24	; 24
    1eaa:	e0 91 23 02 	lds	r30, 0x0223
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	e8 55       	subi	r30, 0x58	; 88
    1eb2:	fd 4f       	sbci	r31, 0xFD	; 253
    1eb4:	80 81       	ld	r24, Z
    1eb6:	8b bb       	out	0x1b, r24	; 27
    1eb8:	8f e9       	ldi	r24, 0x9F	; 159
    1eba:	9f e0       	ldi	r25, 0x0F	; 15
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	f1 f7       	brne	.-4      	; 0x1ebc <main+0x29c>
    1ec0:	00 c0       	rjmp	.+0      	; 0x1ec2 <main+0x2a2>
    1ec2:	00 00       	nop
    1ec4:	e0 91 23 02 	lds	r30, 0x0223
    1ec8:	ef 5f       	subi	r30, 0xFF	; 255
    1eca:	e0 93 23 02 	sts	0x0223, r30
    1ece:	e5 30       	cpi	r30, 0x05	; 5
    1ed0:	38 f3       	brcs	.-50     	; 0x1ea0 <main+0x280>
    1ed2:	80 91 22 02 	lds	r24, 0x0222
    1ed6:	85 30       	cpi	r24, 0x05	; 5
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <main+0x2bc>
    1eda:	1d cf       	rjmp	.-454    	; 0x1d16 <main+0xf6>
    1edc:	60 e0       	ldi	r22, 0x00	; 0
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <set_cursor>
    1ee4:	d0 93 14 01 	sts	0x0114, r29
    1ee8:	c0 93 13 01 	sts	0x0113, r28
    1eec:	80 91 15 01 	lds	r24, 0x0115
    1ef0:	90 91 16 01 	lds	r25, 0x0116
    1ef4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <segsum>
    1ef8:	00 00       	nop
    1efa:	00 00       	nop
    1efc:	0c cf       	rjmp	.-488    	; 0x1d16 <main+0xf6>
    1efe:	20 91 17 01 	lds	r18, 0x0117
    1f02:	30 91 18 01 	lds	r19, 0x0118
    1f06:	ad ec       	ldi	r26, 0xCD	; 205
    1f08:	bc ec       	ldi	r27, 0xCC	; 204
    1f0a:	0e 94 36 10 	call	0x206c	; 0x206c <__umulhisi3>
    1f0e:	96 95       	lsr	r25
    1f10:	87 95       	ror	r24
    1f12:	96 95       	lsr	r25
    1f14:	87 95       	ror	r24
    1f16:	96 95       	lsr	r25
    1f18:	87 95       	ror	r24
    1f1a:	0e 94 8b 05 	call	0xb16	; 0xb16 <segsum3>
    1f1e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <set_freq>
    1f22:	80 91 22 02 	lds	r24, 0x0222
    1f26:	8c 30       	cpi	r24, 0x0C	; 12
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <main+0x30c>
    1f2a:	58 c0       	rjmp	.+176    	; 0x1fdc <main+0x3bc>
    1f2c:	8f e8       	ldi	r24, 0x8F	; 143
    1f2e:	91 e0       	ldi	r25, 0x01	; 1
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	f1 f7       	brne	.-4      	; 0x1f30 <main+0x310>
    1f34:	00 c0       	rjmp	.+0      	; 0x1f36 <main+0x316>
    1f36:	00 00       	nop
    1f38:	80 91 22 02 	lds	r24, 0x0222
    1f3c:	87 70       	andi	r24, 0x07	; 7
    1f3e:	86 30       	cpi	r24, 0x06	; 6
    1f40:	09 f0       	breq	.+2      	; 0x1f44 <main+0x324>
    1f42:	a5 cf       	rjmp	.-182    	; 0x1e8e <main+0x26e>
    1f44:	80 91 17 01 	lds	r24, 0x0117
    1f48:	90 91 18 01 	lds	r25, 0x0118
    1f4c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <segsum>
    1f50:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <set_freq>
    1f54:	0e 94 0a 08 	call	0x1014	; 0x1014 <fm_tune_freq>
    1f58:	8f e9       	ldi	r24, 0x9F	; 159
    1f5a:	9f e0       	ldi	r25, 0x0F	; 15
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <main+0x33c>
    1f60:	00 c0       	rjmp	.+0      	; 0x1f62 <main+0x342>
    1f62:	00 00       	nop
    1f64:	80 91 22 02 	lds	r24, 0x0222
    1f68:	87 70       	andi	r24, 0x07	; 7
    1f6a:	87 30       	cpi	r24, 0x07	; 7
    1f6c:	09 f0       	breq	.+2      	; 0x1f70 <main+0x350>
    1f6e:	92 cf       	rjmp	.-220    	; 0x1e94 <main+0x274>
    1f70:	0e 94 58 08 	call	0x10b0	; 0x10b0 <radio_pwr_dwn>
    1f74:	0e 94 1a 09 	call	0x1234	; 0x1234 <fm_pwr_up>
    1f78:	10 92 22 02 	sts	0x0222, r1
    1f7c:	8b cf       	rjmp	.-234    	; 0x1e94 <main+0x274>
    1f7e:	40 91 13 01 	lds	r20, 0x0113
    1f82:	50 91 14 01 	lds	r21, 0x0114
    1f86:	20 91 15 01 	lds	r18, 0x0115
    1f8a:	30 91 16 01 	lds	r19, 0x0116
    1f8e:	42 17       	cp	r20, r18
    1f90:	53 07       	cpc	r21, r19
    1f92:	09 f0       	breq	.+2      	; 0x1f96 <main+0x376>
    1f94:	76 cf       	rjmp	.-276    	; 0x1e82 <main+0x262>
    1f96:	98 2f       	mov	r25, r24
    1f98:	93 70       	andi	r25, 0x03	; 3
    1f9a:	09 f0       	breq	.+2      	; 0x1f9e <main+0x37e>
    1f9c:	69 cf       	rjmp	.-302    	; 0x1e70 <main+0x250>
    1f9e:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <clear_display>
    1fa2:	8b e1       	ldi	r24, 0x1B	; 27
    1fa4:	91 e0       	ldi	r25, 0x01	; 1
    1fa6:	0e 94 17 0c 	call	0x182e	; 0x182e <string2lcd>
    1faa:	80 91 15 01 	lds	r24, 0x0115
    1fae:	90 91 16 01 	lds	r25, 0x0116
    1fb2:	0e 94 59 04 	call	0x8b2	; 0x8b2 <segsum1>
    1fb6:	80 91 22 02 	lds	r24, 0x0222
    1fba:	5a cf       	rjmp	.-332    	; 0x1e70 <main+0x250>
    1fbc:	80 91 13 01 	lds	r24, 0x0113
    1fc0:	90 91 14 01 	lds	r25, 0x0114
    1fc4:	0e 94 cd 04 	call	0x99a	; 0x99a <segsum2>
    1fc8:	22 cf       	rjmp	.-444    	; 0x1e0e <main+0x1ee>
    1fca:	80 91 15 01 	lds	r24, 0x0115
    1fce:	90 91 16 01 	lds	r25, 0x0116
    1fd2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <segsum>
    1fd6:	80 91 22 02 	lds	r24, 0x0222
    1fda:	3e cf       	rjmp	.-388    	; 0x1e58 <main+0x238>
    1fdc:	10 92 22 02 	sts	0x0222, r1
    1fe0:	a5 cf       	rjmp	.-182    	; 0x1f2c <main+0x30c>
    1fe2:	80 91 15 01 	lds	r24, 0x0115
    1fe6:	90 91 16 01 	lds	r25, 0x0116
    1fea:	0e 94 ee 01 	call	0x3dc	; 0x3dc <segsum>
    1fee:	80 91 22 02 	lds	r24, 0x0222
    1ff2:	47 cf       	rjmp	.-370    	; 0x1e82 <main+0x262>

00001ff4 <__divmodhi4>:
    1ff4:	97 fb       	bst	r25, 7
    1ff6:	07 2e       	mov	r0, r23
    1ff8:	16 f4       	brtc	.+4      	; 0x1ffe <__divmodhi4+0xa>
    1ffa:	00 94       	com	r0
    1ffc:	07 d0       	rcall	.+14     	; 0x200c <__divmodhi4_neg1>
    1ffe:	77 fd       	sbrc	r23, 7
    2000:	09 d0       	rcall	.+18     	; 0x2014 <__divmodhi4_neg2>
    2002:	0e 94 45 10 	call	0x208a	; 0x208a <__udivmodhi4>
    2006:	07 fc       	sbrc	r0, 7
    2008:	05 d0       	rcall	.+10     	; 0x2014 <__divmodhi4_neg2>
    200a:	3e f4       	brtc	.+14     	; 0x201a <__divmodhi4_exit>

0000200c <__divmodhi4_neg1>:
    200c:	90 95       	com	r25
    200e:	81 95       	neg	r24
    2010:	9f 4f       	sbci	r25, 0xFF	; 255
    2012:	08 95       	ret

00002014 <__divmodhi4_neg2>:
    2014:	70 95       	com	r23
    2016:	61 95       	neg	r22
    2018:	7f 4f       	sbci	r23, 0xFF	; 255

0000201a <__divmodhi4_exit>:
    201a:	08 95       	ret

0000201c <__divmodsi4>:
    201c:	05 2e       	mov	r0, r21
    201e:	97 fb       	bst	r25, 7
    2020:	1e f4       	brtc	.+6      	; 0x2028 <__divmodsi4+0xc>
    2022:	00 94       	com	r0
    2024:	0e 94 25 10 	call	0x204a	; 0x204a <__negsi2>
    2028:	57 fd       	sbrc	r21, 7
    202a:	07 d0       	rcall	.+14     	; 0x203a <__divmodsi4_neg2>
    202c:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__udivmodsi4>
    2030:	07 fc       	sbrc	r0, 7
    2032:	03 d0       	rcall	.+6      	; 0x203a <__divmodsi4_neg2>
    2034:	4e f4       	brtc	.+18     	; 0x2048 <__divmodsi4_exit>
    2036:	0c 94 25 10 	jmp	0x204a	; 0x204a <__negsi2>

0000203a <__divmodsi4_neg2>:
    203a:	50 95       	com	r21
    203c:	40 95       	com	r20
    203e:	30 95       	com	r19
    2040:	21 95       	neg	r18
    2042:	3f 4f       	sbci	r19, 0xFF	; 255
    2044:	4f 4f       	sbci	r20, 0xFF	; 255
    2046:	5f 4f       	sbci	r21, 0xFF	; 255

00002048 <__divmodsi4_exit>:
    2048:	08 95       	ret

0000204a <__negsi2>:
    204a:	90 95       	com	r25
    204c:	80 95       	com	r24
    204e:	70 95       	com	r23
    2050:	61 95       	neg	r22
    2052:	7f 4f       	sbci	r23, 0xFF	; 255
    2054:	8f 4f       	sbci	r24, 0xFF	; 255
    2056:	9f 4f       	sbci	r25, 0xFF	; 255
    2058:	08 95       	ret

0000205a <__tablejump2__>:
    205a:	ee 0f       	add	r30, r30
    205c:	ff 1f       	adc	r31, r31
    205e:	00 24       	eor	r0, r0
    2060:	00 1c       	adc	r0, r0
    2062:	0b be       	out	0x3b, r0	; 59
    2064:	07 90       	elpm	r0, Z+
    2066:	f6 91       	elpm	r31, Z
    2068:	e0 2d       	mov	r30, r0
    206a:	09 94       	ijmp

0000206c <__umulhisi3>:
    206c:	a2 9f       	mul	r26, r18
    206e:	b0 01       	movw	r22, r0
    2070:	b3 9f       	mul	r27, r19
    2072:	c0 01       	movw	r24, r0
    2074:	a3 9f       	mul	r26, r19
    2076:	70 0d       	add	r23, r0
    2078:	81 1d       	adc	r24, r1
    207a:	11 24       	eor	r1, r1
    207c:	91 1d       	adc	r25, r1
    207e:	b2 9f       	mul	r27, r18
    2080:	70 0d       	add	r23, r0
    2082:	81 1d       	adc	r24, r1
    2084:	11 24       	eor	r1, r1
    2086:	91 1d       	adc	r25, r1
    2088:	08 95       	ret

0000208a <__udivmodhi4>:
    208a:	aa 1b       	sub	r26, r26
    208c:	bb 1b       	sub	r27, r27
    208e:	51 e1       	ldi	r21, 0x11	; 17
    2090:	07 c0       	rjmp	.+14     	; 0x20a0 <__udivmodhi4_ep>

00002092 <__udivmodhi4_loop>:
    2092:	aa 1f       	adc	r26, r26
    2094:	bb 1f       	adc	r27, r27
    2096:	a6 17       	cp	r26, r22
    2098:	b7 07       	cpc	r27, r23
    209a:	10 f0       	brcs	.+4      	; 0x20a0 <__udivmodhi4_ep>
    209c:	a6 1b       	sub	r26, r22
    209e:	b7 0b       	sbc	r27, r23

000020a0 <__udivmodhi4_ep>:
    20a0:	88 1f       	adc	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	5a 95       	dec	r21
    20a6:	a9 f7       	brne	.-22     	; 0x2092 <__udivmodhi4_loop>
    20a8:	80 95       	com	r24
    20aa:	90 95       	com	r25
    20ac:	bc 01       	movw	r22, r24
    20ae:	cd 01       	movw	r24, r26
    20b0:	08 95       	ret

000020b2 <__udivmodsi4>:
    20b2:	a1 e2       	ldi	r26, 0x21	; 33
    20b4:	1a 2e       	mov	r1, r26
    20b6:	aa 1b       	sub	r26, r26
    20b8:	bb 1b       	sub	r27, r27
    20ba:	fd 01       	movw	r30, r26
    20bc:	0d c0       	rjmp	.+26     	; 0x20d8 <__udivmodsi4_ep>

000020be <__udivmodsi4_loop>:
    20be:	aa 1f       	adc	r26, r26
    20c0:	bb 1f       	adc	r27, r27
    20c2:	ee 1f       	adc	r30, r30
    20c4:	ff 1f       	adc	r31, r31
    20c6:	a2 17       	cp	r26, r18
    20c8:	b3 07       	cpc	r27, r19
    20ca:	e4 07       	cpc	r30, r20
    20cc:	f5 07       	cpc	r31, r21
    20ce:	20 f0       	brcs	.+8      	; 0x20d8 <__udivmodsi4_ep>
    20d0:	a2 1b       	sub	r26, r18
    20d2:	b3 0b       	sbc	r27, r19
    20d4:	e4 0b       	sbc	r30, r20
    20d6:	f5 0b       	sbc	r31, r21

000020d8 <__udivmodsi4_ep>:
    20d8:	66 1f       	adc	r22, r22
    20da:	77 1f       	adc	r23, r23
    20dc:	88 1f       	adc	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	1a 94       	dec	r1
    20e2:	69 f7       	brne	.-38     	; 0x20be <__udivmodsi4_loop>
    20e4:	60 95       	com	r22
    20e6:	70 95       	com	r23
    20e8:	80 95       	com	r24
    20ea:	90 95       	com	r25
    20ec:	9b 01       	movw	r18, r22
    20ee:	ac 01       	movw	r20, r24
    20f0:	bd 01       	movw	r22, r26
    20f2:	cf 01       	movw	r24, r30
    20f4:	08 95       	ret

000020f6 <__itoa_ncheck>:
    20f6:	bb 27       	eor	r27, r27
    20f8:	4a 30       	cpi	r20, 0x0A	; 10
    20fa:	31 f4       	brne	.+12     	; 0x2108 <__itoa_ncheck+0x12>
    20fc:	99 23       	and	r25, r25
    20fe:	22 f4       	brpl	.+8      	; 0x2108 <__itoa_ncheck+0x12>
    2100:	bd e2       	ldi	r27, 0x2D	; 45
    2102:	90 95       	com	r25
    2104:	81 95       	neg	r24
    2106:	9f 4f       	sbci	r25, 0xFF	; 255
    2108:	0c 94 87 10 	jmp	0x210e	; 0x210e <__utoa_common>

0000210c <__utoa_ncheck>:
    210c:	bb 27       	eor	r27, r27

0000210e <__utoa_common>:
    210e:	fb 01       	movw	r30, r22
    2110:	55 27       	eor	r21, r21
    2112:	aa 27       	eor	r26, r26
    2114:	88 0f       	add	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	aa 1f       	adc	r26, r26
    211a:	a4 17       	cp	r26, r20
    211c:	10 f0       	brcs	.+4      	; 0x2122 <__utoa_common+0x14>
    211e:	a4 1b       	sub	r26, r20
    2120:	83 95       	inc	r24
    2122:	50 51       	subi	r21, 0x10	; 16
    2124:	b9 f7       	brne	.-18     	; 0x2114 <__utoa_common+0x6>
    2126:	a0 5d       	subi	r26, 0xD0	; 208
    2128:	aa 33       	cpi	r26, 0x3A	; 58
    212a:	08 f0       	brcs	.+2      	; 0x212e <__utoa_common+0x20>
    212c:	a9 5d       	subi	r26, 0xD9	; 217
    212e:	a1 93       	st	Z+, r26
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	79 f7       	brne	.-34     	; 0x2112 <__utoa_common+0x4>
    2134:	b1 11       	cpse	r27, r1
    2136:	b1 93       	st	Z+, r27
    2138:	11 92       	st	Z+, r1
    213a:	cb 01       	movw	r24, r22
    213c:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <strrev>

00002140 <strrev>:
    2140:	dc 01       	movw	r26, r24
    2142:	fc 01       	movw	r30, r24
    2144:	67 2f       	mov	r22, r23
    2146:	71 91       	ld	r23, Z+
    2148:	77 23       	and	r23, r23
    214a:	e1 f7       	brne	.-8      	; 0x2144 <strrev+0x4>
    214c:	32 97       	sbiw	r30, 0x02	; 2
    214e:	04 c0       	rjmp	.+8      	; 0x2158 <strrev+0x18>
    2150:	7c 91       	ld	r23, X
    2152:	6d 93       	st	X+, r22
    2154:	70 83       	st	Z, r23
    2156:	62 91       	ld	r22, -Z
    2158:	ae 17       	cp	r26, r30
    215a:	bf 07       	cpc	r27, r31
    215c:	c8 f3       	brcs	.-14     	; 0x2150 <strrev+0x10>
    215e:	08 95       	ret

00002160 <eeprom_read_byte>:
    2160:	e1 99       	sbic	0x1c, 1	; 28
    2162:	fe cf       	rjmp	.-4      	; 0x2160 <eeprom_read_byte>
    2164:	9f bb       	out	0x1f, r25	; 31
    2166:	8e bb       	out	0x1e, r24	; 30
    2168:	e0 9a       	sbi	0x1c, 0	; 28
    216a:	99 27       	eor	r25, r25
    216c:	8d b3       	in	r24, 0x1d	; 29
    216e:	08 95       	ret

00002170 <eeprom_read_word>:
    2170:	a8 e1       	ldi	r26, 0x18	; 24
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	42 e0       	ldi	r20, 0x02	; 2
    2176:	50 e0       	ldi	r21, 0x00	; 0
    2178:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <eeprom_read_blraw>

0000217c <eeprom_write_byte>:
    217c:	26 2f       	mov	r18, r22

0000217e <eeprom_write_r18>:
    217e:	e1 99       	sbic	0x1c, 1	; 28
    2180:	fe cf       	rjmp	.-4      	; 0x217e <eeprom_write_r18>
    2182:	9f bb       	out	0x1f, r25	; 31
    2184:	8e bb       	out	0x1e, r24	; 30
    2186:	2d bb       	out	0x1d, r18	; 29
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	f8 94       	cli
    218c:	e2 9a       	sbi	0x1c, 2	; 28
    218e:	e1 9a       	sbi	0x1c, 1	; 28
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	01 96       	adiw	r24, 0x01	; 1
    2194:	08 95       	ret

00002196 <eeprom_write_word>:
    2196:	0e 94 be 10 	call	0x217c	; 0x217c <eeprom_write_byte>
    219a:	27 2f       	mov	r18, r23
    219c:	0c 94 bf 10 	jmp	0x217e	; 0x217e <eeprom_write_r18>

000021a0 <eeprom_read_block>:
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22

000021a4 <eeprom_read_blraw>:
    21a4:	fc 01       	movw	r30, r24
    21a6:	e1 99       	sbic	0x1c, 1	; 28
    21a8:	fe cf       	rjmp	.-4      	; 0x21a6 <eeprom_read_blraw+0x2>
    21aa:	06 c0       	rjmp	.+12     	; 0x21b8 <eeprom_read_blraw+0x14>
    21ac:	ff bb       	out	0x1f, r31	; 31
    21ae:	ee bb       	out	0x1e, r30	; 30
    21b0:	e0 9a       	sbi	0x1c, 0	; 28
    21b2:	31 96       	adiw	r30, 0x01	; 1
    21b4:	0d b2       	in	r0, 0x1d	; 29
    21b6:	0d 92       	st	X+, r0
    21b8:	41 50       	subi	r20, 0x01	; 1
    21ba:	50 40       	sbci	r21, 0x00	; 0
    21bc:	b8 f7       	brcc	.-18     	; 0x21ac <eeprom_read_blraw+0x8>
    21be:	08 95       	ret

000021c0 <_exit>:
    21c0:	f8 94       	cli

000021c2 <__stop_program>:
    21c2:	ff cf       	rjmp	.-2      	; 0x21c2 <__stop_program>
