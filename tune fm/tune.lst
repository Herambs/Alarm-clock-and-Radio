
tune.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000112  00800100  00000f1a  00000fae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000101  00800212  00800212  000010c0  2**0
                  ALLOC
  3 .stab         00002ca0  00000000  00000000  000010c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001681  00000000  00000000  00003d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000053e1  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000053f4  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
   4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
   8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
   c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  20:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_8>
  24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  30:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  40:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_16>
  44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  48:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  84:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__vector_33>
  88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  8c:	df 02       	muls	r29, r31
  8e:	b6 02       	muls	r27, r22
  90:	b6 02       	muls	r27, r22
  92:	b6 02       	muls	r27, r22
  94:	b6 02       	muls	r27, r22
  96:	b6 02       	muls	r27, r22
  98:	b6 02       	muls	r27, r22
  9a:	b6 02       	muls	r27, r22
  9c:	df 02       	muls	r29, r31
  9e:	b6 02       	muls	r27, r22
  a0:	b6 02       	muls	r27, r22
  a2:	b6 02       	muls	r27, r22
  a4:	b6 02       	muls	r27, r22
  a6:	b6 02       	muls	r27, r22
  a8:	b6 02       	muls	r27, r22
  aa:	b6 02       	muls	r27, r22
  ac:	e9 02       	muls	r30, r25
  ae:	b6 02       	muls	r27, r22
  b0:	b6 02       	muls	r27, r22
  b2:	b6 02       	muls	r27, r22
  b4:	b6 02       	muls	r27, r22
  b6:	b6 02       	muls	r27, r22
  b8:	b6 02       	muls	r27, r22
  ba:	b6 02       	muls	r27, r22
  bc:	b6 02       	muls	r27, r22
  be:	b6 02       	muls	r27, r22
  c0:	b6 02       	muls	r27, r22
  c2:	b6 02       	muls	r27, r22
  c4:	b6 02       	muls	r27, r22
  c6:	b6 02       	muls	r27, r22
  c8:	b6 02       	muls	r27, r22
  ca:	b6 02       	muls	r27, r22
  cc:	e9 02       	muls	r30, r25
  ce:	b6 02       	muls	r27, r22
  d0:	b6 02       	muls	r27, r22
  d2:	b6 02       	muls	r27, r22
  d4:	b6 02       	muls	r27, r22
  d6:	b6 02       	muls	r27, r22
  d8:	b6 02       	muls	r27, r22
  da:	b6 02       	muls	r27, r22
  dc:	b6 02       	muls	r27, r22
  de:	b6 02       	muls	r27, r22
  e0:	b6 02       	muls	r27, r22
  e2:	b6 02       	muls	r27, r22
  e4:	b6 02       	muls	r27, r22
  e6:	b6 02       	muls	r27, r22
  e8:	b6 02       	muls	r27, r22
  ea:	b6 02       	muls	r27, r22
  ec:	00 03       	mulsu	r16, r16
  ee:	b6 02       	muls	r27, r22
  f0:	b6 02       	muls	r27, r22
  f2:	b6 02       	muls	r27, r22
  f4:	b6 02       	muls	r27, r22
  f6:	b6 02       	muls	r27, r22
  f8:	b6 02       	muls	r27, r22
  fa:	b6 02       	muls	r27, r22
  fc:	04 03       	mulsu	r16, r20
  fe:	b6 02       	muls	r27, r22
 100:	b6 02       	muls	r27, r22
 102:	b6 02       	muls	r27, r22
 104:	b6 02       	muls	r27, r22
 106:	b6 02       	muls	r27, r22
 108:	b6 02       	muls	r27, r22
 10a:	b6 02       	muls	r27, r22
 10c:	b6 02       	muls	r27, r22
 10e:	b6 02       	muls	r27, r22
 110:	b6 02       	muls	r27, r22
 112:	b6 02       	muls	r27, r22
 114:	b6 02       	muls	r27, r22
 116:	b6 02       	muls	r27, r22
 118:	b6 02       	muls	r27, r22
 11a:	b6 02       	muls	r27, r22
 11c:	12 03       	mulsu	r17, r18
 11e:	b6 02       	muls	r27, r22
 120:	b6 02       	muls	r27, r22
 122:	b6 02       	muls	r27, r22
 124:	b6 02       	muls	r27, r22
 126:	b6 02       	muls	r27, r22
 128:	b6 02       	muls	r27, r22
 12a:	b6 02       	muls	r27, r22
 12c:	d0 02       	muls	r29, r16

0000012e <__ctors_end>:
 12e:	11 24       	eor	r1, r1
 130:	1f be       	out	0x3f, r1	; 63
 132:	cf ef       	ldi	r28, 0xFF	; 255
 134:	d0 e1       	ldi	r29, 0x10	; 16
 136:	de bf       	out	0x3e, r29	; 62
 138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
 13a:	12 e0       	ldi	r17, 0x02	; 2
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	ea e1       	ldi	r30, 0x1A	; 26
 142:	ff e0       	ldi	r31, 0x0F	; 15
 144:	00 e0       	ldi	r16, 0x00	; 0
 146:	0b bf       	out	0x3b, r16	; 59
 148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
 14a:	07 90       	elpm	r0, Z+
 14c:	0d 92       	st	X+, r0
 14e:	a2 31       	cpi	r26, 0x12	; 18
 150:	b1 07       	cpc	r27, r17
 152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
 154:	23 e0       	ldi	r18, 0x03	; 3
 156:	a2 e1       	ldi	r26, 0x12	; 18
 158:	b2 e0       	ldi	r27, 0x02	; 2
 15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
 15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
 15e:	a3 31       	cpi	r26, 0x13	; 19
 160:	b2 07       	cpc	r27, r18
 162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
 164:	0e 94 84 06 	call	0xd08	; 0xd08 <main>
 168:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <_exit>

0000016c <__bad_interrupt>:
 16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <chk_buttons>:
 uint8_t state = 0;
 uint8_t counter_value=0; //variable for storing pushbutton state
 int16_t total = 0;
 uint8_t data = 0x00;

uint8_t chk_buttons(uint8_t button) {
 170:	48 2f       	mov	r20, r24

  static uint16_t state[8] ={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}; //holds present state
  state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
 172:	e8 2f       	mov	r30, r24
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	99 b3       	in	r25, 0x19	; 25
 178:	ee 0f       	add	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	e5 5e       	subi	r30, 0xE5	; 229
 17e:	fd 4f       	sbci	r31, 0xFD	; 253
 180:	20 81       	ld	r18, Z
 182:	31 81       	ldd	r19, Z+1	; 0x01
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	30 6e       	ori	r19, 0xE0	; 224
 18a:	89 2f       	mov	r24, r25
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <chk_buttons+0x24>
 190:	95 95       	asr	r25
 192:	87 95       	ror	r24
 194:	4a 95       	dec	r20
 196:	e2 f7       	brpl	.-8      	; 0x190 <chk_buttons+0x20>
 198:	81 70       	andi	r24, 0x01	; 1
 19a:	99 27       	eor	r25, r25
 19c:	28 2b       	or	r18, r24
 19e:	39 2b       	or	r19, r25
 1a0:	31 83       	std	Z+1, r19	; 0x01
 1a2:	20 83       	st	Z, r18
  if (state[button] == 0xF000) return 1;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	21 15       	cp	r18, r1
 1a8:	30 4f       	sbci	r19, 0xF0	; 240
 1aa:	09 f0       	breq	.+2      	; 0x1ae <chk_buttons+0x3e>
 1ac:	80 e0       	ldi	r24, 0x00	; 0
  return 0;

}
 1ae:	08 95       	ret

000001b0 <bargraph>:

 void bargraph(){
  PORTB |= 0x01; //rising edge to rgclk
 1b0:	c0 9a       	sbi	0x18, 0	; 24
  PORTB &= ~0x01;//falling edge to rgclk
 1b2:	c0 98       	cbi	0x18, 0	; 24
 1b4:	08 95       	ret

000001b6 <encoder>:
void encoder(){

 static uint8_t a_past = 0x00; // holds last value
 static uint8_t b_past = 0x00; // holds last value for 

 DDRE = 0xFF;             //set port E to output
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	82 b9       	out	0x02, r24	; 2
 PORTE |= 0x20 ;          // inhibitor high
 1ba:	1d 9a       	sbi	0x03, 5	; 3
 asm("nop");
 1bc:	00 00       	nop
 asm("nop");
 1be:	00 00       	nop
 PORTE &= ~(0x40);        //SH_LD/ low
 1c0:	1e 98       	cbi	0x03, 6	; 3
 asm("nop");
 1c2:	00 00       	nop
 asm("nop");
 1c4:	00 00       	nop
 PORTE |= 0x40;           //SH/LD_n high
 1c6:	1e 9a       	sbi	0x03, 6	; 3
 PORTE &= ~(0x20);        //inhibitor low
 1c8:	1d 98       	cbi	0x03, 5	; 3
uint8_t dat = data&0x03;  // mask data
 1ca:	80 91 14 02 	lds	r24, 0x0214
 1ce:	28 2f       	mov	r18, r24
 1d0:	23 70       	andi	r18, 0x03	; 3
uint8_t dat1 = data&0x0C; // mask data1
 1d2:	8c 70       	andi	r24, 0x0C	; 12


	switch(a_past)  // inc & dec according to direction of encoder for encoder 1
 1d4:	90 91 1a 02 	lds	r25, 0x021A
 1d8:	91 30       	cpi	r25, 0x01	; 1
 1da:	b1 f0       	breq	.+44     	; 0x208 <encoder+0x52>
 1dc:	20 f0       	brcs	.+8      	; 0x1e6 <encoder+0x30>
 1de:	92 30       	cpi	r25, 0x02	; 2
 1e0:	11 f0       	breq	.+4      	; 0x1e6 <encoder+0x30>
 1e2:	93 30       	cpi	r25, 0x03	; 3
 1e4:	11 f4       	brne	.+4      	; 0x1ea <encoder+0x34>
		}
        case 0x02:
		{
			if(dat==0x00){}
                  	else if(dat==0x03){}
			a_past = dat;
 1e6:	20 93 1a 02 	sts	0x021A, r18
	
    }



switch(b_past)  //inc dec count according to direction of encoder for second encoder
 1ea:	90 91 19 02 	lds	r25, 0x0219
 1ee:	94 30       	cpi	r25, 0x04	; 4
 1f0:	d1 f0       	breq	.+52     	; 0x226 <encoder+0x70>
 1f2:	38 f0       	brcs	.+14     	; 0x202 <encoder+0x4c>
 1f4:	98 30       	cpi	r25, 0x08	; 8
 1f6:	11 f0       	breq	.+4      	; 0x1fc <encoder+0x46>
 1f8:	9c 30       	cpi	r25, 0x0C	; 12
 1fa:	31 f5       	brne	.+76     	; 0x248 <encoder+0x92>
                }
        case 0x08:
                {
                        if(dat1==0x00){}
                        else if(dat1==0x0C){}
                        b_past = dat1;
 1fc:	80 93 19 02 	sts	0x0219, r24
 200:	08 95       	ret
	
    }



switch(b_past)  //inc dec count according to direction of encoder for second encoder
 202:	99 23       	and	r25, r25
 204:	d9 f3       	breq	.-10     	; 0x1fc <encoder+0x46>
 206:	08 95       	ret
                  	break;
		}

        case 0x01:
		{
			if(dat==0x03){fm_freq = fm_freq + 70;}// inc count
 208:	23 30       	cpi	r18, 0x03	; 3
 20a:	61 f1       	breq	.+88     	; 0x264 <encoder+0xae>
                  	else if(dat==0x00){fm_freq = fm_freq - 70;}// dec count
 20c:	21 11       	cpse	r18, r1
 20e:	eb cf       	rjmp	.-42     	; 0x1e6 <encoder+0x30>
 210:	40 91 0d 01 	lds	r20, 0x010D
 214:	50 91 0e 01 	lds	r21, 0x010E
 218:	46 54       	subi	r20, 0x46	; 70
 21a:	51 09       	sbc	r21, r1
 21c:	50 93 0e 01 	sts	0x010E, r21
 220:	40 93 0d 01 	sts	0x010D, r20
 224:	e0 cf       	rjmp	.-64     	; 0x1e6 <encoder+0x30>
                        break;
                }

        case 0x04:
                {
                        if(dat1==0x0C){total = total + counter_value;} // inc count
 226:	8c 30       	cpi	r24, 0x0C	; 12
 228:	81 f0       	breq	.+32     	; 0x24a <encoder+0x94>
                        else if(dat1==0x00){total = total - counter_value;} // dec count
 22a:	81 11       	cpse	r24, r1
 22c:	e7 cf       	rjmp	.-50     	; 0x1fc <encoder+0x46>
 22e:	90 91 17 02 	lds	r25, 0x0217
 232:	20 91 15 02 	lds	r18, 0x0215
 236:	30 91 16 02 	lds	r19, 0x0216
 23a:	29 1b       	sub	r18, r25
 23c:	31 09       	sbc	r19, r1
 23e:	30 93 16 02 	sts	0x0216, r19
 242:	20 93 15 02 	sts	0x0215, r18
 246:	da cf       	rjmp	.-76     	; 0x1fc <encoder+0x46>
 248:	08 95       	ret
                        break;
                }

        case 0x04:
                {
                        if(dat1==0x0C){total = total + counter_value;} // inc count
 24a:	90 91 17 02 	lds	r25, 0x0217
 24e:	20 91 15 02 	lds	r18, 0x0215
 252:	30 91 16 02 	lds	r19, 0x0216
 256:	29 0f       	add	r18, r25
 258:	31 1d       	adc	r19, r1
 25a:	30 93 16 02 	sts	0x0216, r19
 25e:	20 93 15 02 	sts	0x0215, r18
 262:	cc cf       	rjmp	.-104    	; 0x1fc <encoder+0x46>
                  	break;
		}

        case 0x01:
		{
			if(dat==0x03){fm_freq = fm_freq + 70;}// inc count
 264:	40 91 0d 01 	lds	r20, 0x010D
 268:	50 91 0e 01 	lds	r21, 0x010E
 26c:	4a 5b       	subi	r20, 0xBA	; 186
 26e:	5f 4f       	sbci	r21, 0xFF	; 255
 270:	50 93 0e 01 	sts	0x010E, r21
 274:	40 93 0d 01 	sts	0x010D, r20
 278:	b6 cf       	rjmp	.-148    	; 0x1e6 <encoder+0x30>

0000027a <__vector_16>:
    }

}


ISR(TIMER0_OVF_vect){      
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	0b b6       	in	r0, 0x3b	; 59
 286:	0f 92       	push	r0
 288:	2f 93       	push	r18
 28a:	3f 93       	push	r19
 28c:	4f 93       	push	r20
 28e:	5f 93       	push	r21
 290:	6f 93       	push	r22
 292:	7f 93       	push	r23
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	af 93       	push	r26
 29a:	bf 93       	push	r27
 29c:	cf 93       	push	r28
 29e:	ef 93       	push	r30
 2a0:	ff 93       	push	r31
   uint8_t i=1;
   PORTB |= 0x70; // ENABLE TRISTATE BUFFER
 2a2:	88 b3       	in	r24, 0x18	; 24
 2a4:	80 67       	ori	r24, 0x70	; 112
 2a6:	88 bb       	out	0x18, r24	; 24
  asm("nop");
 2a8:	00 00       	nop
  asm("nop");
 2aa:	00 00       	nop
 2ac:	eb e1       	ldi	r30, 0x1B	; 27
 2ae:	f2 e0       	ldi	r31, 0x02	; 2
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	50 e0       	ldi	r21, 0x00	; 0
 2b4:	60 91 18 02 	lds	r22, 0x0218
         chk_buttons(i-1);// call chk_cuttons
         if(chk_buttons(i-1) == 1){  // if its pushed
            state ^= i;}
      if((state & 0x03) == 0) {counter_value = 1;} //if no button pressed
      if((state & 0x03) == 1) {counter_value = 2;} //if first button is pressed
      if((state & 0x03) == 2) {counter_value = 4;} //if second button is pressed
 2b8:	c4 e0       	ldi	r28, 0x04	; 4
  for (i=1;i<3;i++){  //counter for first two pushbuttons
         chk_buttons(i-1);// call chk_cuttons
         if(chk_buttons(i-1) == 1){  // if its pushed
            state ^= i;}
      if((state & 0x03) == 0) {counter_value = 1;} //if no button pressed
      if((state & 0x03) == 1) {counter_value = 2;} //if first button is pressed
 2ba:	b2 e0       	ldi	r27, 0x02	; 2
  asm("nop");
  for (i=1;i<3;i++){  //counter for first two pushbuttons
         chk_buttons(i-1);// call chk_cuttons
         if(chk_buttons(i-1) == 1){  // if its pushed
            state ^= i;}
      if((state & 0x03) == 0) {counter_value = 1;} //if no button pressed
 2bc:	a1 e0       	ldi	r26, 0x01	; 1
 2be:	71 e0       	ldi	r23, 0x01	; 1
 2c0:	74 0f       	add	r23, r20
 uint8_t data = 0x00;

uint8_t chk_buttons(uint8_t button) {

  static uint16_t state[8] ={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}; //holds present state
  state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000;
 2c2:	99 b3       	in	r25, 0x19	; 25
 2c4:	20 81       	ld	r18, Z
 2c6:	31 81       	ldd	r19, Z+1	; 0x01
 2c8:	22 0f       	add	r18, r18
 2ca:	33 1f       	adc	r19, r19
 2cc:	30 6e       	ori	r19, 0xE0	; 224
 2ce:	89 2f       	mov	r24, r25
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	04 2e       	mov	r0, r20
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <__vector_16+0x60>
 2d6:	95 95       	asr	r25
 2d8:	87 95       	ror	r24
 2da:	0a 94       	dec	r0
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <__vector_16+0x5c>
 2de:	81 70       	andi	r24, 0x01	; 1
 2e0:	99 27       	eor	r25, r25
 2e2:	28 2b       	or	r18, r24
 2e4:	39 2b       	or	r19, r25
 2e6:	31 83       	std	Z+1, r19	; 0x01
 2e8:	20 83       	st	Z, r18
 2ea:	89 b3       	in	r24, 0x19	; 25
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	04 2e       	mov	r0, r20
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <__vector_16+0x7c>
 2f2:	95 95       	asr	r25
 2f4:	87 95       	ror	r24
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <__vector_16+0x78>
 2fa:	81 70       	andi	r24, 0x01	; 1
 2fc:	99 27       	eor	r25, r25
 2fe:	90 6e       	ori	r25, 0xE0	; 224
 300:	22 0f       	add	r18, r18
 302:	33 1f       	adc	r19, r19
 304:	82 2b       	or	r24, r18
 306:	93 2b       	or	r25, r19
 308:	81 93       	st	Z+, r24
 30a:	91 93       	st	Z+, r25
  if (state[button] == 0xF000) return 1;
 30c:	81 15       	cp	r24, r1
 30e:	90 4f       	sbci	r25, 0xF0	; 240
 310:	71 f1       	breq	.+92     	; 0x36e <__vector_16+0xf4>
  asm("nop");
  for (i=1;i<3;i++){  //counter for first two pushbuttons
         chk_buttons(i-1);// call chk_cuttons
         if(chk_buttons(i-1) == 1){  // if its pushed
            state ^= i;}
      if((state & 0x03) == 0) {counter_value = 1;} //if no button pressed
 312:	86 2f       	mov	r24, r22
 314:	83 70       	andi	r24, 0x03	; 3
 316:	31 f5       	brne	.+76     	; 0x364 <__vector_16+0xea>
 318:	a0 93 17 02 	sts	0x0217, r26
ISR(TIMER0_OVF_vect){      
   uint8_t i=1;
   PORTB |= 0x70; // ENABLE TRISTATE BUFFER
  asm("nop");
  asm("nop");
  for (i=1;i<3;i++){  //counter for first two pushbuttons
 31c:	41 30       	cpi	r20, 0x01	; 1
 31e:	51 05       	cpc	r21, r1
 320:	f1 f4       	brne	.+60     	; 0x35e <__vector_16+0xe4>
      if((state & 0x03) == 2) {counter_value = 4;} //if second button is pressed
      if((state & 0x03) == 3) {counter_value = 0;} // if both the buttons are pressed
            
    
  }
    PORTB |= 0x00; //disable tristate buffer
 322:	88 b3       	in	r24, 0x18	; 24
 324:	88 bb       	out	0x18, r24	; 24
    SPDR = state;// send data to bargraph
 326:	80 91 18 02 	lds	r24, 0x0218
 32a:	8f b9       	out	0x0f, r24	; 15
    while(bit_is_clear(SPSR,SPIF)){}// wait for 8 cycles
 32c:	77 9b       	sbis	0x0e, 7	; 14
 32e:	fe cf       	rjmp	.-4      	; 0x32c <__vector_16+0xb2>
    data = SPDR; // move spdr value to variable
 330:	8f b1       	in	r24, 0x0f	; 15
 332:	80 93 14 02 	sts	0x0214, r24
}
 336:	ff 91       	pop	r31
 338:	ef 91       	pop	r30
 33a:	cf 91       	pop	r28
 33c:	bf 91       	pop	r27
 33e:	af 91       	pop	r26
 340:	9f 91       	pop	r25
 342:	8f 91       	pop	r24
 344:	7f 91       	pop	r23
 346:	6f 91       	pop	r22
 348:	5f 91       	pop	r21
 34a:	4f 91       	pop	r20
 34c:	3f 91       	pop	r19
 34e:	2f 91       	pop	r18
 350:	0f 90       	pop	r0
 352:	0b be       	out	0x3b, r0	; 59
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti
 35e:	41 e0       	ldi	r20, 0x01	; 1
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	ad cf       	rjmp	.-166    	; 0x2be <__vector_16+0x44>
  for (i=1;i<3;i++){  //counter for first two pushbuttons
         chk_buttons(i-1);// call chk_cuttons
         if(chk_buttons(i-1) == 1){  // if its pushed
            state ^= i;}
      if((state & 0x03) == 0) {counter_value = 1;} //if no button pressed
      if((state & 0x03) == 1) {counter_value = 2;} //if first button is pressed
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	39 f4       	brne	.+14     	; 0x376 <__vector_16+0xfc>
 368:	b0 93 17 02 	sts	0x0217, r27
 36c:	d7 cf       	rjmp	.-82     	; 0x31c <__vector_16+0xa2>
  asm("nop");
  asm("nop");
  for (i=1;i<3;i++){  //counter for first two pushbuttons
         chk_buttons(i-1);// call chk_cuttons
         if(chk_buttons(i-1) == 1){  // if its pushed
            state ^= i;}
 36e:	67 27       	eor	r22, r23
 370:	60 93 18 02 	sts	0x0218, r22
 374:	ce cf       	rjmp	.-100    	; 0x312 <__vector_16+0x98>
      if((state & 0x03) == 0) {counter_value = 1;} //if no button pressed
      if((state & 0x03) == 1) {counter_value = 2;} //if first button is pressed
      if((state & 0x03) == 2) {counter_value = 4;} //if second button is pressed
 376:	82 30       	cpi	r24, 0x02	; 2
 378:	19 f4       	brne	.+6      	; 0x380 <__vector_16+0x106>
 37a:	c0 93 17 02 	sts	0x0217, r28
 37e:	ce cf       	rjmp	.-100    	; 0x31c <__vector_16+0xa2>
      if((state & 0x03) == 3) {counter_value = 0;} // if both the buttons are pressed
 380:	10 92 17 02 	sts	0x0217, r1
 384:	cb cf       	rjmp	.-106    	; 0x31c <__vector_16+0xa2>

00000386 <spi_init>:
    data = SPDR; // move spdr value to variable
}

void spi_init()
{
	DDRB = 0xF7;// set ss_n, sck, mosi
 386:	87 ef       	ldi	r24, 0xF7	; 247
 388:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE) | (1<<MSTR);// master mode
 38a:	8d b1       	in	r24, 0x0d	; 13
 38c:	80 65       	ori	r24, 0x50	; 80
 38e:	8d b9       	out	0x0d, r24	; 13
	SPSR |= (1<<SPI2X);// double speed operation
 390:	70 9a       	sbi	0x0e, 0	; 14
 392:	08 95       	ret

00000394 <__vector_8>:
uint8_t segment_data[5];
//decimal to 7-segment LED display encodings, logic "0" turns on segment
uint8_t dec_to_7seg[11] = {0x03,0x9F,0x25,0x0D,0x99,0x49,0x41,0x1F,0x01,0x09,0xFF}; 


ISR(INT7_vect){STC_interrupt = TRUE;}
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
 39e:	8f 93       	push	r24
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	80 93 b3 02 	sts	0x02B3, r24
 3a6:	8f 91       	pop	r24
 3a8:	0f 90       	pop	r0
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	0f 90       	pop	r0
 3ae:	1f 90       	pop	r1
 3b0:	18 95       	reti

000003b2 <segsum>:
//***********************************************************************************
//                                   segment_sum                                    
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum) {
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	ec 01       	movw	r28, r24
uint8_t ones;  
uint8_t tens;  
uint8_t hundreds;  
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
 3b8:	9c 01       	movw	r18, r24
 3ba:	ad ec       	ldi	r26, 0xCD	; 205
 3bc:	bc ec       	ldi	r27, 0xCC	; 204
 3be:	0e 94 17 07 	call	0xe2e	; 0xe2e <__umulhisi3>
 3c2:	ac 01       	movw	r20, r24
 3c4:	56 95       	lsr	r21
 3c6:	47 95       	ror	r20
 3c8:	56 95       	lsr	r21
 3ca:	47 95       	ror	r20
 3cc:	56 95       	lsr	r21
 3ce:	47 95       	ror	r20
 3d0:	9a 01       	movw	r18, r20
 3d2:	22 0f       	add	r18, r18
 3d4:	33 1f       	adc	r19, r19
 3d6:	ca 01       	movw	r24, r20
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	82 0f       	add	r24, r18
 3e6:	93 1f       	adc	r25, r19
 3e8:	fe 01       	movw	r30, r28
 3ea:	e8 1b       	sub	r30, r24
 3ec:	f9 0b       	sbc	r31, r25
tens = (sum/10)%10;
hundreds = (sum/100)%10;
thousands = (sum/1000)%10;
segment_data[0] = dec_to_7seg[ones];
 3ee:	e0 50       	subi	r30, 0x00	; 0
 3f0:	ff 4f       	sbci	r31, 0xFF	; 255
 3f2:	80 81       	ld	r24, Z
 3f4:	80 93 88 02 	sts	0x0288, r24
uint8_t ones;  
uint8_t tens;  
uint8_t hundreds;  
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
tens = (sum/10)%10;
 3f8:	9a 01       	movw	r18, r20
 3fa:	0e 94 17 07 	call	0xe2e	; 0xe2e <__umulhisi3>
 3fe:	96 95       	lsr	r25
 400:	87 95       	ror	r24
 402:	96 95       	lsr	r25
 404:	87 95       	ror	r24
 406:	96 95       	lsr	r25
 408:	87 95       	ror	r24
 40a:	9c 01       	movw	r18, r24
 40c:	22 0f       	add	r18, r18
 40e:	33 1f       	adc	r19, r19
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	82 0f       	add	r24, r18
 41e:	93 1f       	adc	r25, r19
 420:	48 1b       	sub	r20, r24
 422:	59 0b       	sbc	r21, r25
hundreds = (sum/100)%10;
thousands = (sum/1000)%10;
segment_data[0] = dec_to_7seg[ones];
segment_data[1] = dec_to_7seg[tens];
 424:	fa 01       	movw	r30, r20
 426:	e0 50       	subi	r30, 0x00	; 0
 428:	ff 4f       	sbci	r31, 0xFF	; 255
 42a:	80 81       	ld	r24, Z
 42c:	80 93 89 02 	sts	0x0289, r24
segment_data[2] = dec_to_7seg[10];
 430:	80 91 0a 01 	lds	r24, 0x010A
 434:	80 93 8a 02 	sts	0x028A, r24
uint8_t tens;  
uint8_t hundreds;  
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
tens = (sum/10)%10;
hundreds = (sum/100)%10;
 438:	9e 01       	movw	r18, r28
 43a:	36 95       	lsr	r19
 43c:	27 95       	ror	r18
 43e:	36 95       	lsr	r19
 440:	27 95       	ror	r18
 442:	ab e7       	ldi	r26, 0x7B	; 123
 444:	b4 e1       	ldi	r27, 0x14	; 20
 446:	0e 94 17 07 	call	0xe2e	; 0xe2e <__umulhisi3>
 44a:	ac 01       	movw	r20, r24
 44c:	56 95       	lsr	r21
 44e:	47 95       	ror	r20
 450:	9a 01       	movw	r18, r20
 452:	ad ec       	ldi	r26, 0xCD	; 205
 454:	bc ec       	ldi	r27, 0xCC	; 204
 456:	0e 94 17 07 	call	0xe2e	; 0xe2e <__umulhisi3>
 45a:	96 95       	lsr	r25
 45c:	87 95       	ror	r24
 45e:	96 95       	lsr	r25
 460:	87 95       	ror	r24
 462:	96 95       	lsr	r25
 464:	87 95       	ror	r24
 466:	9c 01       	movw	r18, r24
 468:	22 0f       	add	r18, r18
 46a:	33 1f       	adc	r19, r19
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	82 0f       	add	r24, r18
 47a:	93 1f       	adc	r25, r19
 47c:	48 1b       	sub	r20, r24
 47e:	59 0b       	sbc	r21, r25
thousands = (sum/1000)%10;
segment_data[0] = dec_to_7seg[ones];
segment_data[1] = dec_to_7seg[tens];
segment_data[2] = dec_to_7seg[10];
segment_data[3] = dec_to_7seg[hundreds];
 480:	fa 01       	movw	r30, r20
 482:	e0 50       	subi	r30, 0x00	; 0
 484:	ff 4f       	sbci	r31, 0xFF	; 255
 486:	80 81       	ld	r24, Z
 488:	80 93 8b 02 	sts	0x028B, r24
uint8_t hundreds;  
uint8_t thousands;  //determine how many digits there are 
ones = sum%10;
tens = (sum/10)%10;
hundreds = (sum/100)%10;
thousands = (sum/1000)%10;
 48c:	9e 01       	movw	r18, r28
 48e:	36 95       	lsr	r19
 490:	27 95       	ror	r18
 492:	36 95       	lsr	r19
 494:	27 95       	ror	r18
 496:	36 95       	lsr	r19
 498:	27 95       	ror	r18
 49a:	a5 ec       	ldi	r26, 0xC5	; 197
 49c:	b0 e2       	ldi	r27, 0x20	; 32
 49e:	0e 94 17 07 	call	0xe2e	; 0xe2e <__umulhisi3>
 4a2:	ac 01       	movw	r20, r24
 4a4:	52 95       	swap	r21
 4a6:	42 95       	swap	r20
 4a8:	4f 70       	andi	r20, 0x0F	; 15
 4aa:	45 27       	eor	r20, r21
 4ac:	5f 70       	andi	r21, 0x0F	; 15
 4ae:	45 27       	eor	r20, r21
 4b0:	9a 01       	movw	r18, r20
 4b2:	ad ec       	ldi	r26, 0xCD	; 205
 4b4:	bc ec       	ldi	r27, 0xCC	; 204
 4b6:	0e 94 17 07 	call	0xe2e	; 0xe2e <__umulhisi3>
 4ba:	96 95       	lsr	r25
 4bc:	87 95       	ror	r24
 4be:	96 95       	lsr	r25
 4c0:	87 95       	ror	r24
 4c2:	96 95       	lsr	r25
 4c4:	87 95       	ror	r24
 4c6:	9c 01       	movw	r18, r24
 4c8:	22 0f       	add	r18, r18
 4ca:	33 1f       	adc	r19, r19
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	82 0f       	add	r24, r18
 4da:	93 1f       	adc	r25, r19
 4dc:	48 1b       	sub	r20, r24
 4de:	59 0b       	sbc	r21, r25
segment_data[0] = dec_to_7seg[ones];
segment_data[1] = dec_to_7seg[tens];
segment_data[2] = dec_to_7seg[10];
segment_data[3] = dec_to_7seg[hundreds];
segment_data[4] = dec_to_7seg[thousands];
 4e0:	fa 01       	movw	r30, r20
 4e2:	e0 50       	subi	r30, 0x00	; 0
 4e4:	ff 4f       	sbci	r31, 0xFF	; 255
 4e6:	80 81       	ld	r24, Z
 4e8:	80 93 8c 02 	sts	0x028C, r24
if(sum<10){           //blancking leading 0s
 4ec:	ca 30       	cpi	r28, 0x0A	; 10
 4ee:	d1 05       	cpc	r29, r1
 4f0:	a0 f0       	brcs	.+40     	; 0x51a <segsum+0x168>
  segment_data[1] = 0xFF;
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<100){
 4f2:	c4 36       	cpi	r28, 0x64	; 100
 4f4:	d1 05       	cpc	r29, r1
 4f6:	48 f0       	brcs	.+18     	; 0x50a <segsum+0x158>
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<1000){
 4f8:	c8 3e       	cpi	r28, 0xE8	; 232
 4fa:	d3 40       	sbci	r29, 0x03	; 3
 4fc:	18 f4       	brcc	.+6      	; 0x504 <segsum+0x152>
  segment_data[4] = 0xFF;}
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
 500:	80 93 8c 02 	sts	0x028C, r24

}
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	08 95       	ret
if(sum<10){           //blancking leading 0s
  segment_data[1] = 0xFF;
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<100){
  segment_data[3] = 0xFF;
 50a:	8f ef       	ldi	r24, 0xFF	; 255
 50c:	80 93 8b 02 	sts	0x028B, r24
  segment_data[4] = 0xFF;}
 510:	80 93 8c 02 	sts	0x028C, r24
else if(sum<1000){
  segment_data[4] = 0xFF;}

}
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	08 95       	ret
segment_data[1] = dec_to_7seg[tens];
segment_data[2] = dec_to_7seg[10];
segment_data[3] = dec_to_7seg[hundreds];
segment_data[4] = dec_to_7seg[thousands];
if(sum<10){           //blancking leading 0s
  segment_data[1] = 0xFF;
 51a:	8f ef       	ldi	r24, 0xFF	; 255
 51c:	80 93 89 02 	sts	0x0289, r24
  segment_data[3] = 0xFF;
 520:	80 93 8b 02 	sts	0x028B, r24
  segment_data[4] = 0xFF;}
 524:	80 93 8c 02 	sts	0x028C, r24
  segment_data[3] = 0xFF;
  segment_data[4] = 0xFF;}
else if(sum<1000){
  segment_data[4] = 0xFF;}

}
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <init_ext>:

void init_ext()
 {
   EICRB |= (1<<ISC71) | (1<<ISC70);
 52e:	8a b7       	in	r24, 0x3a	; 58
 530:	80 6c       	ori	r24, 0xC0	; 192
 532:	8a bf       	out	0x3a, r24	; 58
   TIMSK |= (1<<INT7);
 534:	87 b7       	in	r24, 0x37	; 55
 536:	80 68       	ori	r24, 0x80	; 128
 538:	87 bf       	out	0x37, r24	; 55
 53a:	08 95       	ret

0000053c <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
 53c:	1f 92       	push	r1
 53e:	0f 92       	push	r0
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	0f 92       	push	r0
 544:	11 24       	eor	r1, r1
 546:	0b b6       	in	r0, 0x3b	; 59
 548:	0f 92       	push	r0
 54a:	2f 93       	push	r18
 54c:	3f 93       	push	r19
 54e:	8f 93       	push	r24
 550:	9f 93       	push	r25
 552:	af 93       	push	r26
 554:	bf 93       	push	r27
 556:	ef 93       	push	r30
 558:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 55a:	e0 91 71 00 	lds	r30, 0x0071
 55e:	8e 2f       	mov	r24, r30
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	fc 01       	movw	r30, r24
 564:	38 97       	sbiw	r30, 0x08	; 8
 566:	e1 35       	cpi	r30, 0x51	; 81
 568:	f1 05       	cpc	r31, r1
 56a:	b0 f0       	brcs	.+44     	; 0x598 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
 56c:	80 91 71 00 	lds	r24, 0x0071
 570:	80 93 8d 02 	sts	0x028D, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
 574:	84 e0       	ldi	r24, 0x04	; 4
 576:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
 57a:	ff 91       	pop	r31
 57c:	ef 91       	pop	r30
 57e:	bf 91       	pop	r27
 580:	af 91       	pop	r26
 582:	9f 91       	pop	r25
 584:	8f 91       	pop	r24
 586:	3f 91       	pop	r19
 588:	2f 91       	pop	r18
 58a:	0f 90       	pop	r0
 58c:	0b be       	out	0x3b, r0	; 59
 58e:	0f 90       	pop	r0
 590:	0f be       	out	0x3f, r0	; 63
 592:	0f 90       	pop	r0
 594:	1f 90       	pop	r1
 596:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 598:	ea 5b       	subi	r30, 0xBA	; 186
 59a:	ff 4f       	sbci	r31, 0xFF	; 255
 59c:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
 5a0:	80 91 2b 02 	lds	r24, 0x022B
 5a4:	e0 91 8e 02 	lds	r30, 0x028E
 5a8:	f0 91 8f 02 	lds	r31, 0x028F
 5ac:	e8 0f       	add	r30, r24
 5ae:	f1 1d       	adc	r31, r1
 5b0:	80 91 73 00 	lds	r24, 0x0073
 5b4:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
 5b6:	84 e9       	ldi	r24, 0x94	; 148
 5b8:	80 93 74 00 	sts	0x0074, r24
      break;      
 5bc:	de cf       	rjmp	.-68     	; 0x57a <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
 5be:	80 91 90 02 	lds	r24, 0x0290
 5c2:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
 5c6:	10 92 2b 02 	sts	0x022B, r1
      TWCR = TWCR_SEND;     //send SLA+RW
 5ca:	85 e8       	ldi	r24, 0x85	; 133
 5cc:	80 93 74 00 	sts	0x0074, r24
      break;
 5d0:	d4 cf       	rjmp	.-88     	; 0x57a <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
 5d2:	80 91 2b 02 	lds	r24, 0x022B
 5d6:	90 91 91 02 	lds	r25, 0x0291
 5da:	89 17       	cp	r24, r25
 5dc:	60 f7       	brcc	.-40     	; 0x5b6 <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
 5de:	e0 91 8e 02 	lds	r30, 0x028E
 5e2:	f0 91 8f 02 	lds	r31, 0x028F
 5e6:	91 e0       	ldi	r25, 0x01	; 1
 5e8:	98 0f       	add	r25, r24
 5ea:	90 93 2b 02 	sts	0x022B, r25
 5ee:	e8 0f       	add	r30, r24
 5f0:	f1 1d       	adc	r31, r1
 5f2:	80 81       	ld	r24, Z
 5f4:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
 5f8:	85 e8       	ldi	r24, 0x85	; 133
 5fa:	80 93 74 00 	sts	0x0074, r24
 5fe:	bd cf       	rjmp	.-134    	; 0x57a <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
 600:	85 ea       	ldi	r24, 0xA5	; 165
 602:	80 93 74 00 	sts	0x0074, r24
      break;
 606:	b9 cf       	rjmp	.-142    	; 0x57a <__vector_33+0x3e>
 608:	20 91 2b 02 	lds	r18, 0x022B
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 60c:	80 91 91 02 	lds	r24, 0x0291
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	28 17       	cp	r18, r24
 618:	39 07       	cpc	r19, r25
 61a:	dc f4       	brge	.+54     	; 0x652 <__vector_33+0x116>
 61c:	85 ec       	ldi	r24, 0xC5	; 197
 61e:	80 93 74 00 	sts	0x0074, r24
 622:	ab cf       	rjmp	.-170    	; 0x57a <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
 624:	e0 91 8e 02 	lds	r30, 0x028E
 628:	f0 91 8f 02 	lds	r31, 0x028F
 62c:	80 91 2b 02 	lds	r24, 0x022B
 630:	21 e0       	ldi	r18, 0x01	; 1
 632:	28 0f       	add	r18, r24
 634:	20 93 2b 02 	sts	0x022B, r18
 638:	e8 0f       	add	r30, r24
 63a:	f1 1d       	adc	r31, r1
 63c:	80 91 73 00 	lds	r24, 0x0073
 640:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 642:	80 91 91 02 	lds	r24, 0x0291
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	01 97       	sbiw	r24, 0x01	; 1
 64c:	28 17       	cp	r18, r24
 64e:	39 07       	cpc	r19, r25
 650:	2c f3       	brlt	.-54     	; 0x61c <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
 652:	85 e8       	ldi	r24, 0x85	; 133
 654:	80 93 74 00 	sts	0x0074, r24
 658:	90 cf       	rjmp	.-224    	; 0x57a <__vector_33+0x3e>

0000065a <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 65a:	80 91 74 00 	lds	r24, 0x0074
}
 65e:	81 70       	andi	r24, 0x01	; 1
 660:	08 95       	ret

00000662 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 662:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
 666:	90 fd       	sbrc	r25, 0
 668:	fc cf       	rjmp	.-8      	; 0x662 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
 66a:	8e 7f       	andi	r24, 0xFE	; 254
 66c:	80 93 90 02 	sts	0x0290, r24
  twi_buf = twi_data;                   //load pointer to write buffer
 670:	70 93 8f 02 	sts	0x028F, r23
 674:	60 93 8e 02 	sts	0x028E, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
 678:	40 93 91 02 	sts	0x0291, r20
  TWCR = TWCR_START;                    //initiate START
 67c:	85 ea       	ldi	r24, 0xA5	; 165
 67e:	80 93 74 00 	sts	0x0074, r24
 682:	08 95       	ret

00000684 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 684:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
 688:	90 fd       	sbrc	r25, 0
 68a:	fc cf       	rjmp	.-8      	; 0x684 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
 68c:	81 60       	ori	r24, 0x01	; 1
 68e:	80 93 90 02 	sts	0x0290, r24
  twi_buf = twi_data;                  //load pointer to write buffer
 692:	70 93 8f 02 	sts	0x028F, r23
 696:	60 93 8e 02 	sts	0x028E, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
 69a:	40 93 91 02 	sts	0x0291, r20
  TWCR = TWCR_START;                   //initiate START
 69e:	85 ea       	ldi	r24, 0xA5	; 165
 6a0:	80 93 74 00 	sts	0x0074, r24
 6a4:	08 95       	ret

000006a6 <init_twi>:
//10K pullups are present on the board
//For the alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
 6a6:	8f ef       	ldi	r24, 0xFF	; 255
 6a8:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
 6ac:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
 6b0:	8c e0       	ldi	r24, 0x0C	; 12
 6b2:	80 93 70 00 	sts	0x0070, r24
 6b6:	08 95       	ret

000006b8 <get_int_status>:
 6b8:	84 e1       	ldi	r24, 0x14	; 20
 6ba:	80 93 92 02 	sts	0x0292, r24
 6be:	41 e0       	ldi	r20, 0x01	; 1
 6c0:	62 e9       	ldi	r22, 0x92	; 146
 6c2:	72 e0       	ldi	r23, 0x02	; 2
 6c4:	82 e2       	ldi	r24, 0x22	; 34
 6c6:	0e 94 31 03 	call	0x662	; 0x662 <twi_start_wr>
 6ca:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_busy>
 6ce:	81 11       	cpse	r24, r1
 6d0:	fc cf       	rjmp	.-8      	; 0x6ca <get_int_status+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6d2:	8f ea       	ldi	r24, 0xAF	; 175
 6d4:	94 e0       	ldi	r25, 0x04	; 4
 6d6:	01 97       	sbiw	r24, 0x01	; 1
 6d8:	f1 f7       	brne	.-4      	; 0x6d6 <get_int_status+0x1e>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <get_int_status+0x24>
 6dc:	00 00       	nop
 6de:	41 e0       	ldi	r20, 0x01	; 1
 6e0:	64 eb       	ldi	r22, 0xB4	; 180
 6e2:	72 e0       	ldi	r23, 0x02	; 2
 6e4:	82 e2       	ldi	r24, 0x22	; 34
 6e6:	0e 94 42 03 	call	0x684	; 0x684 <twi_start_rd>
 6ea:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_busy>
 6ee:	81 11       	cpse	r24, r1
 6f0:	fc cf       	rjmp	.-8      	; 0x6ea <get_int_status+0x32>
 6f2:	80 91 b4 02 	lds	r24, 0x02B4
 6f6:	08 95       	ret

000006f8 <fm_tune_freq>:
 6f8:	80 e2       	ldi	r24, 0x20	; 32
 6fa:	80 93 92 02 	sts	0x0292, r24
 6fe:	10 92 93 02 	sts	0x0293, r1
 702:	80 91 0b 01 	lds	r24, 0x010B
 706:	90 91 0c 01 	lds	r25, 0x010C
 70a:	90 93 94 02 	sts	0x0294, r25
 70e:	80 93 95 02 	sts	0x0295, r24
 712:	10 92 96 02 	sts	0x0296, r1
 716:	10 92 b3 02 	sts	0x02B3, r1
 71a:	45 e0       	ldi	r20, 0x05	; 5
 71c:	62 e9       	ldi	r22, 0x92	; 146
 71e:	72 e0       	ldi	r23, 0x02	; 2
 720:	82 e2       	ldi	r24, 0x22	; 34
 722:	0e 94 31 03 	call	0x662	; 0x662 <twi_start_wr>
 726:	80 91 b3 02 	lds	r24, 0x02B3
 72a:	88 23       	and	r24, r24
 72c:	e1 f3       	breq	.-8      	; 0x726 <fm_tune_freq+0x2e>
 72e:	08 95       	ret

00000730 <am_tune_freq>:
 730:	80 e4       	ldi	r24, 0x40	; 64
 732:	80 93 92 02 	sts	0x0292, r24
 736:	10 92 93 02 	sts	0x0293, r1
 73a:	80 91 5a 02 	lds	r24, 0x025A
 73e:	90 91 5b 02 	lds	r25, 0x025B
 742:	90 93 94 02 	sts	0x0294, r25
 746:	80 93 95 02 	sts	0x0295, r24
 74a:	10 92 96 02 	sts	0x0296, r1
 74e:	10 92 97 02 	sts	0x0297, r1
 752:	10 92 b3 02 	sts	0x02B3, r1
 756:	46 e0       	ldi	r20, 0x06	; 6
 758:	62 e9       	ldi	r22, 0x92	; 146
 75a:	72 e0       	ldi	r23, 0x02	; 2
 75c:	82 e2       	ldi	r24, 0x22	; 34
 75e:	0e 94 31 03 	call	0x662	; 0x662 <twi_start_wr>
 762:	80 91 b3 02 	lds	r24, 0x02B3
 766:	88 23       	and	r24, r24
 768:	e1 f3       	breq	.-8      	; 0x762 <am_tune_freq+0x32>
 76a:	08 95       	ret

0000076c <sw_tune_freq>:
 76c:	e2 e9       	ldi	r30, 0x92	; 146
 76e:	f2 e0       	ldi	r31, 0x02	; 2
 770:	80 e4       	ldi	r24, 0x40	; 64
 772:	80 83       	st	Z, r24
 774:	11 82       	std	Z+1, r1	; 0x01
 776:	80 91 84 02 	lds	r24, 0x0284
 77a:	90 91 85 02 	lds	r25, 0x0285
 77e:	92 83       	std	Z+2, r25	; 0x02
 780:	83 83       	std	Z+3, r24	; 0x03
 782:	14 82       	std	Z+4, r1	; 0x04
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	85 83       	std	Z+5, r24	; 0x05
 788:	46 e0       	ldi	r20, 0x06	; 6
 78a:	bf 01       	movw	r22, r30
 78c:	82 e2       	ldi	r24, 0x22	; 34
 78e:	0e 94 31 03 	call	0x662	; 0x662 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 792:	2f ef       	ldi	r18, 0xFF	; 255
 794:	87 ee       	ldi	r24, 0xE7	; 231
 796:	93 e0       	ldi	r25, 0x03	; 3
 798:	21 50       	subi	r18, 0x01	; 1
 79a:	80 40       	sbci	r24, 0x00	; 0
 79c:	90 40       	sbci	r25, 0x00	; 0
 79e:	e1 f7       	brne	.-8      	; 0x798 <sw_tune_freq+0x2c>
 7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <sw_tune_freq+0x36>
 7a2:	00 00       	nop
 7a4:	08 95       	ret

000007a6 <radio_pwr_dwn>:
 7a6:	80 91 12 02 	lds	r24, 0x0212
 7aa:	90 91 13 02 	lds	r25, 0x0213
 7ae:	81 30       	cpi	r24, 0x01	; 1
 7b0:	91 05       	cpc	r25, r1
 7b2:	51 f1       	breq	.+84     	; 0x808 <radio_pwr_dwn+0x62>
 7b4:	00 f1       	brcs	.+64     	; 0x7f6 <radio_pwr_dwn+0x50>
 7b6:	02 97       	sbiw	r24, 0x02	; 2
 7b8:	41 f4       	brne	.+16     	; 0x7ca <radio_pwr_dwn+0x24>
 7ba:	60 91 84 02 	lds	r22, 0x0284
 7be:	70 91 85 02 	lds	r23, 0x0285
 7c2:	86 e8       	ldi	r24, 0x86	; 134
 7c4:	92 e0       	ldi	r25, 0x02	; 2
 7c6:	0e 94 76 07 	call	0xeec	; 0xeec <eeprom_write_word>
 7ca:	60 91 59 02 	lds	r22, 0x0259
 7ce:	8c e2       	ldi	r24, 0x2C	; 44
 7d0:	92 e0       	ldi	r25, 0x02	; 2
 7d2:	0e 94 69 07 	call	0xed2	; 0xed2 <eeprom_write_byte>
 7d6:	81 e1       	ldi	r24, 0x11	; 17
 7d8:	80 93 92 02 	sts	0x0292, r24
 7dc:	41 e0       	ldi	r20, 0x01	; 1
 7de:	62 e9       	ldi	r22, 0x92	; 146
 7e0:	72 e0       	ldi	r23, 0x02	; 2
 7e2:	82 e2       	ldi	r24, 0x22	; 34
 7e4:	0e 94 31 03 	call	0x662	; 0x662 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7e8:	87 ed       	ldi	r24, 0xD7	; 215
 7ea:	94 e0       	ldi	r25, 0x04	; 4
 7ec:	01 97       	sbiw	r24, 0x01	; 1
 7ee:	f1 f7       	brne	.-4      	; 0x7ec <radio_pwr_dwn+0x46>
 7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <radio_pwr_dwn+0x4c>
 7f2:	00 00       	nop
 7f4:	08 95       	ret
 7f6:	60 91 0b 01 	lds	r22, 0x010B
 7fa:	70 91 0c 01 	lds	r23, 0x010C
 7fe:	8d e2       	ldi	r24, 0x2D	; 45
 800:	92 e0       	ldi	r25, 0x02	; 2
 802:	0e 94 76 07 	call	0xeec	; 0xeec <eeprom_write_word>
 806:	e1 cf       	rjmp	.-62     	; 0x7ca <radio_pwr_dwn+0x24>
 808:	60 91 5a 02 	lds	r22, 0x025A
 80c:	70 91 5b 02 	lds	r23, 0x025B
 810:	87 e5       	ldi	r24, 0x57	; 87
 812:	92 e0       	ldi	r25, 0x02	; 2
 814:	0e 94 76 07 	call	0xeec	; 0xeec <eeprom_write_word>
 818:	d8 cf       	rjmp	.-80     	; 0x7ca <radio_pwr_dwn+0x24>

0000081a <fm_rsq_status>:
 81a:	83 e2       	ldi	r24, 0x23	; 35
 81c:	80 93 92 02 	sts	0x0292, r24
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	80 93 93 02 	sts	0x0293, r24
 826:	42 e0       	ldi	r20, 0x02	; 2
 828:	62 e9       	ldi	r22, 0x92	; 146
 82a:	72 e0       	ldi	r23, 0x02	; 2
 82c:	82 e2       	ldi	r24, 0x22	; 34
 82e:	0e 94 31 03 	call	0x662	; 0x662 <twi_start_wr>
 832:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_busy>
 836:	81 11       	cpse	r24, r1
 838:	fc cf       	rjmp	.-8      	; 0x832 <fm_rsq_status+0x18>
 83a:	8f ea       	ldi	r24, 0xAF	; 175
 83c:	94 e0       	ldi	r25, 0x04	; 4
 83e:	01 97       	sbiw	r24, 0x01	; 1
 840:	f1 f7       	brne	.-4      	; 0x83e <fm_rsq_status+0x24>
 842:	00 c0       	rjmp	.+0      	; 0x844 <fm_rsq_status+0x2a>
 844:	00 00       	nop
 846:	48 e0       	ldi	r20, 0x08	; 8
 848:	6b e9       	ldi	r22, 0x9B	; 155
 84a:	72 e0       	ldi	r23, 0x02	; 2
 84c:	82 e2       	ldi	r24, 0x22	; 34
 84e:	0e 94 42 03 	call	0x684	; 0x684 <twi_start_rd>
 852:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_busy>
 856:	81 11       	cpse	r24, r1
 858:	fc cf       	rjmp	.-8      	; 0x852 <fm_rsq_status+0x38>
 85a:	08 95       	ret

0000085c <fm_tune_status>:
 85c:	82 e2       	ldi	r24, 0x22	; 34
 85e:	80 93 92 02 	sts	0x0292, r24
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	80 93 93 02 	sts	0x0293, r24
 868:	42 e0       	ldi	r20, 0x02	; 2
 86a:	62 e9       	ldi	r22, 0x92	; 146
 86c:	72 e0       	ldi	r23, 0x02	; 2
 86e:	82 e2       	ldi	r24, 0x22	; 34
 870:	0e 94 31 03 	call	0x662	; 0x662 <twi_start_wr>
 874:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_busy>
 878:	81 11       	cpse	r24, r1
 87a:	fc cf       	rjmp	.-8      	; 0x874 <fm_tune_status+0x18>
 87c:	8f ea       	ldi	r24, 0xAF	; 175
 87e:	94 e0       	ldi	r25, 0x04	; 4
 880:	01 97       	sbiw	r24, 0x01	; 1
 882:	f1 f7       	brne	.-4      	; 0x880 <fm_tune_status+0x24>
 884:	00 c0       	rjmp	.+0      	; 0x886 <fm_tune_status+0x2a>
 886:	00 00       	nop
 888:	48 e0       	ldi	r20, 0x08	; 8
 88a:	6b e9       	ldi	r22, 0x9B	; 155
 88c:	72 e0       	ldi	r23, 0x02	; 2
 88e:	82 e2       	ldi	r24, 0x22	; 34
 890:	0e 94 42 03 	call	0x684	; 0x684 <twi_start_rd>
 894:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_busy>
 898:	81 11       	cpse	r24, r1
 89a:	fc cf       	rjmp	.-8      	; 0x894 <fm_tune_status+0x38>
 89c:	08 95       	ret

0000089e <am_tune_status>:
 89e:	82 e4       	ldi	r24, 0x42	; 66
 8a0:	80 93 92 02 	sts	0x0292, r24
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	80 93 93 02 	sts	0x0293, r24
 8aa:	42 e0       	ldi	r20, 0x02	; 2
 8ac:	62 e9       	ldi	r22, 0x92	; 146
 8ae:	72 e0       	ldi	r23, 0x02	; 2
 8b0:	82 e2       	ldi	r24, 0x22	; 34
 8b2:	0e 94 31 03 	call	0x662	; 0x662 <twi_start_wr>
 8b6:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_busy>
 8ba:	81 11       	cpse	r24, r1
 8bc:	fc cf       	rjmp	.-8      	; 0x8b6 <am_tune_status+0x18>
 8be:	8f ea       	ldi	r24, 0xAF	; 175
 8c0:	94 e0       	ldi	r25, 0x04	; 4
 8c2:	01 97       	sbiw	r24, 0x01	; 1
 8c4:	f1 f7       	brne	.-4      	; 0x8c2 <am_tune_status+0x24>
 8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <am_tune_status+0x2a>
 8c8:	00 00       	nop
 8ca:	48 e0       	ldi	r20, 0x08	; 8
 8cc:	6b e9       	ldi	r22, 0x9B	; 155
 8ce:	72 e0       	ldi	r23, 0x02	; 2
 8d0:	82 e2       	ldi	r24, 0x22	; 34
 8d2:	0c 94 42 03 	jmp	0x684	; 0x684 <twi_start_rd>

000008d6 <am_rsq_status>:
 8d6:	83 e4       	ldi	r24, 0x43	; 67
 8d8:	80 93 92 02 	sts	0x0292, r24
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	80 93 93 02 	sts	0x0293, r24
 8e2:	42 e0       	ldi	r20, 0x02	; 2
 8e4:	62 e9       	ldi	r22, 0x92	; 146
 8e6:	72 e0       	ldi	r23, 0x02	; 2
 8e8:	82 e2       	ldi	r24, 0x22	; 34
 8ea:	0e 94 31 03 	call	0x662	; 0x662 <twi_start_wr>
 8ee:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_busy>
 8f2:	81 11       	cpse	r24, r1
 8f4:	fc cf       	rjmp	.-8      	; 0x8ee <am_rsq_status+0x18>
 8f6:	8f ea       	ldi	r24, 0xAF	; 175
 8f8:	94 e0       	ldi	r25, 0x04	; 4
 8fa:	01 97       	sbiw	r24, 0x01	; 1
 8fc:	f1 f7       	brne	.-4      	; 0x8fa <am_rsq_status+0x24>
 8fe:	00 c0       	rjmp	.+0      	; 0x900 <am_rsq_status+0x2a>
 900:	00 00       	nop
 902:	48 e0       	ldi	r20, 0x08	; 8
 904:	6b e9       	ldi	r22, 0x9B	; 155
 906:	72 e0       	ldi	r23, 0x02	; 2
 908:	82 e2       	ldi	r24, 0x22	; 34
 90a:	0c 94 42 03 	jmp	0x684	; 0x684 <twi_start_rd>

0000090e <set_property>:
 90e:	e2 e9       	ldi	r30, 0x92	; 146
 910:	f2 e0       	ldi	r31, 0x02	; 2
 912:	22 e1       	ldi	r18, 0x12	; 18
 914:	20 83       	st	Z, r18
 916:	11 82       	std	Z+1, r1	; 0x01
 918:	92 83       	std	Z+2, r25	; 0x02
 91a:	83 83       	std	Z+3, r24	; 0x03
 91c:	74 83       	std	Z+4, r23	; 0x04
 91e:	65 83       	std	Z+5, r22	; 0x05
 920:	46 e0       	ldi	r20, 0x06	; 6
 922:	bf 01       	movw	r22, r30
 924:	82 e2       	ldi	r24, 0x22	; 34
 926:	0e 94 31 03 	call	0x662	; 0x662 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 92a:	8f e3       	ldi	r24, 0x3F	; 63
 92c:	9c e9       	ldi	r25, 0x9C	; 156
 92e:	01 97       	sbiw	r24, 0x01	; 1
 930:	f1 f7       	brne	.-4      	; 0x92e <set_property+0x20>
 932:	00 c0       	rjmp	.+0      	; 0x934 <set_property+0x26>
 934:	00 00       	nop
 936:	08 95       	ret

00000938 <fm_pwr_up>:
 938:	8d e2       	ldi	r24, 0x2D	; 45
 93a:	92 e0       	ldi	r25, 0x02	; 2
 93c:	0e 94 63 07 	call	0xec6	; 0xec6 <eeprom_read_word>
 940:	90 93 0c 01 	sts	0x010C, r25
 944:	80 93 0b 01 	sts	0x010B, r24
 948:	8c e2       	ldi	r24, 0x2C	; 44
 94a:	92 e0       	ldi	r25, 0x02	; 2
 94c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <eeprom_read_byte>
 950:	80 93 59 02 	sts	0x0259, r24
 954:	e2 e9       	ldi	r30, 0x92	; 146
 956:	f2 e0       	ldi	r31, 0x02	; 2
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	80 83       	st	Z, r24
 95c:	80 e5       	ldi	r24, 0x50	; 80
 95e:	81 83       	std	Z+1, r24	; 0x01
 960:	85 e0       	ldi	r24, 0x05	; 5
 962:	82 83       	std	Z+2, r24	; 0x02
 964:	43 e0       	ldi	r20, 0x03	; 3
 966:	bf 01       	movw	r22, r30
 968:	82 e2       	ldi	r24, 0x22	; 34
 96a:	0e 94 31 03 	call	0x662	; 0x662 <twi_start_wr>
 96e:	2f ef       	ldi	r18, 0xFF	; 255
 970:	8b ed       	ldi	r24, 0xDB	; 219
 972:	95 e0       	ldi	r25, 0x05	; 5
 974:	21 50       	subi	r18, 0x01	; 1
 976:	80 40       	sbci	r24, 0x00	; 0
 978:	90 40       	sbci	r25, 0x00	; 0
 97a:	e1 f7       	brne	.-8      	; 0x974 <fm_pwr_up+0x3c>
 97c:	00 c0       	rjmp	.+0      	; 0x97e <fm_pwr_up+0x46>
 97e:	00 00       	nop
 980:	61 e0       	ldi	r22, 0x01	; 1
 982:	70 e0       	ldi	r23, 0x00	; 0
 984:	81 e0       	ldi	r24, 0x01	; 1
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	0c 94 87 04 	jmp	0x90e	; 0x90e <set_property>

0000098c <am_pwr_up>:
 98c:	87 e5       	ldi	r24, 0x57	; 87
 98e:	92 e0       	ldi	r25, 0x02	; 2
 990:	0e 94 63 07 	call	0xec6	; 0xec6 <eeprom_read_word>
 994:	90 93 5b 02 	sts	0x025B, r25
 998:	80 93 5a 02 	sts	0x025A, r24
 99c:	8c e2       	ldi	r24, 0x2C	; 44
 99e:	92 e0       	ldi	r25, 0x02	; 2
 9a0:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <eeprom_read_byte>
 9a4:	80 93 59 02 	sts	0x0259, r24
 9a8:	e2 e9       	ldi	r30, 0x92	; 146
 9aa:	f2 e0       	ldi	r31, 0x02	; 2
 9ac:	81 e0       	ldi	r24, 0x01	; 1
 9ae:	80 83       	st	Z, r24
 9b0:	81 e5       	ldi	r24, 0x51	; 81
 9b2:	81 83       	std	Z+1, r24	; 0x01
 9b4:	85 e0       	ldi	r24, 0x05	; 5
 9b6:	82 83       	std	Z+2, r24	; 0x02
 9b8:	43 e0       	ldi	r20, 0x03	; 3
 9ba:	bf 01       	movw	r22, r30
 9bc:	82 e2       	ldi	r24, 0x22	; 34
 9be:	0e 94 31 03 	call	0x662	; 0x662 <twi_start_wr>
 9c2:	2f ef       	ldi	r18, 0xFF	; 255
 9c4:	8b ed       	ldi	r24, 0xDB	; 219
 9c6:	95 e0       	ldi	r25, 0x05	; 5
 9c8:	21 50       	subi	r18, 0x01	; 1
 9ca:	80 40       	sbci	r24, 0x00	; 0
 9cc:	90 40       	sbci	r25, 0x00	; 0
 9ce:	e1 f7       	brne	.-8      	; 0x9c8 <am_pwr_up+0x3c>
 9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <am_pwr_up+0x46>
 9d2:	00 00       	nop
 9d4:	61 e0       	ldi	r22, 0x01	; 1
 9d6:	70 e0       	ldi	r23, 0x00	; 0
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	0c 94 87 04 	jmp	0x90e	; 0x90e <set_property>

000009e0 <sw_pwr_up>:
 9e0:	86 e8       	ldi	r24, 0x86	; 134
 9e2:	92 e0       	ldi	r25, 0x02	; 2
 9e4:	0e 94 63 07 	call	0xec6	; 0xec6 <eeprom_read_word>
 9e8:	90 93 85 02 	sts	0x0285, r25
 9ec:	80 93 84 02 	sts	0x0284, r24
 9f0:	8c e2       	ldi	r24, 0x2C	; 44
 9f2:	92 e0       	ldi	r25, 0x02	; 2
 9f4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <eeprom_read_byte>
 9f8:	80 93 59 02 	sts	0x0259, r24
 9fc:	e2 e9       	ldi	r30, 0x92	; 146
 9fe:	f2 e0       	ldi	r31, 0x02	; 2
 a00:	81 e0       	ldi	r24, 0x01	; 1
 a02:	80 83       	st	Z, r24
 a04:	81 e5       	ldi	r24, 0x51	; 81
 a06:	81 83       	std	Z+1, r24	; 0x01
 a08:	85 e0       	ldi	r24, 0x05	; 5
 a0a:	82 83       	std	Z+2, r24	; 0x02
 a0c:	43 e0       	ldi	r20, 0x03	; 3
 a0e:	bf 01       	movw	r22, r30
 a10:	82 e2       	ldi	r24, 0x22	; 34
 a12:	0e 94 31 03 	call	0x662	; 0x662 <twi_start_wr>
 a16:	2f ef       	ldi	r18, 0xFF	; 255
 a18:	8b ed       	ldi	r24, 0xDB	; 219
 a1a:	95 e0       	ldi	r25, 0x05	; 5
 a1c:	21 50       	subi	r18, 0x01	; 1
 a1e:	80 40       	sbci	r24, 0x00	; 0
 a20:	90 40       	sbci	r25, 0x00	; 0
 a22:	e1 f7       	brne	.-8      	; 0xa1c <sw_pwr_up+0x3c>
 a24:	00 c0       	rjmp	.+0      	; 0xa26 <sw_pwr_up+0x46>
 a26:	00 00       	nop
 a28:	60 e0       	ldi	r22, 0x00	; 0
 a2a:	70 e0       	ldi	r23, 0x00	; 0
 a2c:	82 e0       	ldi	r24, 0x02	; 2
 a2e:	93 e3       	ldi	r25, 0x33	; 51
 a30:	0e 94 87 04 	call	0x90e	; 0x90e <set_property>
 a34:	61 e0       	ldi	r22, 0x01	; 1
 a36:	71 e0       	ldi	r23, 0x01	; 1
 a38:	82 e0       	ldi	r24, 0x02	; 2
 a3a:	91 e3       	ldi	r25, 0x31	; 49
 a3c:	0e 94 87 04 	call	0x90e	; 0x90e <set_property>
 a40:	61 e0       	ldi	r22, 0x01	; 1
 a42:	70 e0       	ldi	r23, 0x00	; 0
 a44:	81 e0       	ldi	r24, 0x01	; 1
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0c 94 87 04 	jmp	0x90e	; 0x90e <set_property>

00000a4c <get_rev>:
 a4c:	80 e1       	ldi	r24, 0x10	; 16
 a4e:	80 93 92 02 	sts	0x0292, r24
 a52:	41 e0       	ldi	r20, 0x01	; 1
 a54:	62 e9       	ldi	r22, 0x92	; 146
 a56:	72 e0       	ldi	r23, 0x02	; 2
 a58:	82 e2       	ldi	r24, 0x22	; 34
 a5a:	0e 94 31 03 	call	0x662	; 0x662 <twi_start_wr>
 a5e:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_busy>
 a62:	81 11       	cpse	r24, r1
 a64:	fc cf       	rjmp	.-8      	; 0xa5e <get_rev+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a66:	8f ea       	ldi	r24, 0xAF	; 175
 a68:	94 e0       	ldi	r25, 0x04	; 4
 a6a:	01 97       	sbiw	r24, 0x01	; 1
 a6c:	f1 f7       	brne	.-4      	; 0xa6a <get_rev+0x1e>
 a6e:	00 c0       	rjmp	.+0      	; 0xa70 <get_rev+0x24>
 a70:	00 00       	nop
 a72:	48 e0       	ldi	r20, 0x08	; 8
 a74:	63 ea       	ldi	r22, 0xA3	; 163
 a76:	72 e0       	ldi	r23, 0x02	; 2
 a78:	82 e2       	ldi	r24, 0x22	; 34
 a7a:	0e 94 42 03 	call	0x684	; 0x684 <twi_start_rd>
 a7e:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_busy>
 a82:	81 11       	cpse	r24, r1
 a84:	fc cf       	rjmp	.-8      	; 0xa7e <get_rev+0x32>
 a86:	84 e1       	ldi	r24, 0x14	; 20
 a88:	91 e0       	ldi	r25, 0x01	; 1
 a8a:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 a8e:	8d e4       	ldi	r24, 0x4D	; 77
 a90:	91 e0       	ldi	r25, 0x01	; 1
 a92:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 a96:	86 e8       	ldi	r24, 0x86	; 134
 a98:	91 e0       	ldi	r25, 0x01	; 1
 a9a:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 a9e:	80 91 a4 02 	lds	r24, 0x02A4
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 aa2:	4a e0       	ldi	r20, 0x0A	; 10
 aa4:	6f e2       	ldi	r22, 0x2F	; 47
 aa6:	72 e0       	ldi	r23, 0x02	; 2
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	0e 94 26 07 	call	0xe4c	; 0xe4c <__itoa_ncheck>
 aae:	8f e2       	ldi	r24, 0x2F	; 47
 ab0:	92 e0       	ldi	r25, 0x02	; 2
 ab2:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 ab6:	83 e9       	ldi	r24, 0x93	; 147
 ab8:	91 e0       	ldi	r25, 0x01	; 1
 aba:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 abe:	80 91 a5 02 	lds	r24, 0x02A5
 ac2:	4a e0       	ldi	r20, 0x0A	; 10
 ac4:	6f e2       	ldi	r22, 0x2F	; 47
 ac6:	72 e0       	ldi	r23, 0x02	; 2
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	0e 94 26 07 	call	0xe4c	; 0xe4c <__itoa_ncheck>
 ace:	8f e2       	ldi	r24, 0x2F	; 47
 ad0:	92 e0       	ldi	r25, 0x02	; 2
 ad2:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 ad6:	83 e8       	ldi	r24, 0x83	; 131
 ad8:	91 e0       	ldi	r25, 0x01	; 1
 ada:	0c 94 28 06 	jmp	0xc50	; 0xc50 <uart1_puts>

00000ade <get_fm_rsq_status>:
 ade:	ff 92       	push	r15
 ae0:	0f 93       	push	r16
 ae2:	1f 93       	push	r17
 ae4:	cf 93       	push	r28
 ae6:	df 93       	push	r29
 ae8:	cd b7       	in	r28, 0x3d	; 61
 aea:	de b7       	in	r29, 0x3e	; 62
 aec:	a8 97       	sbiw	r28, 0x28	; 40
 aee:	0f b6       	in	r0, 0x3f	; 63
 af0:	f8 94       	cli
 af2:	de bf       	out	0x3e, r29	; 62
 af4:	0f be       	out	0x3f, r0	; 63
 af6:	cd bf       	out	0x3d, r28	; 61
 af8:	81 ea       	ldi	r24, 0xA1	; 161
 afa:	91 e0       	ldi	r25, 0x01	; 1
 afc:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 b00:	81 eb       	ldi	r24, 0xB1	; 177
 b02:	91 e0       	ldi	r25, 0x01	; 1
 b04:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 b08:	0b e9       	ldi	r16, 0x9B	; 155
 b0a:	12 e0       	ldi	r17, 0x02	; 2
 b0c:	f8 01       	movw	r30, r16
 b0e:	80 81       	ld	r24, Z
 b10:	40 e1       	ldi	r20, 0x10	; 16
 b12:	6f e2       	ldi	r22, 0x2F	; 47
 b14:	72 e0       	ldi	r23, 0x02	; 2
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	0e 94 26 07 	call	0xe4c	; 0xe4c <__itoa_ncheck>
 b1c:	8f e2       	ldi	r24, 0x2F	; 47
 b1e:	92 e0       	ldi	r25, 0x02	; 2
 b20:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 b24:	83 e8       	ldi	r24, 0x83	; 131
 b26:	91 e0       	ldi	r25, 0x01	; 1
 b28:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 b2c:	81 ec       	ldi	r24, 0xC1	; 193
 b2e:	91 e0       	ldi	r25, 0x01	; 1
 b30:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 b34:	f8 01       	movw	r30, r16
 b36:	81 81       	ldd	r24, Z+1	; 0x01
 b38:	4a e0       	ldi	r20, 0x0A	; 10
 b3a:	6f e2       	ldi	r22, 0x2F	; 47
 b3c:	72 e0       	ldi	r23, 0x02	; 2
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	0e 94 26 07 	call	0xe4c	; 0xe4c <__itoa_ncheck>
 b44:	8f e2       	ldi	r24, 0x2F	; 47
 b46:	92 e0       	ldi	r25, 0x02	; 2
 b48:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 b4c:	83 e8       	ldi	r24, 0x83	; 131
 b4e:	91 e0       	ldi	r25, 0x01	; 1
 b50:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 b54:	f8 01       	movw	r30, r16
 b56:	f3 80       	ldd	r15, Z+3	; 0x03
 b58:	81 ed       	ldi	r24, 0xD1	; 209
 b5a:	91 e0       	ldi	r25, 0x01	; 1
 b5c:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 b60:	4a e0       	ldi	r20, 0x0A	; 10
 b62:	6f e2       	ldi	r22, 0x2F	; 47
 b64:	72 e0       	ldi	r23, 0x02	; 2
 b66:	8f 2d       	mov	r24, r15
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	0e 94 26 07 	call	0xe4c	; 0xe4c <__itoa_ncheck>
 b6e:	8f e2       	ldi	r24, 0x2F	; 47
 b70:	92 e0       	ldi	r25, 0x02	; 2
 b72:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 b76:	83 e8       	ldi	r24, 0x83	; 131
 b78:	91 e0       	ldi	r25, 0x01	; 1
 b7a:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 b7e:	81 ee       	ldi	r24, 0xE1	; 225
 b80:	91 e0       	ldi	r25, 0x01	; 1
 b82:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 b86:	f8 01       	movw	r30, r16
 b88:	82 81       	ldd	r24, Z+2	; 0x02
 b8a:	40 e1       	ldi	r20, 0x10	; 16
 b8c:	be 01       	movw	r22, r28
 b8e:	6f 5f       	subi	r22, 0xFF	; 255
 b90:	7f 4f       	sbci	r23, 0xFF	; 255
 b92:	90 e0       	ldi	r25, 0x00	; 0
 b94:	0e 94 26 07 	call	0xe4c	; 0xe4c <__itoa_ncheck>
 b98:	ce 01       	movw	r24, r28
 b9a:	01 96       	adiw	r24, 0x01	; 1
 b9c:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 ba0:	83 e8       	ldi	r24, 0x83	; 131
 ba2:	91 e0       	ldi	r25, 0x01	; 1
 ba4:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 ba8:	81 ef       	ldi	r24, 0xF1	; 241
 baa:	91 e0       	ldi	r25, 0x01	; 1
 bac:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 bb0:	f8 01       	movw	r30, r16
 bb2:	83 81       	ldd	r24, Z+3	; 0x03
 bb4:	40 e1       	ldi	r20, 0x10	; 16
 bb6:	be 01       	movw	r22, r28
 bb8:	6f 5f       	subi	r22, 0xFF	; 255
 bba:	7f 4f       	sbci	r23, 0xFF	; 255
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	0e 94 26 07 	call	0xe4c	; 0xe4c <__itoa_ncheck>
 bc2:	ce 01       	movw	r24, r28
 bc4:	01 96       	adiw	r24, 0x01	; 1
 bc6:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 bca:	83 e8       	ldi	r24, 0x83	; 131
 bcc:	91 e0       	ldi	r25, 0x01	; 1
 bce:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 bd2:	81 e0       	ldi	r24, 0x01	; 1
 bd4:	92 e0       	ldi	r25, 0x02	; 2
 bd6:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 bda:	f8 01       	movw	r30, r16
 bdc:	84 81       	ldd	r24, Z+4	; 0x04
 bde:	40 e1       	ldi	r20, 0x10	; 16
 be0:	6f e2       	ldi	r22, 0x2F	; 47
 be2:	72 e0       	ldi	r23, 0x02	; 2
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	0e 94 26 07 	call	0xe4c	; 0xe4c <__itoa_ncheck>
 bea:	8f e2       	ldi	r24, 0x2F	; 47
 bec:	92 e0       	ldi	r25, 0x02	; 2
 bee:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 bf2:	83 e8       	ldi	r24, 0x83	; 131
 bf4:	91 e0       	ldi	r25, 0x01	; 1
 bf6:	0e 94 28 06 	call	0xc50	; 0xc50 <uart1_puts>
 bfa:	a8 96       	adiw	r28, 0x28	; 40
 bfc:	0f b6       	in	r0, 0x3f	; 63
 bfe:	f8 94       	cli
 c00:	de bf       	out	0x3e, r29	; 62
 c02:	0f be       	out	0x3f, r0	; 63
 c04:	cd bf       	out	0x3d, r28	; 61
 c06:	df 91       	pop	r29
 c08:	cf 91       	pop	r28
 c0a:	1f 91       	pop	r17
 c0c:	0f 91       	pop	r16
 c0e:	ff 90       	pop	r15
 c10:	08 95       	ret

00000c12 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 c12:	5d 9b       	sbis	0x0b, 5	; 11
 c14:	fe cf       	rjmp	.-4      	; 0xc12 <uart_putc>
    UDR0 = data;    // Send data byte
 c16:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 c18:	5d 9b       	sbis	0x0b, 5	; 11
 c1a:	fe cf       	rjmp	.-4      	; 0xc18 <uart_putc+0x6>
}
 c1c:	08 95       	ret

00000c1e <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 c1e:	90 91 9b 00 	lds	r25, 0x009B
 c22:	95 ff       	sbrs	r25, 5
 c24:	fc cf       	rjmp	.-8      	; 0xc1e <uart1_putc>
    UDR1 = data;    // Send data byte
 c26:	80 93 9c 00 	sts	0x009C, r24
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 c2a:	80 91 9b 00 	lds	r24, 0x009B
 c2e:	85 ff       	sbrs	r24, 5
 c30:	fc cf       	rjmp	.-8      	; 0xc2a <uart1_putc+0xc>
}
 c32:	08 95       	ret

00000c34 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
 c34:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 c36:	90 81       	ld	r25, Z
 c38:	99 23       	and	r25, r25
 c3a:	49 f0       	breq	.+18     	; 0xc4e <uart_puts+0x1a>
 c3c:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 c3e:	5d 9b       	sbis	0x0b, 5	; 11
 c40:	fe cf       	rjmp	.-4      	; 0xc3e <uart_puts+0xa>
    UDR0 = data;    // Send data byte
 c42:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 c44:	5d 9b       	sbis	0x0b, 5	; 11
 c46:	fe cf       	rjmp	.-4      	; 0xc44 <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 c48:	91 91       	ld	r25, Z+
 c4a:	91 11       	cpse	r25, r1
 c4c:	f8 cf       	rjmp	.-16     	; 0xc3e <uart_puts+0xa>
 c4e:	08 95       	ret

00000c50 <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 c50:	fc 01       	movw	r30, r24
 c52:	20 81       	ld	r18, Z
 c54:	22 23       	and	r18, r18
 c56:	71 f0       	breq	.+28     	; 0xc74 <uart1_puts+0x24>
 c58:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 c5a:	90 91 9b 00 	lds	r25, 0x009B
 c5e:	95 ff       	sbrs	r25, 5
 c60:	fc cf       	rjmp	.-8      	; 0xc5a <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
 c62:	20 93 9c 00 	sts	0x009C, r18
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 c66:	90 91 9b 00 	lds	r25, 0x009B
 c6a:	95 ff       	sbrs	r25, 5
 c6c:	fc cf       	rjmp	.-8      	; 0xc66 <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 c6e:	21 91       	ld	r18, Z+
 c70:	21 11       	cpse	r18, r1
 c72:	f3 cf       	rjmp	.-26     	; 0xc5a <uart1_puts+0xa>
 c74:	08 95       	ret

00000c76 <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 c76:	9c 01       	movw	r18, r24
 c78:	fc 01       	movw	r30, r24
 c7a:	44 91       	lpm	r20, Z
 c7c:	44 23       	and	r20, r20
 c7e:	69 f0       	breq	.+26     	; 0xc9a <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
 c80:	01 96       	adiw	r24, 0x01	; 1
 c82:	f9 01       	movw	r30, r18
 c84:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 c86:	5d 9b       	sbis	0x0b, 5	; 11
 c88:	fe cf       	rjmp	.-4      	; 0xc86 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
 c8a:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 c8c:	5d 9b       	sbis	0x0b, 5	; 11
 c8e:	fe cf       	rjmp	.-4      	; 0xc8c <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 c90:	9c 01       	movw	r18, r24
 c92:	fc 01       	movw	r30, r24
 c94:	44 91       	lpm	r20, Z
 c96:	41 11       	cpse	r20, r1
 c98:	f3 cf       	rjmp	.-26     	; 0xc80 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
 c9a:	08 95       	ret

00000c9c <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
 c9c:	8a b1       	in	r24, 0x0a	; 10
 c9e:	88 69       	ori	r24, 0x98	; 152
 ca0:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 ca2:	e5 e9       	ldi	r30, 0x95	; 149
 ca4:	f0 e0       	ldi	r31, 0x00	; 0
 ca6:	80 81       	ld	r24, Z
 ca8:	86 60       	ori	r24, 0x06	; 6
 caa:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
 cac:	10 92 90 00 	sts	0x0090, r1
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
 cb0:	87 e6       	ldi	r24, 0x67	; 103
 cb2:	89 b9       	out	0x09, r24	; 9
 cb4:	08 95       	ret

00000cb6 <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
 cb6:	ea e9       	ldi	r30, 0x9A	; 154
 cb8:	f0 e0       	ldi	r31, 0x00	; 0
 cba:	80 81       	ld	r24, Z
 cbc:	88 61       	ori	r24, 0x18	; 24
 cbe:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
 cc0:	ed e9       	ldi	r30, 0x9D	; 157
 cc2:	f0 e0       	ldi	r31, 0x00	; 0
 cc4:	80 81       	ld	r24, Z
 cc6:	86 60       	ori	r24, 0x06	; 6
 cc8:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >>8 ); //load upper byte of the baud rate into UBRR 
 cca:	10 92 98 00 	sts	0x0098, r1
  UBRR1L =  BAUDVALUE_1;       //load lower byte of the baud rate into UBRR 
 cce:	87 e6       	ldi	r24, 0x67	; 103
 cd0:	80 93 99 00 	sts	0x0099, r24
 cd4:	08 95       	ret

00000cd6 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 cd6:	80 e8       	ldi	r24, 0x80	; 128
 cd8:	9e e3       	ldi	r25, 0x3E	; 62
 cda:	02 c0       	rjmp	.+4      	; 0xce0 <uart_getc+0xa>
 cdc:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 cde:	21 f0       	breq	.+8      	; 0xce8 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 ce0:	5f 9b       	sbis	0x0b, 7	; 11
 ce2:	fc cf       	rjmp	.-8      	; 0xcdc <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
 ce4:	8c b1       	in	r24, 0x0c	; 12
 ce6:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
 ce8:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
 cea:	08 95       	ret

00000cec <uart1_getc>:
 cec:	80 e8       	ldi	r24, 0x80	; 128
 cee:	9e e3       	ldi	r25, 0x3E	; 62
 cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <uart1_getc+0xa>
 cf2:	01 97       	sbiw	r24, 0x01	; 1
 cf4:	39 f0       	breq	.+14     	; 0xd04 <uart1_getc+0x18>
 cf6:	20 91 9b 00 	lds	r18, 0x009B
 cfa:	27 ff       	sbrs	r18, 7
 cfc:	fa cf       	rjmp	.-12     	; 0xcf2 <uart1_getc+0x6>
 cfe:	80 91 9c 00 	lds	r24, 0x009C
 d02:	08 95       	ret
 d04:	80 e0       	ldi	r24, 0x00	; 0
 d06:	08 95       	ret

00000d08 <main>:
//***********************************************************************************


//***********************************************************************************
uint8_t main()
{
 d08:	cf 93       	push	r28
 d0a:	df 93       	push	r29
 d0c:	00 d0       	rcall	.+0      	; 0xd0e <main+0x6>
 d0e:	00 d0       	rcall	.+0      	; 0xd10 <main+0x8>
 d10:	1f 92       	push	r1
 d12:	cd b7       	in	r28, 0x3d	; 61
 d14:	de b7       	in	r29, 0x3e	; 62
init_twi();
 d16:	0e 94 53 03 	call	0x6a6	; 0x6a6 <init_twi>
    data = SPDR; // move spdr value to variable
}

void spi_init()
{
	DDRB = 0xF7;// set ss_n, sck, mosi
 d1a:	87 ef       	ldi	r24, 0xF7	; 247
 d1c:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE) | (1<<MSTR);// master mode
 d1e:	8d b1       	in	r24, 0x0d	; 13
 d20:	80 65       	ori	r24, 0x50	; 80
 d22:	8d b9       	out	0x0d, r24	; 13
	SPSR |= (1<<SPI2X);// double speed operation
 d24:	70 9a       	sbi	0x0e, 0	; 14
//***********************************************************************************
uint8_t main()
{
init_twi();
spi_init(); 
 TIMSK|=(1<<TOIE0);                           //setting up timer0
 d26:	87 b7       	in	r24, 0x37	; 55
 d28:	81 60       	ori	r24, 0x01	; 1
 d2a:	87 bf       	out	0x37, r24	; 55
 TCCR0|=(1<<CS02) | (1<<CS00);
 d2c:	83 b7       	in	r24, 0x33	; 51
 d2e:	85 60       	ori	r24, 0x05	; 5
 d30:	83 bf       	out	0x33, r24	; 51
//init_ext();
        //Setup audio output (max)
	DDRE  |= 0x08;
 d32:	13 9a       	sbi	0x02, 3	; 2
  TCCR3A |= (1<<COM3A1) | (1<<COM3A0) | (1<<WGM31);//initialize timer3 for vol
 d34:	80 91 8b 00 	lds	r24, 0x008B
 d38:	82 6c       	ori	r24, 0xC2	; 194
 d3a:	80 93 8b 00 	sts	0x008B, r24
  TCCR3B |= (1<<WGM33) | (1<<WGM32) | (1<<CS30);   //control
 d3e:	80 91 8a 00 	lds	r24, 0x008A
 d42:	89 61       	ori	r24, 0x19	; 25
 d44:	80 93 8a 00 	sts	0x008A, r24
  TCCR3C = 0x00;
 d48:	10 92 8c 00 	sts	0x008C, r1
  OCR3A = 0x7000;
 d4c:	80 e0       	ldi	r24, 0x00	; 0
 d4e:	90 e7       	ldi	r25, 0x70	; 112
 d50:	90 93 87 00 	sts	0x0087, r25
 d54:	80 93 86 00 	sts	0x0086, r24
  ICR3 = 0xF000;
 d58:	80 e0       	ldi	r24, 0x00	; 0
 d5a:	90 ef       	ldi	r25, 0xF0	; 240
 d5c:	90 93 81 00 	sts	0x0081, r25
 d60:	80 93 80 00 	sts	0x0080, r24

        //PORTE |= 0x08;
	//DDRE  |= 0x08;

	DDRE  |= 0x04; //Port E bit 2 is active high reset for radio 
 d64:	12 9a       	sbi	0x02, 2	; 2
	PORTE |= 0x04; //radio reset is on at powerup (active high)
 d66:	1a 9a       	sbi	0x03, 2	; 3

        EICRB |= (1<<ISC71) | (1<<ISC70);
 d68:	8a b7       	in	r24, 0x3a	; 58
 d6a:	80 6c       	ori	r24, 0xC0	; 192
 d6c:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= (1<<INT7);
 d6e:	89 b7       	in	r24, 0x39	; 57
 d70:	80 68       	ori	r24, 0x80	; 128
 d72:	89 bf       	out	0x39, r24	; 57

	//hardware reset of Si4734
	PORTE &= ~(1<<PE7); //int2 initially low to sense TWI mode
 d74:	1f 98       	cbi	0x03, 7	; 3
	DDRE  |= 0x80;      //turn on Port E bit 7 to drive it low
 d76:	17 9a       	sbi	0x02, 7	; 2
	PORTE |=  (1<<PE2); //hardware reset Si4734 
 d78:	1a 9a       	sbi	0x03, 2	; 3
 d7a:	8f e1       	ldi	r24, 0x1F	; 31
 d7c:	93 e0       	ldi	r25, 0x03	; 3
 d7e:	01 97       	sbiw	r24, 0x01	; 1
 d80:	f1 f7       	brne	.-4      	; 0xd7e <main+0x76>
 d82:	00 c0       	rjmp	.+0      	; 0xd84 <main+0x7c>
 d84:	00 00       	nop
	_delay_us(200);     //hold for 200us, 100us by spec         
	PORTE &= ~(1<<PE2); //release reset 
 d86:	1a 98       	cbi	0x03, 2	; 3
 d88:	90 ea       	ldi	r25, 0xA0	; 160
 d8a:	9a 95       	dec	r25
 d8c:	f1 f7       	brne	.-4      	; 0xd8a <main+0x82>
	_delay_us(30);      //5us required because of my slow I2C translators I suspect
	//Si code in "low" has 30us delay...no explaination
	DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt
 d8e:	17 98       	cbi	0x02, 7	; 2

        sei();
 d90:	78 94       	sei
//        init_ext();

	fm_pwr_up(); //powerup the radio as appropriate
 d92:	0e 94 9c 04 	call	0x938	; 0x938 <fm_pwr_up>
	current_fm_freq = 9910; //arg2, arg3: 99.9Mhz, 200khz steps
 d96:	86 eb       	ldi	r24, 0xB6	; 182
 d98:	96 e2       	ldi	r25, 0x26	; 38
 d9a:	90 93 0c 01 	sts	0x010C, r25
 d9e:	80 93 0b 01 	sts	0x010B, r24
	fm_tune_freq(); //tune radio to frequency in current_fm_freq
 da2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <fm_tune_freq>

DDRB = 0xF0; //set portb 4-7 output
 da6:	80 ef       	ldi	r24, 0xF0	; 240
 da8:	87 bb       	out	0x17, r24	; 23
uint8_t disp[5] = {0x00,0x10,0x20,0x30,0x40};//slection array
 daa:	85 e0       	ldi	r24, 0x05	; 5
 dac:	ef e0       	ldi	r30, 0x0F	; 15
 dae:	f1 e0       	ldi	r31, 0x01	; 1
 db0:	de 01       	movw	r26, r28
 db2:	11 96       	adiw	r26, 0x01	; 1
 db4:	01 90       	ld	r0, Z+
 db6:	0d 92       	st	X+, r0
 db8:	8a 95       	dec	r24
 dba:	e1 f7       	brne	.-8      	; 0xdb4 <main+0xac>
 dbc:	8e 01       	movw	r16, r28
 dbe:	0a 5f       	subi	r16, 0xFA	; 250
 dc0:	1f 4f       	sbci	r17, 0xFF	; 255
while(1){ 
        total = current_fm_freq;
        encoder();                            //call encoder
	bargraph();  
	DDRA = 0x00;      // set porta to input
        PORTA = 0xFF;     // set porta to pull ups
 dc2:	ff 24       	eor	r15, r15
 dc4:	fa 94       	dec	r15
uint8_t disp[5] = {0x00,0x10,0x20,0x30,0x40};//slection array
int16_t sum = 0;
uint8_t a = 0;
uint8_t b = 0;
while(1){ 
        total = current_fm_freq;
 dc6:	80 91 0b 01 	lds	r24, 0x010B
 dca:	90 91 0c 01 	lds	r25, 0x010C
 dce:	90 93 16 02 	sts	0x0216, r25
 dd2:	80 93 15 02 	sts	0x0215, r24
        encoder();                            //call encoder
 dd6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <encoder>
  return 0;

}

 void bargraph(){
  PORTB |= 0x01; //rising edge to rgclk
 dda:	c0 9a       	sbi	0x18, 0	; 24
  PORTB &= ~0x01;//falling edge to rgclk
 ddc:	c0 98       	cbi	0x18, 0	; 24
uint8_t b = 0;
while(1){ 
        total = current_fm_freq;
        encoder();                            //call encoder
	bargraph();  
	DDRA = 0x00;      // set porta to input
 dde:	1a ba       	out	0x1a, r1	; 26
        PORTA = 0xFF;     // set porta to pull ups
 de0:	fb ba       	out	0x1b, r15	; 27
	asm("nop");
 de2:	00 00       	nop
	asm("nop");
 de4:	00 00       	nop
	if (sum>1023){    //boubd count to 0-1023
    		sum =1;
  	        }       
	segsum(total);//break up the disp_value to 4, BCD digits in the array: call (segsum)
 de6:	80 91 15 02 	lds	r24, 0x0215
 dea:	90 91 16 02 	lds	r25, 0x0216
 dee:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <segsum>

	DDRA = 0xFF;// set porta to output
 df2:	fa ba       	out	0x1a, r15	; 26
	asm("nop");
 df4:	00 00       	nop
	asm("nop");
 df6:	00 00       	nop
 df8:	fe 01       	movw	r30, r28
 dfa:	31 96       	adiw	r30, 0x01	; 1
 dfc:	a8 e8       	ldi	r26, 0x88	; 136
 dfe:	b2 e0       	ldi	r27, 0x02	; 2
	for(b=0;b<5;b++){             
		PORTB = disp[b];         //selection logic
 e00:	81 91       	ld	r24, Z+
 e02:	88 bb       	out	0x18, r24	; 24
		PORTA = segment_data[b]; //sending data to port a
 e04:	8d 91       	ld	r24, X+
 e06:	8b bb       	out	0x1b, r24	; 27
 e08:	8f e8       	ldi	r24, 0x8F	; 143
 e0a:	91 e0       	ldi	r25, 0x01	; 1
 e0c:	01 97       	sbiw	r24, 0x01	; 1
 e0e:	f1 f7       	brne	.-4      	; 0xe0c <main+0x104>
 e10:	00 c0       	rjmp	.+0      	; 0xe12 <main+0x10a>
 e12:	00 00       	nop
	segsum(total);//break up the disp_value to 4, BCD digits in the array: call (segsum)

	DDRA = 0xFF;// set porta to output
	asm("nop");
	asm("nop");
	for(b=0;b<5;b++){             
 e14:	e0 17       	cp	r30, r16
 e16:	f1 07       	cpc	r31, r17
 e18:	99 f7       	brne	.-26     	; 0xe00 <main+0xf8>
 e1a:	d5 cf       	rjmp	.-86     	; 0xdc6 <main+0xbe>

00000e1c <__tablejump2__>:
 e1c:	ee 0f       	add	r30, r30
 e1e:	ff 1f       	adc	r31, r31
 e20:	00 24       	eor	r0, r0
 e22:	00 1c       	adc	r0, r0
 e24:	0b be       	out	0x3b, r0	; 59
 e26:	07 90       	elpm	r0, Z+
 e28:	f6 91       	elpm	r31, Z
 e2a:	e0 2d       	mov	r30, r0
 e2c:	09 94       	ijmp

00000e2e <__umulhisi3>:
 e2e:	a2 9f       	mul	r26, r18
 e30:	b0 01       	movw	r22, r0
 e32:	b3 9f       	mul	r27, r19
 e34:	c0 01       	movw	r24, r0
 e36:	a3 9f       	mul	r26, r19
 e38:	70 0d       	add	r23, r0
 e3a:	81 1d       	adc	r24, r1
 e3c:	11 24       	eor	r1, r1
 e3e:	91 1d       	adc	r25, r1
 e40:	b2 9f       	mul	r27, r18
 e42:	70 0d       	add	r23, r0
 e44:	81 1d       	adc	r24, r1
 e46:	11 24       	eor	r1, r1
 e48:	91 1d       	adc	r25, r1
 e4a:	08 95       	ret

00000e4c <__itoa_ncheck>:
 e4c:	bb 27       	eor	r27, r27
 e4e:	4a 30       	cpi	r20, 0x0A	; 10
 e50:	31 f4       	brne	.+12     	; 0xe5e <__itoa_ncheck+0x12>
 e52:	99 23       	and	r25, r25
 e54:	22 f4       	brpl	.+8      	; 0xe5e <__itoa_ncheck+0x12>
 e56:	bd e2       	ldi	r27, 0x2D	; 45
 e58:	90 95       	com	r25
 e5a:	81 95       	neg	r24
 e5c:	9f 4f       	sbci	r25, 0xFF	; 255
 e5e:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__utoa_common>

00000e62 <__utoa_ncheck>:
 e62:	bb 27       	eor	r27, r27

00000e64 <__utoa_common>:
 e64:	fb 01       	movw	r30, r22
 e66:	55 27       	eor	r21, r21
 e68:	aa 27       	eor	r26, r26
 e6a:	88 0f       	add	r24, r24
 e6c:	99 1f       	adc	r25, r25
 e6e:	aa 1f       	adc	r26, r26
 e70:	a4 17       	cp	r26, r20
 e72:	10 f0       	brcs	.+4      	; 0xe78 <__utoa_common+0x14>
 e74:	a4 1b       	sub	r26, r20
 e76:	83 95       	inc	r24
 e78:	50 51       	subi	r21, 0x10	; 16
 e7a:	b9 f7       	brne	.-18     	; 0xe6a <__utoa_common+0x6>
 e7c:	a0 5d       	subi	r26, 0xD0	; 208
 e7e:	aa 33       	cpi	r26, 0x3A	; 58
 e80:	08 f0       	brcs	.+2      	; 0xe84 <__utoa_common+0x20>
 e82:	a9 5d       	subi	r26, 0xD9	; 217
 e84:	a1 93       	st	Z+, r26
 e86:	00 97       	sbiw	r24, 0x00	; 0
 e88:	79 f7       	brne	.-34     	; 0xe68 <__utoa_common+0x4>
 e8a:	b1 11       	cpse	r27, r1
 e8c:	b1 93       	st	Z+, r27
 e8e:	11 92       	st	Z+, r1
 e90:	cb 01       	movw	r24, r22
 e92:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <strrev>

00000e96 <strrev>:
 e96:	dc 01       	movw	r26, r24
 e98:	fc 01       	movw	r30, r24
 e9a:	67 2f       	mov	r22, r23
 e9c:	71 91       	ld	r23, Z+
 e9e:	77 23       	and	r23, r23
 ea0:	e1 f7       	brne	.-8      	; 0xe9a <strrev+0x4>
 ea2:	32 97       	sbiw	r30, 0x02	; 2
 ea4:	04 c0       	rjmp	.+8      	; 0xeae <strrev+0x18>
 ea6:	7c 91       	ld	r23, X
 ea8:	6d 93       	st	X+, r22
 eaa:	70 83       	st	Z, r23
 eac:	62 91       	ld	r22, -Z
 eae:	ae 17       	cp	r26, r30
 eb0:	bf 07       	cpc	r27, r31
 eb2:	c8 f3       	brcs	.-14     	; 0xea6 <strrev+0x10>
 eb4:	08 95       	ret

00000eb6 <eeprom_read_byte>:
 eb6:	e1 99       	sbic	0x1c, 1	; 28
 eb8:	fe cf       	rjmp	.-4      	; 0xeb6 <eeprom_read_byte>
 eba:	9f bb       	out	0x1f, r25	; 31
 ebc:	8e bb       	out	0x1e, r24	; 30
 ebe:	e0 9a       	sbi	0x1c, 0	; 28
 ec0:	99 27       	eor	r25, r25
 ec2:	8d b3       	in	r24, 0x1d	; 29
 ec4:	08 95       	ret

00000ec6 <eeprom_read_word>:
 ec6:	a8 e1       	ldi	r26, 0x18	; 24
 ec8:	b0 e0       	ldi	r27, 0x00	; 0
 eca:	42 e0       	ldi	r20, 0x02	; 2
 ecc:	50 e0       	ldi	r21, 0x00	; 0
 ece:	0c 94 7d 07 	jmp	0xefa	; 0xefa <eeprom_read_blraw>

00000ed2 <eeprom_write_byte>:
 ed2:	26 2f       	mov	r18, r22

00000ed4 <eeprom_write_r18>:
 ed4:	e1 99       	sbic	0x1c, 1	; 28
 ed6:	fe cf       	rjmp	.-4      	; 0xed4 <eeprom_write_r18>
 ed8:	9f bb       	out	0x1f, r25	; 31
 eda:	8e bb       	out	0x1e, r24	; 30
 edc:	2d bb       	out	0x1d, r18	; 29
 ede:	0f b6       	in	r0, 0x3f	; 63
 ee0:	f8 94       	cli
 ee2:	e2 9a       	sbi	0x1c, 2	; 28
 ee4:	e1 9a       	sbi	0x1c, 1	; 28
 ee6:	0f be       	out	0x3f, r0	; 63
 ee8:	01 96       	adiw	r24, 0x01	; 1
 eea:	08 95       	ret

00000eec <eeprom_write_word>:
 eec:	0e 94 69 07 	call	0xed2	; 0xed2 <eeprom_write_byte>
 ef0:	27 2f       	mov	r18, r23
 ef2:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <eeprom_write_r18>

00000ef6 <eeprom_read_block>:
 ef6:	dc 01       	movw	r26, r24
 ef8:	cb 01       	movw	r24, r22

00000efa <eeprom_read_blraw>:
 efa:	fc 01       	movw	r30, r24
 efc:	e1 99       	sbic	0x1c, 1	; 28
 efe:	fe cf       	rjmp	.-4      	; 0xefc <eeprom_read_blraw+0x2>
 f00:	06 c0       	rjmp	.+12     	; 0xf0e <eeprom_read_blraw+0x14>
 f02:	ff bb       	out	0x1f, r31	; 31
 f04:	ee bb       	out	0x1e, r30	; 30
 f06:	e0 9a       	sbi	0x1c, 0	; 28
 f08:	31 96       	adiw	r30, 0x01	; 1
 f0a:	0d b2       	in	r0, 0x1d	; 29
 f0c:	0d 92       	st	X+, r0
 f0e:	41 50       	subi	r20, 0x01	; 1
 f10:	50 40       	sbci	r21, 0x00	; 0
 f12:	b8 f7       	brcc	.-18     	; 0xf02 <eeprom_read_blraw+0x8>
 f14:	08 95       	ret

00000f16 <_exit>:
 f16:	f8 94       	cli

00000f18 <__stop_program>:
 f18:	ff cf       	rjmp	.-2      	; 0xf18 <__stop_program>
